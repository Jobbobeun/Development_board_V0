
BLINK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004830  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c8  080049c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080049c8  080049c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049c8  080049c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000070  08004a40  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08004a40  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001714e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e43  00000000  00000000  000371e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c0  00000000  00000000  0003b278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017af9  00000000  00000000  0003c338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ffd4  00000000  00000000  00053e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007be54  00000000  00000000  00063e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfc59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de4  00000000  00000000  000dfcd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004924 	.word	0x08004924

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004924 	.word	0x08004924

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ADC_Init>:

#include "Adc.h"
#include "Initialization.h"
#include "main.h"

void ADC_Init(void){
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, ADC_array, 7);
 8000160:	2207      	movs	r2, #7
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <ADC_Init+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <ADC_Init+0x18>)
 8000166:	f001 fa7d 	bl	8001664 <HAL_ADC_Start_DMA>

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20000288 	.word	0x20000288
 8000174:	20000140 	.word	0x20000140

08000178 <Error_Handler>:

#include "Error.h"


void Error_Handler(void)
{
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
while (1){
 800017c:	e7fe      	b.n	800017c <Error_Handler+0x4>
	...

08000180 <MX_TIM1_Init>:
#include "Initialization.h"
#include "Error.h"


 void MX_TIM1_Init(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000186:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000194:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800019e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]
 80001ac:	611a      	str	r2, [r3, #16]
 80001ae:	615a      	str	r2, [r3, #20]
 80001b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80001b2:	1d3b      	adds	r3, r7, #4
 80001b4:	2220      	movs	r2, #32
 80001b6:	2100      	movs	r1, #0
 80001b8:	4618      	mov	r0, r3
 80001ba:	f003 ff99 	bl	80040f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80001be:	4b50      	ldr	r3, [pc, #320]	; (8000300 <MX_TIM1_Init+0x180>)
 80001c0:	4a50      	ldr	r2, [pc, #320]	; (8000304 <MX_TIM1_Init+0x184>)
 80001c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80001c4:	4b4e      	ldr	r3, [pc, #312]	; (8000300 <MX_TIM1_Init+0x180>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80001ca:	4b4d      	ldr	r3, [pc, #308]	; (8000300 <MX_TIM1_Init+0x180>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80001d0:	4b4b      	ldr	r3, [pc, #300]	; (8000300 <MX_TIM1_Init+0x180>)
 80001d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80001d8:	4b49      	ldr	r3, [pc, #292]	; (8000300 <MX_TIM1_Init+0x180>)
 80001da:	2200      	movs	r2, #0
 80001dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80001de:	4b48      	ldr	r3, [pc, #288]	; (8000300 <MX_TIM1_Init+0x180>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001e4:	4b46      	ldr	r3, [pc, #280]	; (8000300 <MX_TIM1_Init+0x180>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80001ea:	4845      	ldr	r0, [pc, #276]	; (8000300 <MX_TIM1_Init+0x180>)
 80001ec:	f003 f80b 	bl	8003206 <HAL_TIM_Base_Init>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80001f6:	f7ff ffbf 	bl	8000178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80001fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000200:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000204:	4619      	mov	r1, r3
 8000206:	483e      	ldr	r0, [pc, #248]	; (8000300 <MX_TIM1_Init+0x180>)
 8000208:	f003 f94c 	bl	80034a4 <HAL_TIM_ConfigClockSource>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000212:	f7ff ffb1 	bl	8000178 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000216:	483a      	ldr	r0, [pc, #232]	; (8000300 <MX_TIM1_Init+0x180>)
 8000218:	f003 f820 	bl	800325c <HAL_TIM_PWM_Init>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000222:	f7ff ffa9 	bl	8000178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000226:	2300      	movs	r3, #0
 8000228:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800022a:	2300      	movs	r3, #0
 800022c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800022e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000232:	4619      	mov	r1, r3
 8000234:	4832      	ldr	r0, [pc, #200]	; (8000300 <MX_TIM1_Init+0x180>)
 8000236:	f003 fc91 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000240:	f7ff ff9a 	bl	8000178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000244:	2360      	movs	r3, #96	; 0x60
 8000246:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800024c:	2300      	movs	r3, #0
 800024e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000250:	2300      	movs	r3, #0
 8000252:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000254:	2300      	movs	r3, #0
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000258:	2300      	movs	r3, #0
 800025a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800025c:	2300      	movs	r3, #0
 800025e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000264:	2200      	movs	r2, #0
 8000266:	4619      	mov	r1, r3
 8000268:	4825      	ldr	r0, [pc, #148]	; (8000300 <MX_TIM1_Init+0x180>)
 800026a:	f003 f855 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000274:	f7ff ff80 	bl	8000178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800027c:	2204      	movs	r2, #4
 800027e:	4619      	mov	r1, r3
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <MX_TIM1_Init+0x180>)
 8000282:	f003 f849 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800028c:	f7ff ff74 	bl	8000178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000294:	2208      	movs	r2, #8
 8000296:	4619      	mov	r1, r3
 8000298:	4819      	ldr	r0, [pc, #100]	; (8000300 <MX_TIM1_Init+0x180>)
 800029a:	f003 f83d 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80002a4:	f7ff ff68 	bl	8000178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80002a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ac:	220c      	movs	r2, #12
 80002ae:	4619      	mov	r1, r3
 80002b0:	4813      	ldr	r0, [pc, #76]	; (8000300 <MX_TIM1_Init+0x180>)
 80002b2:	f003 f831 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80002bc:	f7ff ff5c 	bl	8000178 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80002d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80002da:	2300      	movs	r3, #0
 80002dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4807      	ldr	r0, [pc, #28]	; (8000300 <MX_TIM1_Init+0x180>)
 80002e4:	f003 fc7e 	bl	8003be4 <HAL_TIMEx_ConfigBreakDeadTime>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80002ee:	f7ff ff43 	bl	8000178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <MX_TIM1_Init+0x180>)
 80002f4:	f000 fd38 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 80002f8:	bf00      	nop
 80002fa:	3758      	adds	r7, #88	; 0x58
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	200001c8 	.word	0x200001c8
 8000304:	40012c00 	.word	0x40012c00

08000308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030e:	f107 0320 	add.w	r3, r7, #32
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]
 8000326:	615a      	str	r2, [r3, #20]
 8000328:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <MX_TIM2_Init+0xc0>)
 800032c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000332:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <MX_TIM2_Init+0xc0>)
 8000334:	2200      	movs	r2, #0
 8000336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <MX_TIM2_Init+0xc0>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800033e:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_TIM2_Init+0xc0>)
 8000340:	2200      	movs	r2, #0
 8000342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <MX_TIM2_Init+0xc0>)
 8000346:	2200      	movs	r2, #0
 8000348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034a:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <MX_TIM2_Init+0xc0>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <MX_TIM2_Init+0xc0>)
 8000352:	f002 ff83 	bl	800325c <HAL_TIM_PWM_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800035c:	f7ff ff0c 	bl	8000178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000368:	f107 0320 	add.w	r3, r7, #32
 800036c:	4619      	mov	r1, r3
 800036e:	4816      	ldr	r0, [pc, #88]	; (80003c8 <MX_TIM2_Init+0xc0>)
 8000370:	f003 fbf4 	bl	8003b5c <HAL_TIMEx_MasterConfigSynchronization>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800037a:	f7ff fefd 	bl	8000178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800037e:	2360      	movs	r3, #96	; 0x60
 8000380:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	4619      	mov	r1, r3
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <MX_TIM2_Init+0xc0>)
 8000396:	f002 ffbf 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80003a0:	f7ff feea 	bl	8000178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2204      	movs	r2, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4807      	ldr	r0, [pc, #28]	; (80003c8 <MX_TIM2_Init+0xc0>)
 80003ac:	f002 ffb4 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003b6:	f7ff fedf 	bl	8000178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003ba:	4803      	ldr	r0, [pc, #12]	; (80003c8 <MX_TIM2_Init+0xc0>)
 80003bc:	f000 fcd4 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 80003c0:	bf00      	nop
 80003c2:	3728      	adds	r7, #40	; 0x28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000208 	.word	0x20000208

080003cc <MX_ADC1_Init>:
 void MX_ADC1_Init(void)
 {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN ADC1_Init 0 */

   /* USER CODE END ADC1_Init 0 */

   ADC_ChannelConfTypeDef sConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
   /* USER CODE BEGIN ADC1_Init 1 */

   /* USER CODE END ADC1_Init 1 */
   /** Common config
   */
   hadc1.Instance = ADC1;
 80003dc:	4b45      	ldr	r3, [pc, #276]	; (80004f4 <MX_ADC1_Init+0x128>)
 80003de:	4a46      	ldr	r2, [pc, #280]	; (80004f8 <MX_ADC1_Init+0x12c>)
 80003e0:	601a      	str	r2, [r3, #0]
   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003e2:	4b44      	ldr	r3, [pc, #272]	; (80004f4 <MX_ADC1_Init+0x128>)
 80003e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003e8:	609a      	str	r2, [r3, #8]
   hadc1.Init.ContinuousConvMode = ENABLE;
 80003ea:	4b42      	ldr	r3, [pc, #264]	; (80004f4 <MX_ADC1_Init+0x128>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	731a      	strb	r2, [r3, #12]
   hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003f0:	4b40      	ldr	r3, [pc, #256]	; (80004f4 <MX_ADC1_Init+0x128>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	751a      	strb	r2, [r3, #20]
   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f6:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <MX_ADC1_Init+0x128>)
 80003f8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003fc:	61da      	str	r2, [r3, #28]
   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003fe:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <MX_ADC1_Init+0x128>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
   hadc1.Init.NbrOfConversion = 7;
 8000404:	4b3b      	ldr	r3, [pc, #236]	; (80004f4 <MX_ADC1_Init+0x128>)
 8000406:	2207      	movs	r2, #7
 8000408:	611a      	str	r2, [r3, #16]
   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800040a:	483a      	ldr	r0, [pc, #232]	; (80004f4 <MX_ADC1_Init+0x128>)
 800040c:	f000 feaa 	bl	8001164 <HAL_ADC_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_ADC1_Init+0x4e>
   {
     Error_Handler();
 8000416:	f7ff feaf 	bl	8000178 <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_0;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_1;
 800041e:	2301      	movs	r3, #1
 8000420:	60bb      	str	r3, [r7, #8]
   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4832      	ldr	r0, [pc, #200]	; (80004f4 <MX_ADC1_Init+0x128>)
 800042c:	f001 fa20 	bl	8001870 <HAL_ADC_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_ADC1_Init+0x6e>
   {
     Error_Handler();
 8000436:	f7ff fe9f 	bl	8000178 <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_1;
 800043a:	2301      	movs	r3, #1
 800043c:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_2;
 800043e:	2302      	movs	r3, #2
 8000440:	60bb      	str	r3, [r7, #8]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4619      	mov	r1, r3
 8000446:	482b      	ldr	r0, [pc, #172]	; (80004f4 <MX_ADC1_Init+0x128>)
 8000448:	f001 fa12 	bl	8001870 <HAL_ADC_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_ADC1_Init+0x8a>
   {
     Error_Handler();
 8000452:	f7ff fe91 	bl	8000178 <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_4;
 8000456:	2304      	movs	r3, #4
 8000458:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_3;
 800045a:	2303      	movs	r3, #3
 800045c:	60bb      	str	r3, [r7, #8]
   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800045e:	2307      	movs	r3, #7
 8000460:	60fb      	str	r3, [r7, #12]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4619      	mov	r1, r3
 8000466:	4823      	ldr	r0, [pc, #140]	; (80004f4 <MX_ADC1_Init+0x128>)
 8000468:	f001 fa02 	bl	8001870 <HAL_ADC_ConfigChannel>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_ADC1_Init+0xaa>
   {
     Error_Handler();
 8000472:	f7ff fe81 	bl	8000178 <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_5;
 8000476:	2305      	movs	r3, #5
 8000478:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_4;
 800047a:	2304      	movs	r3, #4
 800047c:	60bb      	str	r3, [r7, #8]
   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4619      	mov	r1, r3
 8000486:	481b      	ldr	r0, [pc, #108]	; (80004f4 <MX_ADC1_Init+0x128>)
 8000488:	f001 f9f2 	bl	8001870 <HAL_ADC_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_ADC1_Init+0xca>
   {
     Error_Handler();
 8000492:	f7ff fe71 	bl	8000178 <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_6;
 8000496:	2306      	movs	r3, #6
 8000498:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_5;
 800049a:	2305      	movs	r3, #5
 800049c:	60bb      	str	r3, [r7, #8]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4619      	mov	r1, r3
 80004a2:	4814      	ldr	r0, [pc, #80]	; (80004f4 <MX_ADC1_Init+0x128>)
 80004a4:	f001 f9e4 	bl	8001870 <HAL_ADC_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ADC1_Init+0xe6>
   {
     Error_Handler();
 80004ae:	f7ff fe63 	bl	8000178 <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_7;
 80004b2:	2307      	movs	r3, #7
 80004b4:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_6;
 80004b6:	2306      	movs	r3, #6
 80004b8:	60bb      	str	r3, [r7, #8]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ba:	1d3b      	adds	r3, r7, #4
 80004bc:	4619      	mov	r1, r3
 80004be:	480d      	ldr	r0, [pc, #52]	; (80004f4 <MX_ADC1_Init+0x128>)
 80004c0:	f001 f9d6 	bl	8001870 <HAL_ADC_ConfigChannel>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_ADC1_Init+0x102>
   {
     Error_Handler();
 80004ca:	f7ff fe55 	bl	8000178 <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_8;
 80004ce:	2308      	movs	r3, #8
 80004d0:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_7;
 80004d2:	2307      	movs	r3, #7
 80004d4:	60bb      	str	r3, [r7, #8]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4619      	mov	r1, r3
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <MX_ADC1_Init+0x128>)
 80004dc:	f001 f9c8 	bl	8001870 <HAL_ADC_ConfigChannel>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC1_Init+0x11e>
   {
     Error_Handler();
 80004e6:	f7ff fe47 	bl	8000178 <Error_Handler>
   }
   /* USER CODE BEGIN ADC1_Init 2 */

   /* USER CODE END ADC1_Init 2 */

 }
 80004ea:	bf00      	nop
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000140 	.word	0x20000140
 80004f8:	40012400 	.word	0x40012400

080004fc <MX_I2C1_Init>:
   * @brief I2C1 Initialization Function
   * @param None
   * @retval None
   * */
  void MX_I2C1_Init(void)
 {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
   /* USER CODE END I2C1_Init 0 */

   /* USER CODE BEGIN I2C1_Init 1 */

   /* USER CODE END I2C1_Init 1 */
   hi2c1.Instance = I2C1;
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <MX_I2C1_Init+0x50>)
 8000502:	4a13      	ldr	r2, [pc, #76]	; (8000550 <MX_I2C1_Init+0x54>)
 8000504:	601a      	str	r2, [r3, #0]
   hi2c1.Init.ClockSpeed = 100000;
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_I2C1_Init+0x50>)
 8000508:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_I2C1_Init+0x58>)
 800050a:	605a      	str	r2, [r3, #4]
   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800050c:	4b0f      	ldr	r3, [pc, #60]	; (800054c <MX_I2C1_Init+0x50>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
   hi2c1.Init.OwnAddress1 = 0;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_I2C1_Init+0x50>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_I2C1_Init+0x50>)
 800051a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800051e:	611a      	str	r2, [r3, #16]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_I2C1_Init+0x50>)
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
   hi2c1.Init.OwnAddress2 = 0;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_I2C1_Init+0x50>)
 8000528:	2200      	movs	r2, #0
 800052a:	619a      	str	r2, [r3, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <MX_I2C1_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	61da      	str	r2, [r3, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_I2C1_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_I2C1_Init+0x50>)
 800053a:	f001 fe8f 	bl	800225c <HAL_I2C_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_I2C1_Init+0x4c>
   {
     Error_Handler();
 8000544:	f7ff fe18 	bl	8000178 <Error_Handler>
   }
   /* USER CODE BEGIN I2C1_Init 2 */

   /* USER CODE END I2C1_Init 2 */

 }
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000098 	.word	0x20000098
 8000550:	40005400 	.word	0x40005400
 8000554:	000186a0 	.word	0x000186a0

08000558 <MX_I2C2_Init>:
   * @brief I2C2 Initialization Function
   * @param None
   * @retval None
   */
  void MX_I2C2_Init(void)
 {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
   /* USER CODE END I2C2_Init 0 */

   /* USER CODE BEGIN I2C2_Init 1 */

   /* USER CODE END I2C2_Init 1 */
   hi2c2.Instance = I2C2;
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <MX_I2C2_Init+0x50>)
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <MX_I2C2_Init+0x54>)
 8000560:	601a      	str	r2, [r3, #0]
   hi2c2.Init.ClockSpeed = 100000;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_I2C2_Init+0x50>)
 8000564:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <MX_I2C2_Init+0x58>)
 8000566:	605a      	str	r2, [r3, #4]
   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MX_I2C2_Init+0x50>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
   hi2c2.Init.OwnAddress1 = 0;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_I2C2_Init+0x50>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_I2C2_Init+0x50>)
 8000576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800057a:	611a      	str	r2, [r3, #16]
   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_I2C2_Init+0x50>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
   hi2c2.Init.OwnAddress2 = 0;
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_I2C2_Init+0x50>)
 8000584:	2200      	movs	r2, #0
 8000586:	619a      	str	r2, [r3, #24]
   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <MX_I2C2_Init+0x50>)
 800058a:	2200      	movs	r2, #0
 800058c:	61da      	str	r2, [r3, #28]
   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_I2C2_Init+0x50>)
 8000590:	2200      	movs	r2, #0
 8000592:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000594:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_I2C2_Init+0x50>)
 8000596:	f001 fe61 	bl	800225c <HAL_I2C_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C2_Init+0x4c>
   {
     Error_Handler();
 80005a0:	f7ff fdea 	bl	8000178 <Error_Handler>
   }
   /* USER CODE BEGIN I2C2_Init 2 */

   /* USER CODE END I2C2_Init 2 */

 }
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000ec 	.word	0x200000ec
 80005ac:	40005800 	.word	0x40005800
 80005b0:	000186a0 	.word	0x000186a0

080005b4 <MX_USART2_UART_Init>:
   * @param None
   * @retval None
   */

   void MX_USART2_UART_Init(void)
  {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_USART2_UART_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005c4:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_USART2_UART_Init+0x4c>)
 80005ec:	f003 fb4b 	bl	8003c86 <HAL_UART_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x46>
    {
      Error_Handler();
 80005f6:	f7ff fdbf 	bl	8000178 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

  }
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000248 	.word	0x20000248
 8000604:	40004400 	.word	0x40004400

08000608 <MX_RTC_Init>:
    * @param None
    * @retval None
    */

  void MX_RTC_Init(void)
 {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN RTC_Init 1 */

   /* USER CODE END RTC_Init 1 */
   /** Initialize RTC Only
   */
   hrtc.Instance = RTC;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_RTC_Init+0x30>)
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <MX_RTC_Init+0x34>)
 8000610:	601a      	str	r2, [r3, #0]
   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_RTC_Init+0x30>)
 8000614:	f04f 32ff 	mov.w	r2, #4294967295
 8000618:	605a      	str	r2, [r3, #4]
   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_RTC_Init+0x30>)
 800061c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000620:	609a      	str	r2, [r3, #8]
   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_RTC_Init+0x30>)
 8000624:	f002 fcdc 	bl	8002fe0 <HAL_RTC_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_RTC_Init+0x2a>
   {
     Error_Handler();
 800062e:	f7ff fda3 	bl	8000178 <Error_Handler>
   }
   /* USER CODE BEGIN RTC_Init 2 */

   /* USER CODE END RTC_Init 2 */

 }
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200001b4 	.word	0x200001b4
 800063c:	40002800 	.word	0x40002800

08000640 <MX_GPIO_Init>:
   * @brief GPIO Initialization Function
   * @param None
   * @retval None
   */
  void MX_GPIO_Init(void)
 {
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	4b3b      	ldr	r3, [pc, #236]	; (8000744 <MX_GPIO_Init+0x104>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a3a      	ldr	r2, [pc, #232]	; (8000744 <MX_GPIO_Init+0x104>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0x104>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f003 0310 	and.w	r3, r3, #16
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 800066c:	4b35      	ldr	r3, [pc, #212]	; (8000744 <MX_GPIO_Init+0x104>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a34      	ldr	r2, [pc, #208]	; (8000744 <MX_GPIO_Init+0x104>)
 8000672:	f043 0320 	orr.w	r3, r3, #32
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b32      	ldr	r3, [pc, #200]	; (8000744 <MX_GPIO_Init+0x104>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0320 	and.w	r3, r3, #32
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <MX_GPIO_Init+0x104>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a2e      	ldr	r2, [pc, #184]	; (8000744 <MX_GPIO_Init+0x104>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <MX_GPIO_Init+0x104>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_GPIO_Init+0x104>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <MX_GPIO_Init+0x104>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_GPIO_Init+0x104>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin
 80006b4:	2200      	movs	r2, #0
 80006b6:	f24f 3130 	movw	r1, #62256	; 0xf330
 80006ba:	4823      	ldr	r0, [pc, #140]	; (8000748 <MX_GPIO_Init+0x108>)
 80006bc:	f001 fdb6 	bl	800222c <HAL_GPIO_WritePin>
                           |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin, GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(Output_5_GPIO_Port, Output_5_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c6:	4821      	ldr	r0, [pc, #132]	; (800074c <MX_GPIO_Init+0x10c>)
 80006c8:	f001 fdb0 	bl	800222c <HAL_GPIO_WritePin>

   /*Configure GPIO pin : Input_0_Pin */
   GPIO_InitStruct.Pin = Input_0_Pin;
 80006cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d0:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(Input_0_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4619      	mov	r1, r3
 80006e0:	481b      	ldr	r0, [pc, #108]	; (8000750 <MX_GPIO_Init+0x110>)
 80006e2:	f001 fc49 	bl	8001f78 <HAL_GPIO_Init>

   /*Configure GPIO pins : Input_3_Pin Input_4_Pin */
   GPIO_InitStruct.Pin = Input_3_Pin|Input_4_Pin;
 80006e6:	2306      	movs	r3, #6
 80006e8:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <MX_GPIO_Init+0x108>)
 80006fa:	f001 fc3d 	bl	8001f78 <HAL_GPIO_Init>

   /*Configure GPIO pins : Output_9_Pin Output_8_Pin Output_7_Pin Output_6_Pin
                            Output_4_Pin Output_3_Pin Output_2_Pin Output_1_Pin */
   GPIO_InitStruct.Pin = Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin
 80006fe:	f24f 3330 	movw	r3, #62256	; 0xf330
 8000702:	613b      	str	r3, [r7, #16]
                           |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2302      	movs	r3, #2
 800070e:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	4619      	mov	r1, r3
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_GPIO_Init+0x108>)
 8000718:	f001 fc2e 	bl	8001f78 <HAL_GPIO_Init>

   /*Configure GPIO pin : Output_5_Pin */
   GPIO_InitStruct.Pin = Output_5_Pin;
 800071c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000720:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2302      	movs	r3, #2
 800072c:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(Output_5_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_GPIO_Init+0x10c>)
 8000736:	f001 fc1f 	bl	8001f78 <HAL_GPIO_Init>

 }
 800073a:	bf00      	nop
 800073c:	3720      	adds	r7, #32
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000
 8000748:	40010c00 	.word	0x40010c00
 800074c:	40010800 	.word	0x40010800
 8000750:	40011000 	.word	0x40011000

08000754 <MX_DMA_Init>:

  void MX_DMA_Init(void)
  {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_DMA_Init+0x38>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <MX_DMA_Init+0x38>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_DMA_Init+0x38>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	200b      	movs	r0, #11
 8000778:	f001 fb3b 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800077c:	200b      	movs	r0, #11
 800077e:	f001 fb54 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  }
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000

08000790 <map>:
 *      Author: Jan de Brandweerman
 */


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	69b9      	ldr	r1, [r7, #24]
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	1a8a      	subs	r2, r1, r2
 80007aa:	fb02 f203 	mul.w	r2, r2, r3
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	1acb      	subs	r3, r1, r3
 80007b4:	fb92 f2f3 	sdiv	r2, r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	4413      	add	r3, r2
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
	...

080007c8 <PWM_Init>:
#include "main.h"
#include "Math.h"
#include "Initialization.h"


void PWM_Init(void){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

	MX_TIM1_Init();
 80007cc:	f7ff fcd8 	bl	8000180 <MX_TIM1_Init>
    MX_TIM2_Init();
 80007d0:	f7ff fd9a 	bl	8000308 <MX_TIM2_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007d4:	2100      	movs	r1, #0
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <PWM_Init+0x40>)
 80007d8:	f002 fd6c 	bl	80032b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007dc:	2104      	movs	r1, #4
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <PWM_Init+0x40>)
 80007e0:	f002 fd68 	bl	80032b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007e4:	2108      	movs	r1, #8
 80007e6:	4808      	ldr	r0, [pc, #32]	; (8000808 <PWM_Init+0x40>)
 80007e8:	f002 fd64 	bl	80032b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80007ec:	210c      	movs	r1, #12
 80007ee:	4806      	ldr	r0, [pc, #24]	; (8000808 <PWM_Init+0x40>)
 80007f0:	f002 fd60 	bl	80032b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <PWM_Init+0x44>)
 80007f8:	f002 fd5c 	bl	80032b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007fc:	2104      	movs	r1, #4
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <PWM_Init+0x44>)
 8000800:	f002 fd58 	bl	80032b4 <HAL_TIM_PWM_Start>

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200001c8 	.word	0x200001c8
 800080c:	20000208 	.word	0x20000208

08000810 <PWM_Set>:

void PWM_Set(uint8_t Pinnr, uint16_t PWM_value){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af02      	add	r7, sp, #8
 8000816:	4603      	mov	r3, r0
 8000818:	460a      	mov	r2, r1
 800081a:	71fb      	strb	r3, [r7, #7]
 800081c:	4613      	mov	r3, r2
 800081e:	80bb      	strh	r3, [r7, #4]


if (PWM_value > 100){
 8000820:	88bb      	ldrh	r3, [r7, #4]
 8000822:	2b64      	cmp	r3, #100	; 0x64
 8000824:	d901      	bls.n	800082a <PWM_Set+0x1a>
	PWM_value = 100;
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	80bb      	strh	r3, [r7, #4]
} else if (PWM_value < 0){
		PWM_value = 0;
}

PWM_value = map(PWM_value, 0, 100, 0, 65535);
 800082a:	88b8      	ldrh	r0, [r7, #4]
 800082c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	2264      	movs	r2, #100	; 0x64
 8000836:	2100      	movs	r1, #0
 8000838:	f7ff ffaa 	bl	8000790 <map>
 800083c:	4603      	mov	r3, r0
 800083e:	80bb      	strh	r3, [r7, #4]

	if (Pinnr == 1){
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d103      	bne.n	800084e <PWM_Set+0x3e>
		TIM1->CCR1 = PWM_value;
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <PWM_Set+0x90>)
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR1 = PWM_value;
	}else if (Pinnr == 6){
		TIM2->CCR2 = PWM_value;
	}

}
 800084c:	e023      	b.n	8000896 <PWM_Set+0x86>
	}else if (Pinnr == 2){
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b02      	cmp	r3, #2
 8000852:	d103      	bne.n	800085c <PWM_Set+0x4c>
		TIM1->CCR2 = PWM_value;
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <PWM_Set+0x90>)
 8000856:	88bb      	ldrh	r3, [r7, #4]
 8000858:	6393      	str	r3, [r2, #56]	; 0x38
}
 800085a:	e01c      	b.n	8000896 <PWM_Set+0x86>
	}else if (Pinnr == 3){
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d103      	bne.n	800086a <PWM_Set+0x5a>
		TIM1->CCR3 = PWM_value;
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <PWM_Set+0x90>)
 8000864:	88bb      	ldrh	r3, [r7, #4]
 8000866:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000868:	e015      	b.n	8000896 <PWM_Set+0x86>
	}else if (Pinnr == 4){
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	2b04      	cmp	r3, #4
 800086e:	d103      	bne.n	8000878 <PWM_Set+0x68>
		TIM1->CCR4 = PWM_value;
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <PWM_Set+0x90>)
 8000872:	88bb      	ldrh	r3, [r7, #4]
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000876:	e00e      	b.n	8000896 <PWM_Set+0x86>
	}else if (Pinnr == 5){
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b05      	cmp	r3, #5
 800087c:	d104      	bne.n	8000888 <PWM_Set+0x78>
		TIM2->CCR1 = PWM_value;
 800087e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000882:	88bb      	ldrh	r3, [r7, #4]
 8000884:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000886:	e006      	b.n	8000896 <PWM_Set+0x86>
	}else if (Pinnr == 6){
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2b06      	cmp	r3, #6
 800088c:	d103      	bne.n	8000896 <PWM_Set+0x86>
		TIM2->CCR2 = PWM_value;
 800088e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40012c00 	.word	0x40012c00

080008a4 <Debugprintvar>:
	 sprintf(data2, "%s\r\n", data);
	HAL_UART_Transmit(&huart2, (uint8_t*)data2, strlen(data2) ,HAL_MAX_DELAY);

}
void Debugprintvar(char data[])
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	char data2[10];

		 sprintf(data2, "%hu\r\n", data);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	490b      	ldr	r1, [pc, #44]	; (80008e0 <Debugprintvar+0x3c>)
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fc23 	bl	8004100 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data2, strlen(data2) ,HAL_MAX_DELAY);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fc44 	bl	800014c <strlen>
 80008c4:	4603      	mov	r3, r0
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	f107 010c 	add.w	r1, r7, #12
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <Debugprintvar+0x40>)
 80008d2:	f003 fa25 	bl	8003d20 <HAL_UART_Transmit>
}
 80008d6:	bf00      	nop
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	08004944 	.word	0x08004944
 80008e4:	20000248 	.word	0x20000248

080008e8 <Application>:
#include "stm32f1xx_hal_uart.h"



void Application(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0

	 uint16_t raw;
	  char msg[10];

	GPIO_Write(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f4:	4829      	ldr	r0, [pc, #164]	; (800099c <Application+0xb4>)
 80008f6:	f000 f859 	bl	80009ac <GPIO_Write>

	for (uint8_t i = 0; i<100; i++){
 80008fa:	2300      	movs	r3, #0
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e00b      	b.n	8000918 <Application+0x30>
		PWM_Set(PWM_1, i);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	b29b      	uxth	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff ff82 	bl	8000810 <PWM_Set>
		HAL_Delay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fc07 	bl	8001120 <HAL_Delay>
	for (uint8_t i = 0; i<100; i++){
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	3301      	adds	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	2b63      	cmp	r3, #99	; 0x63
 800091c:	d9f0      	bls.n	8000900 <Application+0x18>
	}

	GPIO_Write(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000924:	481d      	ldr	r0, [pc, #116]	; (800099c <Application+0xb4>)
 8000926:	f000 f841 	bl	80009ac <GPIO_Write>

	for (uint8_t i = 100; i>0; i--){
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	73bb      	strb	r3, [r7, #14]
 800092e:	e00b      	b.n	8000948 <Application+0x60>
		PWM_Set(PWM_1, i);
 8000930:	7bbb      	ldrb	r3, [r7, #14]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4619      	mov	r1, r3
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff ff6a 	bl	8000810 <PWM_Set>
		HAL_Delay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fbef 	bl	8001120 <HAL_Delay>
	for (uint8_t i = 100; i>0; i--){
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	3b01      	subs	r3, #1
 8000946:	73bb      	strb	r3, [r7, #14]
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d1f0      	bne.n	8000930 <Application+0x48>
	}


	//uint8_t Test[] = "Hello World laalaa !!!\r\n";
		Debugprintvar(233);
 800094e:	20e9      	movs	r0, #233	; 0xe9
 8000950:	f7ff ffa8 	bl	80008a4 <Debugprintvar>

	//HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);
	// HAL_Delay(1000);

	HAL_ADC_Start(&hadc1);
 8000954:	4812      	ldr	r0, [pc, #72]	; (80009a0 <Application+0xb8>)
 8000956:	f000 fcdd 	bl	8001314 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800095a:	f04f 31ff 	mov.w	r1, #4294967295
 800095e:	4810      	ldr	r0, [pc, #64]	; (80009a0 <Application+0xb8>)
 8000960:	f000 fd86 	bl	8001470 <HAL_ADC_PollForConversion>

	    raw = HAL_ADC_GetValue(&hadc1);
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <Application+0xb8>)
 8000966:	f000 ff5b 	bl	8001820 <HAL_ADC_GetValue>
 800096a:	4603      	mov	r3, r0
 800096c:	81bb      	strh	r3, [r7, #12]

	    sprintf(msg, "%hu\r\n", raw);
 800096e:	89ba      	ldrh	r2, [r7, #12]
 8000970:	463b      	mov	r3, r7
 8000972:	490c      	ldr	r1, [pc, #48]	; (80009a4 <Application+0xbc>)
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fbc3 	bl	8004100 <siprintf>
	       HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800097a:	463b      	mov	r3, r7
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fbe5 	bl	800014c <strlen>
 8000982:	4603      	mov	r3, r0
 8000984:	b29a      	uxth	r2, r3
 8000986:	4639      	mov	r1, r7
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <Application+0xc0>)
 800098e:	f003 f9c7 	bl	8003d20 <HAL_UART_Transmit>

}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40010c00 	.word	0x40010c00
 80009a0:	20000140 	.word	0x20000140
 80009a4:	0800494c 	.word	0x0800494c
 80009a8:	20000248 	.word	0x20000248

080009ac <GPIO_Write>:
// GPIOx port 	with x as A B C D...
// GPIOx pin 	0..15
// PinSate   	GPIO_PIN_RESET or GPIO_PIN_SET

void GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	807b      	strh	r3, [r7, #2]
 80009b8:	4613      	mov	r3, r2
 80009ba:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80009bc:	787a      	ldrb	r2, [r7, #1]
 80009be:	887b      	ldrh	r3, [r7, #2]
 80009c0:	4619      	mov	r1, r3
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f001 fc32 	bl	800222c <HAL_GPIO_WritePin>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <main>:
#include "Adc.h"

void SystemClock_Config(void);


int main(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	HAL_Init();
 80009d4:	f000 fb42 	bl	800105c <HAL_Init>
	SystemClock_Config();
 80009d8:	f000 f815 	bl	8000a06 <SystemClock_Config>
	MX_GPIO_Init();
 80009dc:	f7ff fe30 	bl	8000640 <MX_GPIO_Init>
	MX_DMA_Init();
 80009e0:	f7ff feb8 	bl	8000754 <MX_DMA_Init>
	MX_ADC1_Init();
 80009e4:	f7ff fcf2 	bl	80003cc <MX_ADC1_Init>
	MX_I2C1_Init();
 80009e8:	f7ff fd88 	bl	80004fc <MX_I2C1_Init>
	MX_I2C2_Init();
 80009ec:	f7ff fdb4 	bl	8000558 <MX_I2C2_Init>
	MX_RTC_Init();
 80009f0:	f7ff fe0a 	bl	8000608 <MX_RTC_Init>
	MX_USART2_UART_Init();
 80009f4:	f7ff fdde 	bl	80005b4 <MX_USART2_UART_Init>
	PWM_Init();
 80009f8:	f7ff fee6 	bl	80007c8 <PWM_Init>
	ADC_Init();
 80009fc:	f7ff fbae 	bl	800015c <ADC_Init>



	while (1) {

		Application();
 8000a00:	f7ff ff72 	bl	80008e8 <Application>
	while (1) {
 8000a04:	e7fc      	b.n	8000a00 <main+0x30>

08000a06 <SystemClock_Config>:

	}

}

void SystemClock_Config(void) {
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b094      	sub	sp, #80	; 0x50
 8000a0a:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a10:	2228      	movs	r2, #40	; 0x28
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f003 fb6b 	bl	80040f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000a36:	2309      	movs	r3, #9
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a44:	2301      	movs	r3, #1
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fd2f 	bl	80024c4 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x6a>
		Error_Handler();
 8000a6c:	f7ff fb84 	bl	8000178 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a80:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 ff99 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x96>
		Error_Handler();
 8000a98:	f7ff fb6e 	bl	8000178 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa4:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aaa:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 f924 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xb8>
		Error_Handler();
 8000aba:	f7ff fb5d 	bl	8000178 <Error_Handler>
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	; 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_MspInit+0x5c>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <HAL_MspInit+0x5c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6193      	str	r3, [r2, #24]
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_MspInit+0x5c>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_MspInit+0x5c>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_MspInit+0x5c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	61d3      	str	r3, [r2, #28]
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_MspInit+0x5c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_MspInit+0x60>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_MspInit+0x60>)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010000 	.word	0x40010000

08000b2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_ADC_MspInit+0x98>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d137      	bne.n	8000bbc <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <HAL_ADC_MspInit+0x9c>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0308 	and.w	r3, r3, #8
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8000b94:	23f3      	movs	r3, #243	; 0xf3
 8000b96:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480a      	ldr	r0, [pc, #40]	; (8000bcc <HAL_ADC_MspInit+0xa0>)
 8000ba4:	f001 f9e8 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bac:	2303      	movs	r3, #3
 8000bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <HAL_ADC_MspInit+0xa4>)
 8000bb8:	f001 f9de 	bl	8001f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40012400 	.word	0x40012400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <HAL_I2C_MspInit+0xc8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d124      	bne.n	8000c3e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0c:	23c0      	movs	r3, #192	; 0xc0
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c10:	2312      	movs	r3, #18
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4821      	ldr	r0, [pc, #132]	; (8000ca4 <HAL_I2C_MspInit+0xd0>)
 8000c20:	f001 f9aa 	bl	8001f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c26:	69db      	ldr	r3, [r3, #28]
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2e:	61d3      	str	r3, [r2, #28]
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c32:	69db      	ldr	r3, [r3, #28]
 8000c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c3c:	e029      	b.n	8000c92 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0xd4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d124      	bne.n	8000c92 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c4e:	f043 0308 	orr.w	r3, r3, #8
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0308 	and.w	r3, r3, #8
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c66:	2312      	movs	r3, #18
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0318 	add.w	r3, r7, #24
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_I2C_MspInit+0xd0>)
 8000c76:	f001 f97f 	bl	8001f78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_I2C_MspInit+0xcc>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40005800 	.word	0x40005800

08000cac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_RTC_MspInit+0x3c>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d110      	bne.n	8000ce0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000cbe:	f001 fbf5 	bl	80024ac <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_RTC_MspInit+0x40>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <HAL_RTC_MspInit+0x40>)
 8000cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ccc:	61d3      	str	r3, [r2, #28]
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_RTC_MspInit+0x40>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_RTC_MspInit+0x44>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40002800 	.word	0x40002800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	4242043c 	.word	0x4242043c

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <HAL_TIM_Base_MspInit+0x34>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10b      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_TIM_Base_MspInit+0x38>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_TIM_Base_MspInit+0x38>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_TIM_Base_MspInit+0x38>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d40:	d10b      	bne.n	8000d5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_TIM_PWM_MspInit+0x34>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_TIM_PWM_MspInit+0x34>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	61d3      	str	r3, [r2, #28]
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_TIM_PWM_MspInit+0x34>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <HAL_TIM_MspPostInit+0xec>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d119      	bne.n	8000dbc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b33      	ldr	r3, [pc, #204]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000da0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2302      	movs	r3, #2
 8000dac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4829      	ldr	r0, [pc, #164]	; (8000e5c <HAL_TIM_MspPostInit+0xf4>)
 8000db6:	f001 f8df 	bl	8001f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dba:	e047      	b.n	8000e4c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d142      	bne.n	8000e4c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6193      	str	r3, [r2, #24]
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_TIM_MspPostInit+0xf0>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2302      	movs	r3, #2
 8000e02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4814      	ldr	r0, [pc, #80]	; (8000e5c <HAL_TIM_MspPostInit+0xf4>)
 8000e0c:	f001 f8b4 	bl	8001f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e10:	2308      	movs	r3, #8
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000e24:	f001 f8a8 	bl	8001f78 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_TIM_MspPostInit+0xfc>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_TIM_MspPostInit+0xfc>)
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	6053      	str	r3, [r2, #4]
}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40012c00 	.word	0x40012c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40010000 	.word	0x40010000

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0x88>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d12f      	bne.n	8000ee8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e92:	61d3      	str	r3, [r2, #28]
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_UART_MspInit+0x8c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480b      	ldr	r0, [pc, #44]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000ecc:	f001 f854 	bl	8001f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_UART_MspInit+0x90>)
 8000ee4:	f001 f848 	bl	8001f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40004400 	.word	0x40004400
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40010800 	.word	0x40010800

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <HardFault_Handler+0x4>

08000f0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <UsageFault_Handler+0x4>

08000f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 f8ce 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x50>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x16>
		heap_end = &end;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <_sbrk+0x50>)
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <_sbrk+0x54>)
 8000f64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <_sbrk+0x50>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <_sbrk+0x50>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	466a      	mov	r2, sp
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d907      	bls.n	8000f8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f7a:	f003 f88f 	bl	800409c <__errno>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	230c      	movs	r3, #12
 8000f82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	e006      	b.n	8000f98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <_sbrk+0x50>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <_sbrk+0x50>)
 8000f94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000008c 	.word	0x2000008c
 8000fa4:	200002b0 	.word	0x200002b0

08000fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <SystemInit+0x5c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <SystemInit+0x5c>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <SystemInit+0x5c>)
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4911      	ldr	r1, [pc, #68]	; (8001004 <SystemInit+0x5c>)
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <SystemInit+0x60>)
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <SystemInit+0x5c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <SystemInit+0x5c>)
 8000fca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <SystemInit+0x5c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SystemInit+0x5c>)
 8000fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fde:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SystemInit+0x5c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SystemInit+0x5c>)
 8000fe6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000fea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SystemInit+0x5c>)
 8000fee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ff2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <SystemInit+0x64>)
 8000ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffa:	609a      	str	r2, [r3, #8]
#endif 
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000
 8001008:	f8ff0000 	.word	0xf8ff0000
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001010:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001012:	e003      	b.n	800101c <LoopCopyDataInit>

08001014 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001016:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001018:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800101a:	3104      	adds	r1, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800101c:	480a      	ldr	r0, [pc, #40]	; (8001048 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001020:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001024:	d3f6      	bcc.n	8001014 <CopyDataInit>
  ldr r2, =_sbss
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001028:	e002      	b.n	8001030 <LoopFillZerobss>

0800102a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800102c:	f842 3b04 	str.w	r3, [r2], #4

08001030 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001034:	d3f9      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001036:	f7ff ffb7 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f003 f835 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800103e:	f7ff fcc7 	bl	80009d0 <main>
  bx lr
 8001042:	4770      	bx	lr
  ldr r3, =_sidata
 8001044:	080049d0 	.word	0x080049d0
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800104c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001050:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001054:	200002ac 	.word	0x200002ac

08001058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x28>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x28>)
 8001066:	f043 0310 	orr.w	r3, r3, #16
 800106a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 feb5 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f808 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fd26 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_InitTick+0x54>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x58>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fecd 	bl	8001e46 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 fe95 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_InitTick+0x5c>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004

080010e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_IncTick+0x1c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x20>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a03      	ldr	r2, [pc, #12]	; (8001108 <HAL_IncTick+0x20>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	20000008 	.word	0x20000008
 8001108:	200002a4 	.word	0x200002a4

0800110c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b02      	ldr	r3, [pc, #8]	; (800111c <HAL_GetTick+0x10>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	200002a4 	.word	0x200002a4

08001120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff fff0 	bl	800110c <HAL_GetTick>
 800112c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001138:	d005      	beq.n	8001146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_Delay+0x40>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001146:	bf00      	nop
 8001148:	f7ff ffe0 	bl	800110c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	429a      	cmp	r2, r3
 8001156:	d8f7      	bhi.n	8001148 <HAL_Delay+0x28>
  {
  }
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0be      	b.n	8001304 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fcc2 	bl	8000b2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fcab 	bl	8001b04 <ADC_ConversionStop_Disable>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 8099 	bne.w	80012f2 <HAL_ADC_Init+0x18e>
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 8095 	bne.w	80012f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011d0:	f023 0302 	bic.w	r3, r3, #2
 80011d4:	f043 0202 	orr.w	r2, r3, #2
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7b1b      	ldrb	r3, [r3, #12]
 80011ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fc:	d003      	beq.n	8001206 <HAL_ADC_Init+0xa2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d102      	bne.n	800120c <HAL_ADC_Init+0xa8>
 8001206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120a:	e000      	b.n	800120e <HAL_ADC_Init+0xaa>
 800120c:	2300      	movs	r3, #0
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7d1b      	ldrb	r3, [r3, #20]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d119      	bne.n	8001250 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7b1b      	ldrb	r3, [r3, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d109      	bne.n	8001238 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	3b01      	subs	r3, #1
 800122a:	035a      	lsls	r2, r3, #13
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4313      	orrs	r3, r2
 8001230:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	e00b      	b.n	8001250 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123c:	f043 0220 	orr.w	r2, r3, #32
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	430a      	orrs	r2, r1
 8001262:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_ADC_Init+0x1a8>)
 800126c:	4013      	ands	r3, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	430b      	orrs	r3, r1
 8001276:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001280:	d003      	beq.n	800128a <HAL_ADC_Init+0x126>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d104      	bne.n	8001294 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	3b01      	subs	r3, #1
 8001290:	051b      	lsls	r3, r3, #20
 8001292:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_ADC_Init+0x1ac>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d10b      	bne.n	80012d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	f023 0303 	bic.w	r3, r3, #3
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012ce:	e018      	b.n	8001302 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f023 0312 	bic.w	r3, r3, #18
 80012d8:	f043 0210 	orr.w	r2, r3, #16
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012f0:	e007      	b.n	8001302 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001302:	7dfb      	ldrb	r3, [r7, #23]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	ffe1f7fd 	.word	0xffe1f7fd
 8001310:	ff1f0efe 	.word	0xff1f0efe

08001314 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_ADC_Start+0x1a>
 800132a:	2302      	movs	r3, #2
 800132c:	e098      	b.n	8001460 <HAL_ADC_Start+0x14c>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fb92 	bl	8001a60 <ADC_Enable>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 8087 	bne.w	8001456 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a41      	ldr	r2, [pc, #260]	; (8001468 <HAL_ADC_Start+0x154>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d105      	bne.n	8001372 <HAL_ADC_Start+0x5e>
 8001366:	4b41      	ldr	r3, [pc, #260]	; (800146c <HAL_ADC_Start+0x158>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d115      	bne.n	800139e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001388:	2b00      	cmp	r3, #0
 800138a:	d026      	beq.n	80013da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001390:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001394:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800139c:	e01d      	b.n	80013da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_ADC_Start+0x158>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d004      	beq.n	80013be <HAL_ADC_Start+0xaa>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a2b      	ldr	r2, [pc, #172]	; (8001468 <HAL_ADC_Start+0x154>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10d      	bne.n	80013da <HAL_ADC_Start+0xc6>
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_ADC_Start+0x158>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d006      	beq.n	80013f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	f023 0206 	bic.w	r2, r3, #6
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80013f2:	e002      	b.n	80013fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f06f 0202 	mvn.w	r2, #2
 800140a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001416:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800141a:	d113      	bne.n	8001444 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001420:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_ADC_Start+0x154>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d105      	bne.n	8001432 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_ADC_Start+0x158>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800142e:	2b00      	cmp	r3, #0
 8001430:	d108      	bne.n	8001444 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	e00c      	b.n	800145e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	e003      	b.n	800145e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40012800 	.word	0x40012800
 800146c:	40012400 	.word	0x40012400

08001470 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001486:	f7ff fe41 	bl	800110c <HAL_GetTick>
 800148a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f043 0220 	orr.w	r2, r3, #32
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0c8      	b.n	8001644 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d12a      	bne.n	8001516 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d123      	bne.n	8001516 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014ce:	e01a      	b.n	8001506 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d6:	d016      	beq.n	8001506 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_ADC_PollForConversion+0x7e>
 80014de:	f7ff fe15 	bl	800110c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d20b      	bcs.n	8001506 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	f043 0204 	orr.w	r2, r3, #4
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e09e      	b.n	8001644 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0dd      	beq.n	80014d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001514:	e06c      	b.n	80015f0 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001516:	4b4d      	ldr	r3, [pc, #308]	; (800164c <HAL_ADC_PollForConversion+0x1dc>)
 8001518:	681c      	ldr	r4, [r3, #0]
 800151a:	2002      	movs	r0, #2
 800151c:	f001 fca4 	bl	8002e68 <HAL_RCCEx_GetPeriphCLKFreq>
 8001520:	4603      	mov	r3, r0
 8001522:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6919      	ldr	r1, [r3, #16]
 800152c:	4b48      	ldr	r3, [pc, #288]	; (8001650 <HAL_ADC_PollForConversion+0x1e0>)
 800152e:	400b      	ands	r3, r1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d118      	bne.n	8001566 <HAL_ADC_PollForConversion+0xf6>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68d9      	ldr	r1, [r3, #12]
 800153a:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_ADC_PollForConversion+0x1e4>)
 800153c:	400b      	ands	r3, r1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d111      	bne.n	8001566 <HAL_ADC_PollForConversion+0xf6>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6919      	ldr	r1, [r3, #16]
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_ADC_PollForConversion+0x1e8>)
 800154a:	400b      	ands	r3, r1
 800154c:	2b00      	cmp	r3, #0
 800154e:	d108      	bne.n	8001562 <HAL_ADC_PollForConversion+0xf2>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68d9      	ldr	r1, [r3, #12]
 8001556:	4b41      	ldr	r3, [pc, #260]	; (800165c <HAL_ADC_PollForConversion+0x1ec>)
 8001558:	400b      	ands	r3, r1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ADC_PollForConversion+0xf2>
 800155e:	2314      	movs	r3, #20
 8001560:	e020      	b.n	80015a4 <HAL_ADC_PollForConversion+0x134>
 8001562:	2329      	movs	r3, #41	; 0x29
 8001564:	e01e      	b.n	80015a4 <HAL_ADC_PollForConversion+0x134>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6919      	ldr	r1, [r3, #16]
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_ADC_PollForConversion+0x1e8>)
 800156e:	400b      	ands	r3, r1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d106      	bne.n	8001582 <HAL_ADC_PollForConversion+0x112>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68d9      	ldr	r1, [r3, #12]
 800157a:	4b38      	ldr	r3, [pc, #224]	; (800165c <HAL_ADC_PollForConversion+0x1ec>)
 800157c:	400b      	ands	r3, r1
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_ADC_PollForConversion+0x12e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6919      	ldr	r1, [r3, #16]
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <HAL_ADC_PollForConversion+0x1f0>)
 800158a:	400b      	ands	r3, r1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d108      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x132>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68d9      	ldr	r1, [r3, #12]
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <HAL_ADC_PollForConversion+0x1f0>)
 8001598:	400b      	ands	r3, r1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ADC_PollForConversion+0x132>
 800159e:	2354      	movs	r3, #84	; 0x54
 80015a0:	e000      	b.n	80015a4 <HAL_ADC_PollForConversion+0x134>
 80015a2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015aa:	e01d      	b.n	80015e8 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b2:	d016      	beq.n	80015e2 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_ADC_PollForConversion+0x15a>
 80015ba:	f7ff fda7 	bl	800110c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d20b      	bcs.n	80015e2 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f043 0204 	orr.w	r2, r3, #4
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e030      	b.n	8001644 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8dd      	bhi.n	80015ac <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f06f 0212 	mvn.w	r2, #18
 80015f8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001610:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001614:	d115      	bne.n	8001642 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800161a:	2b00      	cmp	r3, #0
 800161c:	d111      	bne.n	8001642 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d105      	bne.n	8001642 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f043 0201 	orr.w	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	20000000 	.word	0x20000000
 8001650:	24924924 	.word	0x24924924
 8001654:	00924924 	.word	0x00924924
 8001658:	12492492 	.word	0x12492492
 800165c:	00492492 	.word	0x00492492
 8001660:	00249249 	.word	0x00249249

08001664 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a64      	ldr	r2, [pc, #400]	; (800180c <HAL_ADC_Start_DMA+0x1a8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d004      	beq.n	8001688 <HAL_ADC_Start_DMA+0x24>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a63      	ldr	r2, [pc, #396]	; (8001810 <HAL_ADC_Start_DMA+0x1ac>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d106      	bne.n	8001696 <HAL_ADC_Start_DMA+0x32>
 8001688:	4b60      	ldr	r3, [pc, #384]	; (800180c <HAL_ADC_Start_DMA+0x1a8>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f040 80b3 	bne.w	80017fc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ADC_Start_DMA+0x40>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e0ae      	b.n	8001802 <HAL_ADC_Start_DMA+0x19e>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f9d7 	bl	8001a60 <ADC_Enable>
 80016b2:	4603      	mov	r3, r0
 80016b4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f040 809a 	bne.w	80017f2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_ADC_Start_DMA+0x1ac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d105      	bne.n	80016e8 <HAL_ADC_Start_DMA+0x84>
 80016dc:	4b4b      	ldr	r3, [pc, #300]	; (800180c <HAL_ADC_Start_DMA+0x1a8>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d115      	bne.n	8001714 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d026      	beq.n	8001750 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800170a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001712:	e01d      	b.n	8001750 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a39      	ldr	r2, [pc, #228]	; (800180c <HAL_ADC_Start_DMA+0x1a8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d004      	beq.n	8001734 <HAL_ADC_Start_DMA+0xd0>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a38      	ldr	r2, [pc, #224]	; (8001810 <HAL_ADC_Start_DMA+0x1ac>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d10d      	bne.n	8001750 <HAL_ADC_Start_DMA+0xec>
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_ADC_Start_DMA+0x1a8>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001748:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	f023 0206 	bic.w	r2, r3, #6
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c
 8001768:	e002      	b.n	8001770 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <HAL_ADC_Start_DMA+0x1b0>)
 800177e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_ADC_Start_DMA+0x1b4>)
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	4a23      	ldr	r2, [pc, #140]	; (800181c <HAL_ADC_Start_DMA+0x1b8>)
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f06f 0202 	mvn.w	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a18      	ldr	r0, [r3, #32]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	334c      	adds	r3, #76	; 0x4c
 80017b4:	4619      	mov	r1, r3
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f000 fb50 	bl	8001e5e <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017cc:	d108      	bne.n	80017e0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80017dc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017de:	e00f      	b.n	8001800 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80017ee:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80017f0:	e006      	b.n	8001800 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017fa:	e001      	b.n	8001800 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001800:	7dfb      	ldrb	r3, [r7, #23]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40012400 	.word	0x40012400
 8001810:	40012800 	.word	0x40012800
 8001814:	08001b79 	.word	0x08001b79
 8001818:	08001bf5 	.word	0x08001bf5
 800181c:	08001c11 	.word	0x08001c11

08001820 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
	...

08001870 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x20>
 800188c:	2302      	movs	r3, #2
 800188e:	e0dc      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x1da>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b06      	cmp	r3, #6
 800189e:	d81c      	bhi.n	80018da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b05      	subs	r3, #5
 80018b2:	221f      	movs	r2, #31
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	4019      	ands	r1, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b05      	subs	r3, #5
 80018cc:	fa00 f203 	lsl.w	r2, r0, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
 80018d8:	e03c      	b.n	8001954 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d81c      	bhi.n	800191c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3b23      	subs	r3, #35	; 0x23
 80018f4:	221f      	movs	r2, #31
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4019      	ands	r1, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b23      	subs	r3, #35	; 0x23
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
 800191a:	e01b      	b.n	8001954 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	3b41      	subs	r3, #65	; 0x41
 800192e:	221f      	movs	r2, #31
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	4019      	ands	r1, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b41      	subs	r3, #65	; 0x41
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d91c      	bls.n	8001996 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68d9      	ldr	r1, [r3, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	3b1e      	subs	r3, #30
 800196e:	2207      	movs	r2, #7
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	4019      	ands	r1, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6898      	ldr	r0, [r3, #8]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	3b1e      	subs	r3, #30
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	e019      	b.n	80019ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6919      	ldr	r1, [r3, #16]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	2207      	movs	r2, #7
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6898      	ldr	r0, [r3, #8]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	fa00 f203 	lsl.w	r2, r0, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d003      	beq.n	80019da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019d6:	2b11      	cmp	r3, #17
 80019d8:	d132      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_ADC_ConfigChannel+0x1e4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d125      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d126      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a00:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d11a      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a13      	ldr	r2, [pc, #76]	; (8001a5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9a      	lsrs	r2, r3, #18
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x1b2>
 8001a2e:	e007      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40012400 	.word	0x40012400
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	431bde83 	.word	0x431bde83

08001a60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d039      	beq.n	8001af2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f042 0201 	orr.w	r2, r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <ADC_Enable+0x9c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <ADC_Enable+0xa0>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a9c:	e002      	b.n	8001aa4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f9      	bne.n	8001a9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aaa:	f7ff fb2f 	bl	800110c <HAL_GetTick>
 8001aae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ab0:	e018      	b.n	8001ae4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ab2:	f7ff fb2b 	bl	800110c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d911      	bls.n	8001ae4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f043 0210 	orr.w	r2, r3, #16
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e007      	b.n	8001af4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d1df      	bne.n	8001ab2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	431bde83 	.word	0x431bde83

08001b04 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d127      	bne.n	8001b6e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b2e:	f7ff faed 	bl	800110c <HAL_GetTick>
 8001b32:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b34:	e014      	b.n	8001b60 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b36:	f7ff fae9 	bl	800110c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d90d      	bls.n	8001b60 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e007      	b.n	8001b70 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d0e3      	beq.n	8001b36 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d127      	bne.n	8001be2 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ba8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bac:	d115      	bne.n	8001bda <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d111      	bne.n	8001bda <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d105      	bne.n	8001bda <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7ff fe2c 	bl	8001838 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001be0:	e004      	b.n	8001bec <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	4798      	blx	r3
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7ff fe21 	bl	800184a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f043 0204 	orr.w	r2, r3, #4
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fe10 	bl	800185c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <__NVIC_EnableIRQ+0x34>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff90 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff2d 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff42 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff90 	bl	8001d34 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5f 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff35 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_DMA_Start_IT+0x20>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e04a      	b.n	8001f14 <HAL_DMA_Start_IT+0xb6>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d13a      	bne.n	8001f06 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f831 	bl	8001f1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 020e 	orr.w	r2, r2, #14
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e00f      	b.n	8001ef4 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 020a 	orr.w	r2, r2, #10
 8001ef2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e005      	b.n	8001f12 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d108      	bne.n	8001f5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f5a:	e007      	b.n	8001f6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	60da      	str	r2, [r3, #12]
}
 8001f6c:	bf00      	nop
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b08b      	sub	sp, #44	; 0x2c
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8a:	e127      	b.n	80021dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	f040 8116 	bne.w	80021d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b12      	cmp	r3, #18
 8001fb0:	d034      	beq.n	800201c <HAL_GPIO_Init+0xa4>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d80d      	bhi.n	8001fd2 <HAL_GPIO_Init+0x5a>
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d02b      	beq.n	8002012 <HAL_GPIO_Init+0x9a>
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_GPIO_Init+0x50>
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d031      	beq.n	8002026 <HAL_GPIO_Init+0xae>
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d01c      	beq.n	8002000 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fc6:	e048      	b.n	800205a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d043      	beq.n	8002054 <HAL_GPIO_Init+0xdc>
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d01b      	beq.n	8002008 <HAL_GPIO_Init+0x90>
          break;
 8001fd0:	e043      	b.n	800205a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fd2:	4a89      	ldr	r2, [pc, #548]	; (80021f8 <HAL_GPIO_Init+0x280>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d026      	beq.n	8002026 <HAL_GPIO_Init+0xae>
 8001fd8:	4a87      	ldr	r2, [pc, #540]	; (80021f8 <HAL_GPIO_Init+0x280>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d806      	bhi.n	8001fec <HAL_GPIO_Init+0x74>
 8001fde:	4a87      	ldr	r2, [pc, #540]	; (80021fc <HAL_GPIO_Init+0x284>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d020      	beq.n	8002026 <HAL_GPIO_Init+0xae>
 8001fe4:	4a86      	ldr	r2, [pc, #536]	; (8002200 <HAL_GPIO_Init+0x288>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d01d      	beq.n	8002026 <HAL_GPIO_Init+0xae>
          break;
 8001fea:	e036      	b.n	800205a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fec:	4a85      	ldr	r2, [pc, #532]	; (8002204 <HAL_GPIO_Init+0x28c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d019      	beq.n	8002026 <HAL_GPIO_Init+0xae>
 8001ff2:	4a85      	ldr	r2, [pc, #532]	; (8002208 <HAL_GPIO_Init+0x290>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d016      	beq.n	8002026 <HAL_GPIO_Init+0xae>
 8001ff8:	4a84      	ldr	r2, [pc, #528]	; (800220c <HAL_GPIO_Init+0x294>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <HAL_GPIO_Init+0xae>
          break;
 8001ffe:	e02c      	b.n	800205a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	623b      	str	r3, [r7, #32]
          break;
 8002006:	e028      	b.n	800205a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	3304      	adds	r3, #4
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e023      	b.n	800205a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	3308      	adds	r3, #8
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e01e      	b.n	800205a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	330c      	adds	r3, #12
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e019      	b.n	800205a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800202e:	2304      	movs	r3, #4
 8002030:	623b      	str	r3, [r7, #32]
          break;
 8002032:	e012      	b.n	800205a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800203c:	2308      	movs	r3, #8
 800203e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	611a      	str	r2, [r3, #16]
          break;
 8002046:	e008      	b.n	800205a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002048:	2308      	movs	r3, #8
 800204a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	615a      	str	r2, [r3, #20]
          break;
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
          break;
 8002058:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2bff      	cmp	r3, #255	; 0xff
 800205e:	d801      	bhi.n	8002064 <HAL_GPIO_Init+0xec>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	e001      	b.n	8002068 <HAL_GPIO_Init+0xf0>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2bff      	cmp	r3, #255	; 0xff
 800206e:	d802      	bhi.n	8002076 <HAL_GPIO_Init+0xfe>
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x104>
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3b08      	subs	r3, #8
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	210f      	movs	r1, #15
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	401a      	ands	r2, r3
 800208e:	6a39      	ldr	r1, [r7, #32]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8096 	beq.w	80021d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <HAL_GPIO_Init+0x298>)
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	4a58      	ldr	r2, [pc, #352]	; (8002210 <HAL_GPIO_Init+0x298>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6193      	str	r3, [r2, #24]
 80020b6:	4b56      	ldr	r3, [pc, #344]	; (8002210 <HAL_GPIO_Init+0x298>)
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020c2:	4a54      	ldr	r2, [pc, #336]	; (8002214 <HAL_GPIO_Init+0x29c>)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <HAL_GPIO_Init+0x2a0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x19e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4a      	ldr	r2, [pc, #296]	; (800221c <HAL_GPIO_Init+0x2a4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x19a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a49      	ldr	r2, [pc, #292]	; (8002220 <HAL_GPIO_Init+0x2a8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x196>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a48      	ldr	r2, [pc, #288]	; (8002224 <HAL_GPIO_Init+0x2ac>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x192>
 8002106:	2303      	movs	r3, #3
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x1a0>
 800210a:	2304      	movs	r3, #4
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x1a0>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x1a0>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x1a0>
 8002116:	2300      	movs	r3, #0
 8002118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002128:	493a      	ldr	r1, [pc, #232]	; (8002214 <HAL_GPIO_Init+0x29c>)
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002142:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4938      	ldr	r1, [pc, #224]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
 800214e:	e006      	b.n	800215e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	43db      	mvns	r3, r3
 8002158:	4933      	ldr	r1, [pc, #204]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 800215a:	4013      	ands	r3, r2
 800215c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	492e      	ldr	r1, [pc, #184]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e006      	b.n	8002186 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	43db      	mvns	r3, r3
 8002180:	4929      	ldr	r1, [pc, #164]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 8002182:	4013      	ands	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002192:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4924      	ldr	r1, [pc, #144]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	608b      	str	r3, [r1, #8]
 800219e:	e006      	b.n	80021ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	491f      	ldr	r1, [pc, #124]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	491a      	ldr	r1, [pc, #104]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60cb      	str	r3, [r1, #12]
 80021c6:	e006      	b.n	80021d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	4915      	ldr	r1, [pc, #84]	; (8002228 <HAL_GPIO_Init+0x2b0>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f aed0 	bne.w	8001f8c <HAL_GPIO_Init+0x14>
  }
}
 80021ec:	bf00      	nop
 80021ee:	372c      	adds	r7, #44	; 0x2c
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	10210000 	.word	0x10210000
 80021fc:	10110000 	.word	0x10110000
 8002200:	10120000 	.word	0x10120000
 8002204:	10310000 	.word	0x10310000
 8002208:	10320000 	.word	0x10320000
 800220c:	10220000 	.word	0x10220000
 8002210:	40021000 	.word	0x40021000
 8002214:	40010000 	.word	0x40010000
 8002218:	40010800 	.word	0x40010800
 800221c:	40010c00 	.word	0x40010c00
 8002220:	40011000 	.word	0x40011000
 8002224:	40011400 	.word	0x40011400
 8002228:	40010400 	.word	0x40010400

0800222c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]
 8002238:	4613      	mov	r3, r2
 800223a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800223c:	787b      	ldrb	r3, [r7, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002248:	e003      	b.n	8002252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	041a      	lsls	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e10f      	b.n	800248e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fca6 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022a0:	f000 fce6 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 80022a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	4a7b      	ldr	r2, [pc, #492]	; (8002498 <HAL_I2C_Init+0x23c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d807      	bhi.n	80022c0 <HAL_I2C_Init+0x64>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a7a      	ldr	r2, [pc, #488]	; (800249c <HAL_I2C_Init+0x240>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	bf94      	ite	ls
 80022b8:	2301      	movls	r3, #1
 80022ba:	2300      	movhi	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e006      	b.n	80022ce <HAL_I2C_Init+0x72>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a77      	ldr	r2, [pc, #476]	; (80024a0 <HAL_I2C_Init+0x244>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	bf94      	ite	ls
 80022c8:	2301      	movls	r3, #1
 80022ca:	2300      	movhi	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0db      	b.n	800248e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a72      	ldr	r2, [pc, #456]	; (80024a4 <HAL_I2C_Init+0x248>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0c9b      	lsrs	r3, r3, #18
 80022e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4a64      	ldr	r2, [pc, #400]	; (8002498 <HAL_I2C_Init+0x23c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d802      	bhi.n	8002310 <HAL_I2C_Init+0xb4>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3301      	adds	r3, #1
 800230e:	e009      	b.n	8002324 <HAL_I2C_Init+0xc8>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	4a63      	ldr	r2, [pc, #396]	; (80024a8 <HAL_I2C_Init+0x24c>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	3301      	adds	r3, #1
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4956      	ldr	r1, [pc, #344]	; (8002498 <HAL_I2C_Init+0x23c>)
 8002340:	428b      	cmp	r3, r1
 8002342:	d80d      	bhi.n	8002360 <HAL_I2C_Init+0x104>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1e59      	subs	r1, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b04      	cmp	r3, #4
 800235a:	bf38      	it	cc
 800235c:	2304      	movcc	r3, #4
 800235e:	e04f      	b.n	8002400 <HAL_I2C_Init+0x1a4>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d111      	bne.n	800238c <HAL_I2C_Init+0x130>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e58      	subs	r0, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6859      	ldr	r1, [r3, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e012      	b.n	80023b2 <HAL_I2C_Init+0x156>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1e58      	subs	r0, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	0099      	lsls	r1, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Init+0x15e>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e022      	b.n	8002400 <HAL_I2C_Init+0x1a4>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10e      	bne.n	80023e0 <HAL_I2C_Init+0x184>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e58      	subs	r0, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6859      	ldr	r1, [r3, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	440b      	add	r3, r1
 80023d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023de:	e00f      	b.n	8002400 <HAL_I2C_Init+0x1a4>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e58      	subs	r0, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	0099      	lsls	r1, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	6809      	ldr	r1, [r1, #0]
 8002404:	4313      	orrs	r3, r2
 8002406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800242e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6911      	ldr	r1, [r2, #16]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68d2      	ldr	r2, [r2, #12]
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	000186a0 	.word	0x000186a0
 800249c:	001e847f 	.word	0x001e847f
 80024a0:	003d08ff 	.word	0x003d08ff
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	10624dd3 	.word	0x10624dd3

080024ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	420e0020 	.word	0x420e0020

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e26c      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8087 	beq.w	80025f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d00c      	beq.n	800250a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024f0:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
 80024fc:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d10b      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d06c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x12c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d168      	bne.n	80025f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e246      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x76>
 800252c:	4b80      	ldr	r3, [pc, #512]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7f      	ldr	r2, [pc, #508]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e02e      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x98>
 8002542:	4b7b      	ldr	r3, [pc, #492]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b78      	ldr	r3, [pc, #480]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a77      	ldr	r2, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e01d      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0xbc>
 8002566:	4b72      	ldr	r3, [pc, #456]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a71      	ldr	r2, [pc, #452]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 8002580:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a67      	ldr	r2, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fdb4 	bl	800110c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7fe fdb0 	bl	800110c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1fa      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe4>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7fe fda0 	bl	800110c <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7fe fd9c 	bl	800110c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1e6      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x10c>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d063      	beq.n	80026c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fe:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b08      	cmp	r3, #8
 8002614:	d11c      	bne.n	8002650 <HAL_RCC_OscConfig+0x18c>
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d116      	bne.n	8002650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1ba      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4939      	ldr	r1, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	e03a      	b.n	80026c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fd55 	bl	800110c <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fd51 	bl	800110c <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e19b      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4927      	ldr	r1, [pc, #156]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fd34 	bl	800110c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a8:	f7fe fd30 	bl	800110c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e17a      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03a      	beq.n	8002748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d019      	beq.n	800270e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_RCC_OscConfig+0x274>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7fe fd14 	bl	800110c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e8:	f7fe fd10 	bl	800110c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e15a      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f000 fada 	bl	8002cc0 <RCC_Delay>
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_OscConfig+0x274>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7fe fcfa 	bl	800110c <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271a:	e00f      	b.n	800273c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7fe fcf6 	bl	800110c <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d908      	bls.n	800273c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e140      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	42420000 	.word	0x42420000
 8002738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	4b9e      	ldr	r3, [pc, #632]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e9      	bne.n	800271c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a6 	beq.w	80028a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b97      	ldr	r3, [pc, #604]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b94      	ldr	r3, [pc, #592]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a93      	ldr	r2, [pc, #588]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]
 8002772:	4b91      	ldr	r3, [pc, #580]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b8e      	ldr	r3, [pc, #568]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278e:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a8a      	ldr	r2, [pc, #552]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279a:	f7fe fcb7 	bl	800110c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7fe fcb3 	bl	800110c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0fd      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	4b81      	ldr	r3, [pc, #516]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x312>
 80027c8:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a7a      	ldr	r2, [pc, #488]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	e02d      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x334>
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a75      	ldr	r2, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6213      	str	r3, [r2, #32]
 80027ea:	4b73      	ldr	r3, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a72      	ldr	r2, [pc, #456]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	e01c      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x356>
 8002800:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4a6c      	ldr	r2, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a69      	ldr	r2, [pc, #420]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	e00b      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a66      	ldr	r2, [pc, #408]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6213      	str	r3, [r2, #32]
 8002826:	4b64      	ldr	r3, [pc, #400]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a63      	ldr	r2, [pc, #396]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d015      	beq.n	8002866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe fc67 	bl	800110c <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7fe fc63 	bl	800110c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0ab      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ee      	beq.n	8002842 <HAL_RCC_OscConfig+0x37e>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7fe fc51 	bl	800110c <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe fc4d 	bl	800110c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e095      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a47      	ldr	r2, [pc, #284]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8081 	beq.w	80029ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ac:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d061      	beq.n	800297c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d146      	bne.n	800294e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_OscConfig+0x4fc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe fc21 	bl	800110c <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fc1d 	bl	800110c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e067      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d108      	bne.n	8002908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f6:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	492d      	ldr	r1, [pc, #180]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a19      	ldr	r1, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	430b      	orrs	r3, r1
 800291a:	4927      	ldr	r1, [pc, #156]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_OscConfig+0x4fc>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fbf1 	bl	800110c <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292e:	f7fe fbed 	bl	800110c <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e037      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x46a>
 800294c:	e02f      	b.n	80029ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_RCC_OscConfig+0x4fc>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fe fbda 	bl	800110c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fbd6 	bl	800110c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e020      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x498>
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e013      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	429a      	cmp	r2, r3
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
 80029c0:	42420060 	.word	0x42420060

080029c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0d0      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4965      	ldr	r1, [pc, #404]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d040      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e073      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06b      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4936      	ldr	r1, [pc, #216]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7fe fb2a 	bl	800110c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7fe fb26 	bl	800110c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e053      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d210      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4922      	ldr	r1, [pc, #136]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f821 	bl	8002b98 <HAL_RCC_GetSysClockFreq>
 8002b56:	4601      	mov	r1, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
 8002b66:	fa21 f303 	lsr.w	r3, r1, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1cc>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1d0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fa88 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40022000 	.word	0x40022000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	0800497c 	.word	0x0800497c
 8002b90:	20000000 	.word	0x20000000
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b98:	b490      	push	{r4, r7}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ba0:	1d3c      	adds	r4, r7, #4
 8002ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x46>
 8002bd6:	e02d      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bda:	623b      	str	r3, [r7, #32]
      break;
 8002bdc:	e02d      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bea:	4413      	add	r3, r2
 8002bec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0c5b      	lsrs	r3, r3, #17
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c16:	fb02 f203 	mul.w	r2, r2, r3
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	e004      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	623b      	str	r3, [r7, #32]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c36:	623b      	str	r3, [r7, #32]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc90      	pop	{r4, r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	08004954 	.word	0x08004954
 8002c4c:	08004964 	.word	0x08004964
 8002c50:	40021000 	.word	0x40021000
 8002c54:	007a1200 	.word	0x007a1200
 8002c58:	003d0900 	.word	0x003d0900

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b02      	ldr	r3, [pc, #8]	; (8002c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c74:	f7ff fff2 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c78:	4601      	mov	r1, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c86:	5cd3      	ldrb	r3, [r2, r3]
 8002c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	0800498c 	.word	0x0800498c

08002c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c9c:	f7ff ffde 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0adb      	lsrs	r3, r3, #11
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	0800498c 	.word	0x0800498c

08002cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <RCC_Delay+0x34>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <RCC_Delay+0x38>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	fb02 f303 	mul.w	r3, r2, r3
 8002cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cdc:	bf00      	nop
  }
  while (Delay --);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	60fa      	str	r2, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f9      	bne.n	8002cdc <RCC_Delay+0x1c>
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d07d      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d28:	4b4c      	ldr	r3, [pc, #304]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a4b      	ldr	r2, [pc, #300]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d32:	61d3      	str	r3, [r2, #28]
 8002d34:	4b49      	ldr	r3, [pc, #292]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d40:	2301      	movs	r3, #1
 8002d42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d44:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d118      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d50:	4b43      	ldr	r3, [pc, #268]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a42      	ldr	r2, [pc, #264]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe f9d6 	bl	800110c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d62:	e008      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d64:	f7fe f9d2 	bl	800110c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e06d      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d76:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02e      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d027      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002da0:	4b2e      	ldr	r3, [pc, #184]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002db0:	4b2c      	ldr	r3, [pc, #176]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002db6:	4a29      	ldr	r2, [pc, #164]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d014      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f9a1 	bl	800110c <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe f99d 	bl	800110c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e036      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4917      	ldr	r1, [pc, #92]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e02:	7dfb      	ldrb	r3, [r7, #23]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d008      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	490b      	ldr	r1, [pc, #44]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e3e:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4904      	ldr	r1, [pc, #16]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40007000 	.word	0x40007000
 8002e64:	42420440 	.word	0x42420440

08002e68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b08d      	sub	sp, #52	; 0x34
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e70:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002e72:	f107 040c 	add.w	r4, r7, #12
 8002e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e7c:	4b53      	ldr	r3, [pc, #332]	; (8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	2300      	movs	r3, #0
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	2300      	movs	r3, #0
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d07f      	beq.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d002      	beq.n	8002ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d048      	beq.n	8002f36 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002ea4:	e08b      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002eac:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d07f      	beq.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	0c9b      	lsrs	r3, r3, #18
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eca:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0c5b      	lsrs	r3, r3, #17
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ef6:	4a37      	ldr	r2, [pc, #220]	; (8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f06:	e004      	b.n	8002f12 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	4a33      	ldr	r2, [pc, #204]	; (8002fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f12:	4b2f      	ldr	r3, [pc, #188]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1e:	d102      	bne.n	8002f26 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f24:	e048      	b.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f34:	e040      	b.n	8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f46:	d108      	bne.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f58:	e01f      	b.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f64:	d109      	bne.n	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002f66:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002f72:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f78:	e00f      	b.n	8002f9a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f84:	d11a      	bne.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d014      	beq.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002f92:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f98:	e010      	b.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002f9a:	e00f      	b.n	8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f9c:	f7ff fe7c 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	0b9b      	lsrs	r3, r3, #14
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	3301      	adds	r3, #1
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002fbc:	bf00      	nop
    }
  }
  return (frequency);
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3734      	adds	r7, #52	; 0x34
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd90      	pop	{r4, r7, pc}
 8002fc8:	08004968 	.word	0x08004968
 8002fcc:	08004978 	.word	0x08004978
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	007a1200 	.word	0x007a1200
 8002fd8:	003d0900 	.word	0x003d0900
 8002fdc:	aaaaaaab 	.word	0xaaaaaaab

08002fe0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e084      	b.n	8003100 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7c5b      	ldrb	r3, [r3, #17]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fe50 	bl	8000cac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f87a 	bl	800310c <HAL_RTC_WaitForSynchro>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d004      	beq.n	8003028 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e06b      	b.n	8003100 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f89c 	bl	8003166 <RTC_EnterInitMode>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2204      	movs	r2, #4
 8003038:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e060      	b.n	8003100 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0207 	bic.w	r2, r2, #7
 800304c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003056:	4b2c      	ldr	r3, [pc, #176]	; (8003108 <HAL_RTC_Init+0x128>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	4a2b      	ldr	r2, [pc, #172]	; (8003108 <HAL_RTC_Init+0x128>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003062:	4b29      	ldr	r3, [pc, #164]	; (8003108 <HAL_RTC_Init+0x128>)
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	4926      	ldr	r1, [pc, #152]	; (8003108 <HAL_RTC_Init+0x128>)
 8003070:	4313      	orrs	r3, r2
 8003072:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d003      	beq.n	8003086 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	e00e      	b.n	80030a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003086:	2001      	movs	r0, #1
 8003088:	f7ff feee 	bl	8002e68 <HAL_RCCEx_GetPeriphCLKFreq>
 800308c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2204      	movs	r2, #4
 8003098:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e030      	b.n	8003100 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 010f 	bic.w	r1, r3, #15
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0c1a      	lsrs	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	b291      	uxth	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f870 	bl	80031b6 <RTC_ExitInitMode>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e00c      	b.n	8003100 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40006c00 	.word	0x40006c00

0800310c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e01d      	b.n	800315e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0208 	bic.w	r2, r2, #8
 8003130:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003132:	f7fd ffeb 	bl	800110c <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003138:	e009      	b.n	800314e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800313a:	f7fd ffe7 	bl	800110c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003148:	d901      	bls.n	800314e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e007      	b.n	800315e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0ee      	beq.n	800313a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003172:	f7fd ffcb 	bl	800110c <HAL_GetTick>
 8003176:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003178:	e009      	b.n	800318e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800317a:	f7fd ffc7 	bl	800110c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003188:	d901      	bls.n	800318e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e00f      	b.n	80031ae <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ee      	beq.n	800317a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0210 	orr.w	r2, r2, #16
 80031aa:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0210 	bic.w	r2, r2, #16
 80031d0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80031d2:	f7fd ff9b 	bl	800110c <HAL_GetTick>
 80031d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031d8:	e009      	b.n	80031ee <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80031da:	f7fd ff97 	bl	800110c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031e8:	d901      	bls.n	80031ee <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e007      	b.n	80031fe <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ee      	beq.n	80031da <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e01d      	b.n	8003254 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd fd61 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f000 f9e5 	bl	8003614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e01d      	b.n	80032aa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd fd54 	bl	8000d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f000 f9ba 	bl	8003614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	6839      	ldr	r1, [r7, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fc24 	bl	8003b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_TIM_PWM_Start+0x60>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d107      	bne.n	80032e6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d007      	beq.n	8003308 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00

08003318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800332e:	2302      	movs	r3, #2
 8003330:	e0b4      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b0c      	cmp	r3, #12
 8003346:	f200 809f 	bhi.w	8003488 <HAL_TIM_PWM_ConfigChannel+0x170>
 800334a:	a201      	add	r2, pc, #4	; (adr r2, 8003350 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003350:	08003385 	.word	0x08003385
 8003354:	08003489 	.word	0x08003489
 8003358:	08003489 	.word	0x08003489
 800335c:	08003489 	.word	0x08003489
 8003360:	080033c5 	.word	0x080033c5
 8003364:	08003489 	.word	0x08003489
 8003368:	08003489 	.word	0x08003489
 800336c:	08003489 	.word	0x08003489
 8003370:	08003407 	.word	0x08003407
 8003374:	08003489 	.word	0x08003489
 8003378:	08003489 	.word	0x08003489
 800337c:	08003489 	.word	0x08003489
 8003380:	08003447 	.word	0x08003447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f9a4 	bl	80036d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0208 	orr.w	r2, r2, #8
 800339e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0204 	bic.w	r2, r2, #4
 80033ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6999      	ldr	r1, [r3, #24]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	619a      	str	r2, [r3, #24]
      break;
 80033c2:	e062      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f9ea 	bl	80037a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6999      	ldr	r1, [r3, #24]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	021a      	lsls	r2, r3, #8
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	619a      	str	r2, [r3, #24]
      break;
 8003404:	e041      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fa33 	bl	8003878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0208 	orr.w	r2, r2, #8
 8003420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0204 	bic.w	r2, r2, #4
 8003430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	69d9      	ldr	r1, [r3, #28]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	61da      	str	r2, [r3, #28]
      break;
 8003444:	e021      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68b9      	ldr	r1, [r7, #8]
 800344c:	4618      	mov	r0, r3
 800344e:	f000 fa7d 	bl	800394c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	69d9      	ldr	r1, [r3, #28]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	61da      	str	r2, [r3, #28]
      break;
 8003486:	e000      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003488:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d101      	bne.n	80034bc <HAL_TIM_ConfigClockSource+0x18>
 80034b8:	2302      	movs	r3, #2
 80034ba:	e0a6      	b.n	800360a <HAL_TIM_ConfigClockSource+0x166>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d067      	beq.n	80035c4 <HAL_TIM_ConfigClockSource+0x120>
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d80b      	bhi.n	8003510 <HAL_TIM_ConfigClockSource+0x6c>
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d073      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x140>
 80034fc:	2b10      	cmp	r3, #16
 80034fe:	d802      	bhi.n	8003506 <HAL_TIM_ConfigClockSource+0x62>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d06f      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003504:	e078      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003506:	2b20      	cmp	r3, #32
 8003508:	d06c      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x140>
 800350a:	2b30      	cmp	r3, #48	; 0x30
 800350c:	d06a      	beq.n	80035e4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800350e:	e073      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003510:	2b70      	cmp	r3, #112	; 0x70
 8003512:	d00d      	beq.n	8003530 <HAL_TIM_ConfigClockSource+0x8c>
 8003514:	2b70      	cmp	r3, #112	; 0x70
 8003516:	d804      	bhi.n	8003522 <HAL_TIM_ConfigClockSource+0x7e>
 8003518:	2b50      	cmp	r3, #80	; 0x50
 800351a:	d033      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0xe0>
 800351c:	2b60      	cmp	r3, #96	; 0x60
 800351e:	d041      	beq.n	80035a4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003520:	e06a      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003526:	d066      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x152>
 8003528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352c:	d017      	beq.n	800355e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800352e:	e063      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	6899      	ldr	r1, [r3, #8]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f000 fac9 	bl	8003ad6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003552:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	609a      	str	r2, [r3, #8]
      break;
 800355c:	e04c      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6899      	ldr	r1, [r3, #8]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f000 fab2 	bl	8003ad6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003580:	609a      	str	r2, [r3, #8]
      break;
 8003582:	e039      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	461a      	mov	r2, r3
 8003592:	f000 fa29 	bl	80039e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2150      	movs	r1, #80	; 0x50
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fa80 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 80035a2:	e029      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f000 fa47 	bl	8003a44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2160      	movs	r1, #96	; 0x60
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 fa70 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 80035c2:	e019      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6818      	ldr	r0, [r3, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f000 fa09 	bl	80039e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2140      	movs	r1, #64	; 0x40
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fa60 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 80035e2:	e009      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 fa57 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 80035f4:	e000      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a29      	ldr	r2, [pc, #164]	; (80036cc <TIM_Base_SetConfig+0xb8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00b      	beq.n	8003644 <TIM_Base_SetConfig+0x30>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003632:	d007      	beq.n	8003644 <TIM_Base_SetConfig+0x30>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <TIM_Base_SetConfig+0xbc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x30>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <TIM_Base_SetConfig+0xc0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a1c      	ldr	r2, [pc, #112]	; (80036cc <TIM_Base_SetConfig+0xb8>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0x62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0x62>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <TIM_Base_SetConfig+0xbc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0x62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a18      	ldr	r2, [pc, #96]	; (80036d4 <TIM_Base_SetConfig+0xc0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a07      	ldr	r2, [pc, #28]	; (80036cc <TIM_Base_SetConfig+0xb8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d103      	bne.n	80036bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	615a      	str	r2, [r3, #20]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800

080036d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f023 0201 	bic.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 0302 	bic.w	r3, r3, #2
 8003720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <TIM_OC1_SetConfig+0xc8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10c      	bne.n	800374e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0308 	bic.w	r3, r3, #8
 800373a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <TIM_OC1_SetConfig+0xc8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d111      	bne.n	800377a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	621a      	str	r2, [r3, #32]
}
 8003794:	bf00      	nop
 8003796:	371c      	adds	r7, #28
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40012c00 	.word	0x40012c00

080037a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f023 0210 	bic.w	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0320 	bic.w	r3, r3, #32
 80037ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <TIM_OC2_SetConfig+0xd0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10d      	bne.n	8003820 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a14      	ldr	r2, [pc, #80]	; (8003874 <TIM_OC2_SetConfig+0xd0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d113      	bne.n	8003850 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800382e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	40012c00 	.word	0x40012c00

08003878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0303 	bic.w	r3, r3, #3
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <TIM_OC3_SetConfig+0xd0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d10d      	bne.n	80038f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <TIM_OC3_SetConfig+0xd0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d113      	bne.n	8003922 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	621a      	str	r2, [r3, #32]
}
 800393c:	bf00      	nop
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00

0800394c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800397a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	021b      	lsls	r3, r3, #8
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	031b      	lsls	r3, r3, #12
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <TIM_OC4_SetConfig+0x98>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d109      	bne.n	80039c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	40012c00 	.word	0x40012c00

080039e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 030a 	bic.w	r3, r3, #10
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f023 0210 	bic.w	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	031b      	lsls	r3, r3, #12
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	621a      	str	r2, [r3, #32]
}
 8003a98:	bf00      	nop
 8003a9a:	371c      	adds	r7, #28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b087      	sub	sp, #28
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	021a      	lsls	r2, r3, #8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	609a      	str	r2, [r3, #8]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e032      	b.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bac:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e03d      	b.n	8003c7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e03f      	b.n	8003d18 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7fd f8db 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2224      	movs	r2, #36	; 0x24
 8003cb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f90c 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	f040 8083 	bne.w	8003e48 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_UART_Transmit+0x2e>
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e07b      	b.n	8003e4a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_UART_Transmit+0x40>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e074      	b.n	8003e4a <HAL_UART_Transmit+0x12a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2221      	movs	r2, #33	; 0x21
 8003d72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d76:	f7fd f9c9 	bl	800110c <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	88fa      	ldrh	r2, [r7, #6]
 8003d80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d88:	e042      	b.n	8003e10 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d122      	bne.n	8003de8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	2200      	movs	r2, #0
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f850 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e046      	b.n	8003e4a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dce:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3302      	adds	r3, #2
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	e017      	b.n	8003e10 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	3301      	adds	r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	e013      	b.n	8003e10 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f82d 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e023      	b.n	8003e4a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	60ba      	str	r2, [r7, #8]
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1b7      	bne.n	8003d8a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f814 	bl	8003e52 <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e00a      	b.n	8003e4a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e000      	b.n	8003e4a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e48:	2302      	movs	r3, #2
  }
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e62:	e02c      	b.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d028      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e72:	f7fd f94b 	bl	800110c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d21d      	bcs.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e00f      	b.n	8003ede <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d0c3      	beq.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f22:	f023 030c 	bic.w	r3, r3, #12
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a52      	ldr	r2, [pc, #328]	; (8004094 <UART_SetConfig+0x1ac>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d14e      	bne.n	8003fee <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe fea2 	bl	8002c98 <HAL_RCC_GetPCLK2Freq>
 8003f54:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009a      	lsls	r2, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6c:	4a4a      	ldr	r2, [pc, #296]	; (8004098 <UART_SetConfig+0x1b0>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	0119      	lsls	r1, r3, #4
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009a      	lsls	r2, r3, #2
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f8c:	4b42      	ldr	r3, [pc, #264]	; (8004098 <UART_SetConfig+0x1b0>)
 8003f8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2064      	movs	r0, #100	; 0x64
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	3332      	adds	r3, #50	; 0x32
 8003fa0:	4a3d      	ldr	r2, [pc, #244]	; (8004098 <UART_SetConfig+0x1b0>)
 8003fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fac:	4419      	add	r1, r3
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009a      	lsls	r2, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <UART_SetConfig+0x1b0>)
 8003fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2064      	movs	r0, #100	; 0x64
 8003fce:	fb00 f303 	mul.w	r3, r0, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	3332      	adds	r3, #50	; 0x32
 8003fd8:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <UART_SetConfig+0x1b0>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	440a      	add	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003fec:	e04d      	b.n	800408a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fee:	f7fe fe3f 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8003ff2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009a      	lsls	r2, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	4a23      	ldr	r2, [pc, #140]	; (8004098 <UART_SetConfig+0x1b0>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	0119      	lsls	r1, r3, #4
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	441a      	add	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	fbb2 f2f3 	udiv	r2, r2, r3
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <UART_SetConfig+0x1b0>)
 800402c:	fba3 0302 	umull	r0, r3, r3, r2
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	2064      	movs	r0, #100	; 0x64
 8004034:	fb00 f303 	mul.w	r3, r0, r3
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	3332      	adds	r3, #50	; 0x32
 800403e:	4a16      	ldr	r2, [pc, #88]	; (8004098 <UART_SetConfig+0x1b0>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800404a:	4419      	add	r1, r3
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009a      	lsls	r2, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <UART_SetConfig+0x1b0>)
 8004064:	fba3 0302 	umull	r0, r3, r3, r2
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	2064      	movs	r0, #100	; 0x64
 800406c:	fb00 f303 	mul.w	r3, r0, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	3332      	adds	r3, #50	; 0x32
 8004076:	4a08      	ldr	r2, [pc, #32]	; (8004098 <UART_SetConfig+0x1b0>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	f003 020f 	and.w	r2, r3, #15
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	440a      	add	r2, r1
 8004088:	609a      	str	r2, [r3, #8]
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40013800 	.word	0x40013800
 8004098:	51eb851f 	.word	0x51eb851f

0800409c <__errno>:
 800409c:	4b01      	ldr	r3, [pc, #4]	; (80040a4 <__errno+0x8>)
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000000c 	.word	0x2000000c

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	2500      	movs	r5, #0
 80040ac:	4e0c      	ldr	r6, [pc, #48]	; (80040e0 <__libc_init_array+0x38>)
 80040ae:	4c0d      	ldr	r4, [pc, #52]	; (80040e4 <__libc_init_array+0x3c>)
 80040b0:	1ba4      	subs	r4, r4, r6
 80040b2:	10a4      	asrs	r4, r4, #2
 80040b4:	42a5      	cmp	r5, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	f000 fc34 	bl	8004924 <_init>
 80040bc:	2500      	movs	r5, #0
 80040be:	4e0a      	ldr	r6, [pc, #40]	; (80040e8 <__libc_init_array+0x40>)
 80040c0:	4c0a      	ldr	r4, [pc, #40]	; (80040ec <__libc_init_array+0x44>)
 80040c2:	1ba4      	subs	r4, r4, r6
 80040c4:	10a4      	asrs	r4, r4, #2
 80040c6:	42a5      	cmp	r5, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040d0:	4798      	blx	r3
 80040d2:	3501      	adds	r5, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040da:	4798      	blx	r3
 80040dc:	3501      	adds	r5, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	080049c8 	.word	0x080049c8
 80040e4:	080049c8 	.word	0x080049c8
 80040e8:	080049c8 	.word	0x080049c8
 80040ec:	080049cc 	.word	0x080049cc

080040f0 <memset>:
 80040f0:	4603      	mov	r3, r0
 80040f2:	4402      	add	r2, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d100      	bne.n	80040fa <memset+0xa>
 80040f8:	4770      	bx	lr
 80040fa:	f803 1b01 	strb.w	r1, [r3], #1
 80040fe:	e7f9      	b.n	80040f4 <memset+0x4>

08004100 <siprintf>:
 8004100:	b40e      	push	{r1, r2, r3}
 8004102:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004106:	b500      	push	{lr}
 8004108:	b09c      	sub	sp, #112	; 0x70
 800410a:	ab1d      	add	r3, sp, #116	; 0x74
 800410c:	9002      	str	r0, [sp, #8]
 800410e:	9006      	str	r0, [sp, #24]
 8004110:	9107      	str	r1, [sp, #28]
 8004112:	9104      	str	r1, [sp, #16]
 8004114:	4808      	ldr	r0, [pc, #32]	; (8004138 <siprintf+0x38>)
 8004116:	4909      	ldr	r1, [pc, #36]	; (800413c <siprintf+0x3c>)
 8004118:	f853 2b04 	ldr.w	r2, [r3], #4
 800411c:	9105      	str	r1, [sp, #20]
 800411e:	6800      	ldr	r0, [r0, #0]
 8004120:	a902      	add	r1, sp, #8
 8004122:	9301      	str	r3, [sp, #4]
 8004124:	f000 f866 	bl	80041f4 <_svfiprintf_r>
 8004128:	2200      	movs	r2, #0
 800412a:	9b02      	ldr	r3, [sp, #8]
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	b01c      	add	sp, #112	; 0x70
 8004130:	f85d eb04 	ldr.w	lr, [sp], #4
 8004134:	b003      	add	sp, #12
 8004136:	4770      	bx	lr
 8004138:	2000000c 	.word	0x2000000c
 800413c:	ffff0208 	.word	0xffff0208

08004140 <__ssputs_r>:
 8004140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	688e      	ldr	r6, [r1, #8]
 8004146:	4682      	mov	sl, r0
 8004148:	429e      	cmp	r6, r3
 800414a:	460c      	mov	r4, r1
 800414c:	4690      	mov	r8, r2
 800414e:	4699      	mov	r9, r3
 8004150:	d837      	bhi.n	80041c2 <__ssputs_r+0x82>
 8004152:	898a      	ldrh	r2, [r1, #12]
 8004154:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004158:	d031      	beq.n	80041be <__ssputs_r+0x7e>
 800415a:	2302      	movs	r3, #2
 800415c:	6825      	ldr	r5, [r4, #0]
 800415e:	6909      	ldr	r1, [r1, #16]
 8004160:	1a6f      	subs	r7, r5, r1
 8004162:	6965      	ldr	r5, [r4, #20]
 8004164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004168:	fb95 f5f3 	sdiv	r5, r5, r3
 800416c:	f109 0301 	add.w	r3, r9, #1
 8004170:	443b      	add	r3, r7
 8004172:	429d      	cmp	r5, r3
 8004174:	bf38      	it	cc
 8004176:	461d      	movcc	r5, r3
 8004178:	0553      	lsls	r3, r2, #21
 800417a:	d530      	bpl.n	80041de <__ssputs_r+0x9e>
 800417c:	4629      	mov	r1, r5
 800417e:	f000 fb37 	bl	80047f0 <_malloc_r>
 8004182:	4606      	mov	r6, r0
 8004184:	b950      	cbnz	r0, 800419c <__ssputs_r+0x5c>
 8004186:	230c      	movs	r3, #12
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	f8ca 3000 	str.w	r3, [sl]
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800419c:	463a      	mov	r2, r7
 800419e:	6921      	ldr	r1, [r4, #16]
 80041a0:	f000 fab6 	bl	8004710 <memcpy>
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ae:	81a3      	strh	r3, [r4, #12]
 80041b0:	6126      	str	r6, [r4, #16]
 80041b2:	443e      	add	r6, r7
 80041b4:	6026      	str	r6, [r4, #0]
 80041b6:	464e      	mov	r6, r9
 80041b8:	6165      	str	r5, [r4, #20]
 80041ba:	1bed      	subs	r5, r5, r7
 80041bc:	60a5      	str	r5, [r4, #8]
 80041be:	454e      	cmp	r6, r9
 80041c0:	d900      	bls.n	80041c4 <__ssputs_r+0x84>
 80041c2:	464e      	mov	r6, r9
 80041c4:	4632      	mov	r2, r6
 80041c6:	4641      	mov	r1, r8
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	f000 faac 	bl	8004726 <memmove>
 80041ce:	68a3      	ldr	r3, [r4, #8]
 80041d0:	2000      	movs	r0, #0
 80041d2:	1b9b      	subs	r3, r3, r6
 80041d4:	60a3      	str	r3, [r4, #8]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	441e      	add	r6, r3
 80041da:	6026      	str	r6, [r4, #0]
 80041dc:	e7dc      	b.n	8004198 <__ssputs_r+0x58>
 80041de:	462a      	mov	r2, r5
 80041e0:	f000 fb60 	bl	80048a4 <_realloc_r>
 80041e4:	4606      	mov	r6, r0
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d1e2      	bne.n	80041b0 <__ssputs_r+0x70>
 80041ea:	6921      	ldr	r1, [r4, #16]
 80041ec:	4650      	mov	r0, sl
 80041ee:	f000 fab3 	bl	8004758 <_free_r>
 80041f2:	e7c8      	b.n	8004186 <__ssputs_r+0x46>

080041f4 <_svfiprintf_r>:
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	461d      	mov	r5, r3
 80041fa:	898b      	ldrh	r3, [r1, #12]
 80041fc:	b09d      	sub	sp, #116	; 0x74
 80041fe:	061f      	lsls	r7, r3, #24
 8004200:	4680      	mov	r8, r0
 8004202:	460c      	mov	r4, r1
 8004204:	4616      	mov	r6, r2
 8004206:	d50f      	bpl.n	8004228 <_svfiprintf_r+0x34>
 8004208:	690b      	ldr	r3, [r1, #16]
 800420a:	b96b      	cbnz	r3, 8004228 <_svfiprintf_r+0x34>
 800420c:	2140      	movs	r1, #64	; 0x40
 800420e:	f000 faef 	bl	80047f0 <_malloc_r>
 8004212:	6020      	str	r0, [r4, #0]
 8004214:	6120      	str	r0, [r4, #16]
 8004216:	b928      	cbnz	r0, 8004224 <_svfiprintf_r+0x30>
 8004218:	230c      	movs	r3, #12
 800421a:	f8c8 3000 	str.w	r3, [r8]
 800421e:	f04f 30ff 	mov.w	r0, #4294967295
 8004222:	e0c8      	b.n	80043b6 <_svfiprintf_r+0x1c2>
 8004224:	2340      	movs	r3, #64	; 0x40
 8004226:	6163      	str	r3, [r4, #20]
 8004228:	2300      	movs	r3, #0
 800422a:	9309      	str	r3, [sp, #36]	; 0x24
 800422c:	2320      	movs	r3, #32
 800422e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004232:	2330      	movs	r3, #48	; 0x30
 8004234:	f04f 0b01 	mov.w	fp, #1
 8004238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800423c:	9503      	str	r5, [sp, #12]
 800423e:	4637      	mov	r7, r6
 8004240:	463d      	mov	r5, r7
 8004242:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004246:	b10b      	cbz	r3, 800424c <_svfiprintf_r+0x58>
 8004248:	2b25      	cmp	r3, #37	; 0x25
 800424a:	d13e      	bne.n	80042ca <_svfiprintf_r+0xd6>
 800424c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004250:	d00b      	beq.n	800426a <_svfiprintf_r+0x76>
 8004252:	4653      	mov	r3, sl
 8004254:	4632      	mov	r2, r6
 8004256:	4621      	mov	r1, r4
 8004258:	4640      	mov	r0, r8
 800425a:	f7ff ff71 	bl	8004140 <__ssputs_r>
 800425e:	3001      	adds	r0, #1
 8004260:	f000 80a4 	beq.w	80043ac <_svfiprintf_r+0x1b8>
 8004264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004266:	4453      	add	r3, sl
 8004268:	9309      	str	r3, [sp, #36]	; 0x24
 800426a:	783b      	ldrb	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 809d 	beq.w	80043ac <_svfiprintf_r+0x1b8>
 8004272:	2300      	movs	r3, #0
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800427c:	9304      	str	r3, [sp, #16]
 800427e:	9307      	str	r3, [sp, #28]
 8004280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004284:	931a      	str	r3, [sp, #104]	; 0x68
 8004286:	462f      	mov	r7, r5
 8004288:	2205      	movs	r2, #5
 800428a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800428e:	4850      	ldr	r0, [pc, #320]	; (80043d0 <_svfiprintf_r+0x1dc>)
 8004290:	f000 fa30 	bl	80046f4 <memchr>
 8004294:	9b04      	ldr	r3, [sp, #16]
 8004296:	b9d0      	cbnz	r0, 80042ce <_svfiprintf_r+0xda>
 8004298:	06d9      	lsls	r1, r3, #27
 800429a:	bf44      	itt	mi
 800429c:	2220      	movmi	r2, #32
 800429e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042a2:	071a      	lsls	r2, r3, #28
 80042a4:	bf44      	itt	mi
 80042a6:	222b      	movmi	r2, #43	; 0x2b
 80042a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042ac:	782a      	ldrb	r2, [r5, #0]
 80042ae:	2a2a      	cmp	r2, #42	; 0x2a
 80042b0:	d015      	beq.n	80042de <_svfiprintf_r+0xea>
 80042b2:	462f      	mov	r7, r5
 80042b4:	2000      	movs	r0, #0
 80042b6:	250a      	movs	r5, #10
 80042b8:	9a07      	ldr	r2, [sp, #28]
 80042ba:	4639      	mov	r1, r7
 80042bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042c0:	3b30      	subs	r3, #48	; 0x30
 80042c2:	2b09      	cmp	r3, #9
 80042c4:	d94d      	bls.n	8004362 <_svfiprintf_r+0x16e>
 80042c6:	b1b8      	cbz	r0, 80042f8 <_svfiprintf_r+0x104>
 80042c8:	e00f      	b.n	80042ea <_svfiprintf_r+0xf6>
 80042ca:	462f      	mov	r7, r5
 80042cc:	e7b8      	b.n	8004240 <_svfiprintf_r+0x4c>
 80042ce:	4a40      	ldr	r2, [pc, #256]	; (80043d0 <_svfiprintf_r+0x1dc>)
 80042d0:	463d      	mov	r5, r7
 80042d2:	1a80      	subs	r0, r0, r2
 80042d4:	fa0b f000 	lsl.w	r0, fp, r0
 80042d8:	4318      	orrs	r0, r3
 80042da:	9004      	str	r0, [sp, #16]
 80042dc:	e7d3      	b.n	8004286 <_svfiprintf_r+0x92>
 80042de:	9a03      	ldr	r2, [sp, #12]
 80042e0:	1d11      	adds	r1, r2, #4
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	9103      	str	r1, [sp, #12]
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	db01      	blt.n	80042ee <_svfiprintf_r+0xfa>
 80042ea:	9207      	str	r2, [sp, #28]
 80042ec:	e004      	b.n	80042f8 <_svfiprintf_r+0x104>
 80042ee:	4252      	negs	r2, r2
 80042f0:	f043 0302 	orr.w	r3, r3, #2
 80042f4:	9207      	str	r2, [sp, #28]
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	783b      	ldrb	r3, [r7, #0]
 80042fa:	2b2e      	cmp	r3, #46	; 0x2e
 80042fc:	d10c      	bne.n	8004318 <_svfiprintf_r+0x124>
 80042fe:	787b      	ldrb	r3, [r7, #1]
 8004300:	2b2a      	cmp	r3, #42	; 0x2a
 8004302:	d133      	bne.n	800436c <_svfiprintf_r+0x178>
 8004304:	9b03      	ldr	r3, [sp, #12]
 8004306:	3702      	adds	r7, #2
 8004308:	1d1a      	adds	r2, r3, #4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	9203      	str	r2, [sp, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	bfb8      	it	lt
 8004312:	f04f 33ff 	movlt.w	r3, #4294967295
 8004316:	9305      	str	r3, [sp, #20]
 8004318:	4d2e      	ldr	r5, [pc, #184]	; (80043d4 <_svfiprintf_r+0x1e0>)
 800431a:	2203      	movs	r2, #3
 800431c:	7839      	ldrb	r1, [r7, #0]
 800431e:	4628      	mov	r0, r5
 8004320:	f000 f9e8 	bl	80046f4 <memchr>
 8004324:	b138      	cbz	r0, 8004336 <_svfiprintf_r+0x142>
 8004326:	2340      	movs	r3, #64	; 0x40
 8004328:	1b40      	subs	r0, r0, r5
 800432a:	fa03 f000 	lsl.w	r0, r3, r0
 800432e:	9b04      	ldr	r3, [sp, #16]
 8004330:	3701      	adds	r7, #1
 8004332:	4303      	orrs	r3, r0
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	7839      	ldrb	r1, [r7, #0]
 8004338:	2206      	movs	r2, #6
 800433a:	4827      	ldr	r0, [pc, #156]	; (80043d8 <_svfiprintf_r+0x1e4>)
 800433c:	1c7e      	adds	r6, r7, #1
 800433e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004342:	f000 f9d7 	bl	80046f4 <memchr>
 8004346:	2800      	cmp	r0, #0
 8004348:	d038      	beq.n	80043bc <_svfiprintf_r+0x1c8>
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <_svfiprintf_r+0x1e8>)
 800434c:	bb13      	cbnz	r3, 8004394 <_svfiprintf_r+0x1a0>
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	3307      	adds	r3, #7
 8004352:	f023 0307 	bic.w	r3, r3, #7
 8004356:	3308      	adds	r3, #8
 8004358:	9303      	str	r3, [sp, #12]
 800435a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435c:	444b      	add	r3, r9
 800435e:	9309      	str	r3, [sp, #36]	; 0x24
 8004360:	e76d      	b.n	800423e <_svfiprintf_r+0x4a>
 8004362:	fb05 3202 	mla	r2, r5, r2, r3
 8004366:	2001      	movs	r0, #1
 8004368:	460f      	mov	r7, r1
 800436a:	e7a6      	b.n	80042ba <_svfiprintf_r+0xc6>
 800436c:	2300      	movs	r3, #0
 800436e:	250a      	movs	r5, #10
 8004370:	4619      	mov	r1, r3
 8004372:	3701      	adds	r7, #1
 8004374:	9305      	str	r3, [sp, #20]
 8004376:	4638      	mov	r0, r7
 8004378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800437c:	3a30      	subs	r2, #48	; 0x30
 800437e:	2a09      	cmp	r2, #9
 8004380:	d903      	bls.n	800438a <_svfiprintf_r+0x196>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0c8      	beq.n	8004318 <_svfiprintf_r+0x124>
 8004386:	9105      	str	r1, [sp, #20]
 8004388:	e7c6      	b.n	8004318 <_svfiprintf_r+0x124>
 800438a:	fb05 2101 	mla	r1, r5, r1, r2
 800438e:	2301      	movs	r3, #1
 8004390:	4607      	mov	r7, r0
 8004392:	e7f0      	b.n	8004376 <_svfiprintf_r+0x182>
 8004394:	ab03      	add	r3, sp, #12
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	4622      	mov	r2, r4
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <_svfiprintf_r+0x1ec>)
 800439c:	a904      	add	r1, sp, #16
 800439e:	4640      	mov	r0, r8
 80043a0:	f3af 8000 	nop.w
 80043a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80043a8:	4681      	mov	r9, r0
 80043aa:	d1d6      	bne.n	800435a <_svfiprintf_r+0x166>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	065b      	lsls	r3, r3, #25
 80043b0:	f53f af35 	bmi.w	800421e <_svfiprintf_r+0x2a>
 80043b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043b6:	b01d      	add	sp, #116	; 0x74
 80043b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043bc:	ab03      	add	r3, sp, #12
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4622      	mov	r2, r4
 80043c2:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <_svfiprintf_r+0x1ec>)
 80043c4:	a904      	add	r1, sp, #16
 80043c6:	4640      	mov	r0, r8
 80043c8:	f000 f882 	bl	80044d0 <_printf_i>
 80043cc:	e7ea      	b.n	80043a4 <_svfiprintf_r+0x1b0>
 80043ce:	bf00      	nop
 80043d0:	08004994 	.word	0x08004994
 80043d4:	0800499a 	.word	0x0800499a
 80043d8:	0800499e 	.word	0x0800499e
 80043dc:	00000000 	.word	0x00000000
 80043e0:	08004141 	.word	0x08004141

080043e4 <_printf_common>:
 80043e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e8:	4691      	mov	r9, r2
 80043ea:	461f      	mov	r7, r3
 80043ec:	688a      	ldr	r2, [r1, #8]
 80043ee:	690b      	ldr	r3, [r1, #16]
 80043f0:	4606      	mov	r6, r0
 80043f2:	4293      	cmp	r3, r2
 80043f4:	bfb8      	it	lt
 80043f6:	4613      	movlt	r3, r2
 80043f8:	f8c9 3000 	str.w	r3, [r9]
 80043fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004400:	460c      	mov	r4, r1
 8004402:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004406:	b112      	cbz	r2, 800440e <_printf_common+0x2a>
 8004408:	3301      	adds	r3, #1
 800440a:	f8c9 3000 	str.w	r3, [r9]
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	0699      	lsls	r1, r3, #26
 8004412:	bf42      	ittt	mi
 8004414:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004418:	3302      	addmi	r3, #2
 800441a:	f8c9 3000 	strmi.w	r3, [r9]
 800441e:	6825      	ldr	r5, [r4, #0]
 8004420:	f015 0506 	ands.w	r5, r5, #6
 8004424:	d107      	bne.n	8004436 <_printf_common+0x52>
 8004426:	f104 0a19 	add.w	sl, r4, #25
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	f8d9 2000 	ldr.w	r2, [r9]
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	42ab      	cmp	r3, r5
 8004434:	dc29      	bgt.n	800448a <_printf_common+0xa6>
 8004436:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800443a:	6822      	ldr	r2, [r4, #0]
 800443c:	3300      	adds	r3, #0
 800443e:	bf18      	it	ne
 8004440:	2301      	movne	r3, #1
 8004442:	0692      	lsls	r2, r2, #26
 8004444:	d42e      	bmi.n	80044a4 <_printf_common+0xc0>
 8004446:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800444a:	4639      	mov	r1, r7
 800444c:	4630      	mov	r0, r6
 800444e:	47c0      	blx	r8
 8004450:	3001      	adds	r0, #1
 8004452:	d021      	beq.n	8004498 <_printf_common+0xb4>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	68e5      	ldr	r5, [r4, #12]
 8004458:	f003 0306 	and.w	r3, r3, #6
 800445c:	2b04      	cmp	r3, #4
 800445e:	bf18      	it	ne
 8004460:	2500      	movne	r5, #0
 8004462:	f8d9 2000 	ldr.w	r2, [r9]
 8004466:	f04f 0900 	mov.w	r9, #0
 800446a:	bf08      	it	eq
 800446c:	1aad      	subeq	r5, r5, r2
 800446e:	68a3      	ldr	r3, [r4, #8]
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	bf08      	it	eq
 8004474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004478:	4293      	cmp	r3, r2
 800447a:	bfc4      	itt	gt
 800447c:	1a9b      	subgt	r3, r3, r2
 800447e:	18ed      	addgt	r5, r5, r3
 8004480:	341a      	adds	r4, #26
 8004482:	454d      	cmp	r5, r9
 8004484:	d11a      	bne.n	80044bc <_printf_common+0xd8>
 8004486:	2000      	movs	r0, #0
 8004488:	e008      	b.n	800449c <_printf_common+0xb8>
 800448a:	2301      	movs	r3, #1
 800448c:	4652      	mov	r2, sl
 800448e:	4639      	mov	r1, r7
 8004490:	4630      	mov	r0, r6
 8004492:	47c0      	blx	r8
 8004494:	3001      	adds	r0, #1
 8004496:	d103      	bne.n	80044a0 <_printf_common+0xbc>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a0:	3501      	adds	r5, #1
 80044a2:	e7c2      	b.n	800442a <_printf_common+0x46>
 80044a4:	2030      	movs	r0, #48	; 0x30
 80044a6:	18e1      	adds	r1, r4, r3
 80044a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044b2:	4422      	add	r2, r4
 80044b4:	3302      	adds	r3, #2
 80044b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044ba:	e7c4      	b.n	8004446 <_printf_common+0x62>
 80044bc:	2301      	movs	r3, #1
 80044be:	4622      	mov	r2, r4
 80044c0:	4639      	mov	r1, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0e6      	beq.n	8004498 <_printf_common+0xb4>
 80044ca:	f109 0901 	add.w	r9, r9, #1
 80044ce:	e7d8      	b.n	8004482 <_printf_common+0x9e>

080044d0 <_printf_i>:
 80044d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044d8:	460c      	mov	r4, r1
 80044da:	7e09      	ldrb	r1, [r1, #24]
 80044dc:	b085      	sub	sp, #20
 80044de:	296e      	cmp	r1, #110	; 0x6e
 80044e0:	4617      	mov	r7, r2
 80044e2:	4606      	mov	r6, r0
 80044e4:	4698      	mov	r8, r3
 80044e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044e8:	f000 80b3 	beq.w	8004652 <_printf_i+0x182>
 80044ec:	d822      	bhi.n	8004534 <_printf_i+0x64>
 80044ee:	2963      	cmp	r1, #99	; 0x63
 80044f0:	d036      	beq.n	8004560 <_printf_i+0x90>
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x3a>
 80044f4:	2900      	cmp	r1, #0
 80044f6:	f000 80b9 	beq.w	800466c <_printf_i+0x19c>
 80044fa:	2958      	cmp	r1, #88	; 0x58
 80044fc:	f000 8083 	beq.w	8004606 <_printf_i+0x136>
 8004500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004504:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004508:	e032      	b.n	8004570 <_printf_i+0xa0>
 800450a:	2964      	cmp	r1, #100	; 0x64
 800450c:	d001      	beq.n	8004512 <_printf_i+0x42>
 800450e:	2969      	cmp	r1, #105	; 0x69
 8004510:	d1f6      	bne.n	8004500 <_printf_i+0x30>
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	0605      	lsls	r5, r0, #24
 8004518:	f103 0104 	add.w	r1, r3, #4
 800451c:	d52a      	bpl.n	8004574 <_printf_i+0xa4>
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6011      	str	r1, [r2, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	da03      	bge.n	800452e <_printf_i+0x5e>
 8004526:	222d      	movs	r2, #45	; 0x2d
 8004528:	425b      	negs	r3, r3
 800452a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800452e:	486f      	ldr	r0, [pc, #444]	; (80046ec <_printf_i+0x21c>)
 8004530:	220a      	movs	r2, #10
 8004532:	e039      	b.n	80045a8 <_printf_i+0xd8>
 8004534:	2973      	cmp	r1, #115	; 0x73
 8004536:	f000 809d 	beq.w	8004674 <_printf_i+0x1a4>
 800453a:	d808      	bhi.n	800454e <_printf_i+0x7e>
 800453c:	296f      	cmp	r1, #111	; 0x6f
 800453e:	d020      	beq.n	8004582 <_printf_i+0xb2>
 8004540:	2970      	cmp	r1, #112	; 0x70
 8004542:	d1dd      	bne.n	8004500 <_printf_i+0x30>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f043 0320 	orr.w	r3, r3, #32
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	e003      	b.n	8004556 <_printf_i+0x86>
 800454e:	2975      	cmp	r1, #117	; 0x75
 8004550:	d017      	beq.n	8004582 <_printf_i+0xb2>
 8004552:	2978      	cmp	r1, #120	; 0x78
 8004554:	d1d4      	bne.n	8004500 <_printf_i+0x30>
 8004556:	2378      	movs	r3, #120	; 0x78
 8004558:	4865      	ldr	r0, [pc, #404]	; (80046f0 <_printf_i+0x220>)
 800455a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800455e:	e055      	b.n	800460c <_printf_i+0x13c>
 8004560:	6813      	ldr	r3, [r2, #0]
 8004562:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004566:	1d19      	adds	r1, r3, #4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6011      	str	r1, [r2, #0]
 800456c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004570:	2301      	movs	r3, #1
 8004572:	e08c      	b.n	800468e <_printf_i+0x1be>
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800457a:	6011      	str	r1, [r2, #0]
 800457c:	bf18      	it	ne
 800457e:	b21b      	sxthne	r3, r3
 8004580:	e7cf      	b.n	8004522 <_printf_i+0x52>
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	6825      	ldr	r5, [r4, #0]
 8004586:	1d18      	adds	r0, r3, #4
 8004588:	6010      	str	r0, [r2, #0]
 800458a:	0628      	lsls	r0, r5, #24
 800458c:	d501      	bpl.n	8004592 <_printf_i+0xc2>
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	e002      	b.n	8004598 <_printf_i+0xc8>
 8004592:	0668      	lsls	r0, r5, #25
 8004594:	d5fb      	bpl.n	800458e <_printf_i+0xbe>
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	296f      	cmp	r1, #111	; 0x6f
 800459a:	bf14      	ite	ne
 800459c:	220a      	movne	r2, #10
 800459e:	2208      	moveq	r2, #8
 80045a0:	4852      	ldr	r0, [pc, #328]	; (80046ec <_printf_i+0x21c>)
 80045a2:	2100      	movs	r1, #0
 80045a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045a8:	6865      	ldr	r5, [r4, #4]
 80045aa:	2d00      	cmp	r5, #0
 80045ac:	60a5      	str	r5, [r4, #8]
 80045ae:	f2c0 8095 	blt.w	80046dc <_printf_i+0x20c>
 80045b2:	6821      	ldr	r1, [r4, #0]
 80045b4:	f021 0104 	bic.w	r1, r1, #4
 80045b8:	6021      	str	r1, [r4, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d13d      	bne.n	800463a <_printf_i+0x16a>
 80045be:	2d00      	cmp	r5, #0
 80045c0:	f040 808e 	bne.w	80046e0 <_printf_i+0x210>
 80045c4:	4665      	mov	r5, ip
 80045c6:	2a08      	cmp	r2, #8
 80045c8:	d10b      	bne.n	80045e2 <_printf_i+0x112>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	07db      	lsls	r3, r3, #31
 80045ce:	d508      	bpl.n	80045e2 <_printf_i+0x112>
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	6862      	ldr	r2, [r4, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	bfde      	ittt	le
 80045d8:	2330      	movle	r3, #48	; 0x30
 80045da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045e2:	ebac 0305 	sub.w	r3, ip, r5
 80045e6:	6123      	str	r3, [r4, #16]
 80045e8:	f8cd 8000 	str.w	r8, [sp]
 80045ec:	463b      	mov	r3, r7
 80045ee:	aa03      	add	r2, sp, #12
 80045f0:	4621      	mov	r1, r4
 80045f2:	4630      	mov	r0, r6
 80045f4:	f7ff fef6 	bl	80043e4 <_printf_common>
 80045f8:	3001      	adds	r0, #1
 80045fa:	d14d      	bne.n	8004698 <_printf_i+0x1c8>
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	b005      	add	sp, #20
 8004602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004606:	4839      	ldr	r0, [pc, #228]	; (80046ec <_printf_i+0x21c>)
 8004608:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	6821      	ldr	r1, [r4, #0]
 8004610:	1d1d      	adds	r5, r3, #4
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6015      	str	r5, [r2, #0]
 8004616:	060a      	lsls	r2, r1, #24
 8004618:	d50b      	bpl.n	8004632 <_printf_i+0x162>
 800461a:	07ca      	lsls	r2, r1, #31
 800461c:	bf44      	itt	mi
 800461e:	f041 0120 	orrmi.w	r1, r1, #32
 8004622:	6021      	strmi	r1, [r4, #0]
 8004624:	b91b      	cbnz	r3, 800462e <_printf_i+0x15e>
 8004626:	6822      	ldr	r2, [r4, #0]
 8004628:	f022 0220 	bic.w	r2, r2, #32
 800462c:	6022      	str	r2, [r4, #0]
 800462e:	2210      	movs	r2, #16
 8004630:	e7b7      	b.n	80045a2 <_printf_i+0xd2>
 8004632:	064d      	lsls	r5, r1, #25
 8004634:	bf48      	it	mi
 8004636:	b29b      	uxthmi	r3, r3
 8004638:	e7ef      	b.n	800461a <_printf_i+0x14a>
 800463a:	4665      	mov	r5, ip
 800463c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004640:	fb02 3311 	mls	r3, r2, r1, r3
 8004644:	5cc3      	ldrb	r3, [r0, r3]
 8004646:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800464a:	460b      	mov	r3, r1
 800464c:	2900      	cmp	r1, #0
 800464e:	d1f5      	bne.n	800463c <_printf_i+0x16c>
 8004650:	e7b9      	b.n	80045c6 <_printf_i+0xf6>
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	6825      	ldr	r5, [r4, #0]
 8004656:	1d18      	adds	r0, r3, #4
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	6010      	str	r0, [r2, #0]
 800465c:	0628      	lsls	r0, r5, #24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	d501      	bpl.n	8004666 <_printf_i+0x196>
 8004662:	6019      	str	r1, [r3, #0]
 8004664:	e002      	b.n	800466c <_printf_i+0x19c>
 8004666:	066a      	lsls	r2, r5, #25
 8004668:	d5fb      	bpl.n	8004662 <_printf_i+0x192>
 800466a:	8019      	strh	r1, [r3, #0]
 800466c:	2300      	movs	r3, #0
 800466e:	4665      	mov	r5, ip
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	e7b9      	b.n	80045e8 <_printf_i+0x118>
 8004674:	6813      	ldr	r3, [r2, #0]
 8004676:	1d19      	adds	r1, r3, #4
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	681d      	ldr	r5, [r3, #0]
 800467c:	6862      	ldr	r2, [r4, #4]
 800467e:	2100      	movs	r1, #0
 8004680:	4628      	mov	r0, r5
 8004682:	f000 f837 	bl	80046f4 <memchr>
 8004686:	b108      	cbz	r0, 800468c <_printf_i+0x1bc>
 8004688:	1b40      	subs	r0, r0, r5
 800468a:	6060      	str	r0, [r4, #4]
 800468c:	6863      	ldr	r3, [r4, #4]
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	2300      	movs	r3, #0
 8004692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004696:	e7a7      	b.n	80045e8 <_printf_i+0x118>
 8004698:	6923      	ldr	r3, [r4, #16]
 800469a:	462a      	mov	r2, r5
 800469c:	4639      	mov	r1, r7
 800469e:	4630      	mov	r0, r6
 80046a0:	47c0      	blx	r8
 80046a2:	3001      	adds	r0, #1
 80046a4:	d0aa      	beq.n	80045fc <_printf_i+0x12c>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	079b      	lsls	r3, r3, #30
 80046aa:	d413      	bmi.n	80046d4 <_printf_i+0x204>
 80046ac:	68e0      	ldr	r0, [r4, #12]
 80046ae:	9b03      	ldr	r3, [sp, #12]
 80046b0:	4298      	cmp	r0, r3
 80046b2:	bfb8      	it	lt
 80046b4:	4618      	movlt	r0, r3
 80046b6:	e7a3      	b.n	8004600 <_printf_i+0x130>
 80046b8:	2301      	movs	r3, #1
 80046ba:	464a      	mov	r2, r9
 80046bc:	4639      	mov	r1, r7
 80046be:	4630      	mov	r0, r6
 80046c0:	47c0      	blx	r8
 80046c2:	3001      	adds	r0, #1
 80046c4:	d09a      	beq.n	80045fc <_printf_i+0x12c>
 80046c6:	3501      	adds	r5, #1
 80046c8:	68e3      	ldr	r3, [r4, #12]
 80046ca:	9a03      	ldr	r2, [sp, #12]
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	42ab      	cmp	r3, r5
 80046d0:	dcf2      	bgt.n	80046b8 <_printf_i+0x1e8>
 80046d2:	e7eb      	b.n	80046ac <_printf_i+0x1dc>
 80046d4:	2500      	movs	r5, #0
 80046d6:	f104 0919 	add.w	r9, r4, #25
 80046da:	e7f5      	b.n	80046c8 <_printf_i+0x1f8>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ac      	bne.n	800463a <_printf_i+0x16a>
 80046e0:	7803      	ldrb	r3, [r0, #0]
 80046e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046ea:	e76c      	b.n	80045c6 <_printf_i+0xf6>
 80046ec:	080049a5 	.word	0x080049a5
 80046f0:	080049b6 	.word	0x080049b6

080046f4 <memchr>:
 80046f4:	b510      	push	{r4, lr}
 80046f6:	b2c9      	uxtb	r1, r1
 80046f8:	4402      	add	r2, r0
 80046fa:	4290      	cmp	r0, r2
 80046fc:	4603      	mov	r3, r0
 80046fe:	d101      	bne.n	8004704 <memchr+0x10>
 8004700:	2300      	movs	r3, #0
 8004702:	e003      	b.n	800470c <memchr+0x18>
 8004704:	781c      	ldrb	r4, [r3, #0]
 8004706:	3001      	adds	r0, #1
 8004708:	428c      	cmp	r4, r1
 800470a:	d1f6      	bne.n	80046fa <memchr+0x6>
 800470c:	4618      	mov	r0, r3
 800470e:	bd10      	pop	{r4, pc}

08004710 <memcpy>:
 8004710:	b510      	push	{r4, lr}
 8004712:	1e43      	subs	r3, r0, #1
 8004714:	440a      	add	r2, r1
 8004716:	4291      	cmp	r1, r2
 8004718:	d100      	bne.n	800471c <memcpy+0xc>
 800471a:	bd10      	pop	{r4, pc}
 800471c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004724:	e7f7      	b.n	8004716 <memcpy+0x6>

08004726 <memmove>:
 8004726:	4288      	cmp	r0, r1
 8004728:	b510      	push	{r4, lr}
 800472a:	eb01 0302 	add.w	r3, r1, r2
 800472e:	d807      	bhi.n	8004740 <memmove+0x1a>
 8004730:	1e42      	subs	r2, r0, #1
 8004732:	4299      	cmp	r1, r3
 8004734:	d00a      	beq.n	800474c <memmove+0x26>
 8004736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800473a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800473e:	e7f8      	b.n	8004732 <memmove+0xc>
 8004740:	4283      	cmp	r3, r0
 8004742:	d9f5      	bls.n	8004730 <memmove+0xa>
 8004744:	1881      	adds	r1, r0, r2
 8004746:	1ad2      	subs	r2, r2, r3
 8004748:	42d3      	cmn	r3, r2
 800474a:	d100      	bne.n	800474e <memmove+0x28>
 800474c:	bd10      	pop	{r4, pc}
 800474e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004752:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004756:	e7f7      	b.n	8004748 <memmove+0x22>

08004758 <_free_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4605      	mov	r5, r0
 800475c:	2900      	cmp	r1, #0
 800475e:	d043      	beq.n	80047e8 <_free_r+0x90>
 8004760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004764:	1f0c      	subs	r4, r1, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfb8      	it	lt
 800476a:	18e4      	addlt	r4, r4, r3
 800476c:	f000 f8d0 	bl	8004910 <__malloc_lock>
 8004770:	4a1e      	ldr	r2, [pc, #120]	; (80047ec <_free_r+0x94>)
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	4610      	mov	r0, r2
 8004776:	b933      	cbnz	r3, 8004786 <_free_r+0x2e>
 8004778:	6063      	str	r3, [r4, #4]
 800477a:	6014      	str	r4, [r2, #0]
 800477c:	4628      	mov	r0, r5
 800477e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004782:	f000 b8c6 	b.w	8004912 <__malloc_unlock>
 8004786:	42a3      	cmp	r3, r4
 8004788:	d90b      	bls.n	80047a2 <_free_r+0x4a>
 800478a:	6821      	ldr	r1, [r4, #0]
 800478c:	1862      	adds	r2, r4, r1
 800478e:	4293      	cmp	r3, r2
 8004790:	bf01      	itttt	eq
 8004792:	681a      	ldreq	r2, [r3, #0]
 8004794:	685b      	ldreq	r3, [r3, #4]
 8004796:	1852      	addeq	r2, r2, r1
 8004798:	6022      	streq	r2, [r4, #0]
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	6004      	str	r4, [r0, #0]
 800479e:	e7ed      	b.n	800477c <_free_r+0x24>
 80047a0:	4613      	mov	r3, r2
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	b10a      	cbz	r2, 80047aa <_free_r+0x52>
 80047a6:	42a2      	cmp	r2, r4
 80047a8:	d9fa      	bls.n	80047a0 <_free_r+0x48>
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	1858      	adds	r0, r3, r1
 80047ae:	42a0      	cmp	r0, r4
 80047b0:	d10b      	bne.n	80047ca <_free_r+0x72>
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	4401      	add	r1, r0
 80047b6:	1858      	adds	r0, r3, r1
 80047b8:	4282      	cmp	r2, r0
 80047ba:	6019      	str	r1, [r3, #0]
 80047bc:	d1de      	bne.n	800477c <_free_r+0x24>
 80047be:	6810      	ldr	r0, [r2, #0]
 80047c0:	6852      	ldr	r2, [r2, #4]
 80047c2:	4401      	add	r1, r0
 80047c4:	6019      	str	r1, [r3, #0]
 80047c6:	605a      	str	r2, [r3, #4]
 80047c8:	e7d8      	b.n	800477c <_free_r+0x24>
 80047ca:	d902      	bls.n	80047d2 <_free_r+0x7a>
 80047cc:	230c      	movs	r3, #12
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	e7d4      	b.n	800477c <_free_r+0x24>
 80047d2:	6820      	ldr	r0, [r4, #0]
 80047d4:	1821      	adds	r1, r4, r0
 80047d6:	428a      	cmp	r2, r1
 80047d8:	bf01      	itttt	eq
 80047da:	6811      	ldreq	r1, [r2, #0]
 80047dc:	6852      	ldreq	r2, [r2, #4]
 80047de:	1809      	addeq	r1, r1, r0
 80047e0:	6021      	streq	r1, [r4, #0]
 80047e2:	6062      	str	r2, [r4, #4]
 80047e4:	605c      	str	r4, [r3, #4]
 80047e6:	e7c9      	b.n	800477c <_free_r+0x24>
 80047e8:	bd38      	pop	{r3, r4, r5, pc}
 80047ea:	bf00      	nop
 80047ec:	20000090 	.word	0x20000090

080047f0 <_malloc_r>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	1ccd      	adds	r5, r1, #3
 80047f4:	f025 0503 	bic.w	r5, r5, #3
 80047f8:	3508      	adds	r5, #8
 80047fa:	2d0c      	cmp	r5, #12
 80047fc:	bf38      	it	cc
 80047fe:	250c      	movcc	r5, #12
 8004800:	2d00      	cmp	r5, #0
 8004802:	4606      	mov	r6, r0
 8004804:	db01      	blt.n	800480a <_malloc_r+0x1a>
 8004806:	42a9      	cmp	r1, r5
 8004808:	d903      	bls.n	8004812 <_malloc_r+0x22>
 800480a:	230c      	movs	r3, #12
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	2000      	movs	r0, #0
 8004810:	bd70      	pop	{r4, r5, r6, pc}
 8004812:	f000 f87d 	bl	8004910 <__malloc_lock>
 8004816:	4a21      	ldr	r2, [pc, #132]	; (800489c <_malloc_r+0xac>)
 8004818:	6814      	ldr	r4, [r2, #0]
 800481a:	4621      	mov	r1, r4
 800481c:	b991      	cbnz	r1, 8004844 <_malloc_r+0x54>
 800481e:	4c20      	ldr	r4, [pc, #128]	; (80048a0 <_malloc_r+0xb0>)
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	b91b      	cbnz	r3, 800482c <_malloc_r+0x3c>
 8004824:	4630      	mov	r0, r6
 8004826:	f000 f863 	bl	80048f0 <_sbrk_r>
 800482a:	6020      	str	r0, [r4, #0]
 800482c:	4629      	mov	r1, r5
 800482e:	4630      	mov	r0, r6
 8004830:	f000 f85e 	bl	80048f0 <_sbrk_r>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d124      	bne.n	8004882 <_malloc_r+0x92>
 8004838:	230c      	movs	r3, #12
 800483a:	4630      	mov	r0, r6
 800483c:	6033      	str	r3, [r6, #0]
 800483e:	f000 f868 	bl	8004912 <__malloc_unlock>
 8004842:	e7e4      	b.n	800480e <_malloc_r+0x1e>
 8004844:	680b      	ldr	r3, [r1, #0]
 8004846:	1b5b      	subs	r3, r3, r5
 8004848:	d418      	bmi.n	800487c <_malloc_r+0x8c>
 800484a:	2b0b      	cmp	r3, #11
 800484c:	d90f      	bls.n	800486e <_malloc_r+0x7e>
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	18cc      	adds	r4, r1, r3
 8004852:	50cd      	str	r5, [r1, r3]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f85c 	bl	8004912 <__malloc_unlock>
 800485a:	f104 000b 	add.w	r0, r4, #11
 800485e:	1d23      	adds	r3, r4, #4
 8004860:	f020 0007 	bic.w	r0, r0, #7
 8004864:	1ac3      	subs	r3, r0, r3
 8004866:	d0d3      	beq.n	8004810 <_malloc_r+0x20>
 8004868:	425a      	negs	r2, r3
 800486a:	50e2      	str	r2, [r4, r3]
 800486c:	e7d0      	b.n	8004810 <_malloc_r+0x20>
 800486e:	684b      	ldr	r3, [r1, #4]
 8004870:	428c      	cmp	r4, r1
 8004872:	bf16      	itet	ne
 8004874:	6063      	strne	r3, [r4, #4]
 8004876:	6013      	streq	r3, [r2, #0]
 8004878:	460c      	movne	r4, r1
 800487a:	e7eb      	b.n	8004854 <_malloc_r+0x64>
 800487c:	460c      	mov	r4, r1
 800487e:	6849      	ldr	r1, [r1, #4]
 8004880:	e7cc      	b.n	800481c <_malloc_r+0x2c>
 8004882:	1cc4      	adds	r4, r0, #3
 8004884:	f024 0403 	bic.w	r4, r4, #3
 8004888:	42a0      	cmp	r0, r4
 800488a:	d005      	beq.n	8004898 <_malloc_r+0xa8>
 800488c:	1a21      	subs	r1, r4, r0
 800488e:	4630      	mov	r0, r6
 8004890:	f000 f82e 	bl	80048f0 <_sbrk_r>
 8004894:	3001      	adds	r0, #1
 8004896:	d0cf      	beq.n	8004838 <_malloc_r+0x48>
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	e7db      	b.n	8004854 <_malloc_r+0x64>
 800489c:	20000090 	.word	0x20000090
 80048a0:	20000094 	.word	0x20000094

080048a4 <_realloc_r>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	4607      	mov	r7, r0
 80048a8:	4614      	mov	r4, r2
 80048aa:	460e      	mov	r6, r1
 80048ac:	b921      	cbnz	r1, 80048b8 <_realloc_r+0x14>
 80048ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048b2:	4611      	mov	r1, r2
 80048b4:	f7ff bf9c 	b.w	80047f0 <_malloc_r>
 80048b8:	b922      	cbnz	r2, 80048c4 <_realloc_r+0x20>
 80048ba:	f7ff ff4d 	bl	8004758 <_free_r>
 80048be:	4625      	mov	r5, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c4:	f000 f826 	bl	8004914 <_malloc_usable_size_r>
 80048c8:	42a0      	cmp	r0, r4
 80048ca:	d20f      	bcs.n	80048ec <_realloc_r+0x48>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4638      	mov	r0, r7
 80048d0:	f7ff ff8e 	bl	80047f0 <_malloc_r>
 80048d4:	4605      	mov	r5, r0
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d0f2      	beq.n	80048c0 <_realloc_r+0x1c>
 80048da:	4631      	mov	r1, r6
 80048dc:	4622      	mov	r2, r4
 80048de:	f7ff ff17 	bl	8004710 <memcpy>
 80048e2:	4631      	mov	r1, r6
 80048e4:	4638      	mov	r0, r7
 80048e6:	f7ff ff37 	bl	8004758 <_free_r>
 80048ea:	e7e9      	b.n	80048c0 <_realloc_r+0x1c>
 80048ec:	4635      	mov	r5, r6
 80048ee:	e7e7      	b.n	80048c0 <_realloc_r+0x1c>

080048f0 <_sbrk_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	2300      	movs	r3, #0
 80048f4:	4c05      	ldr	r4, [pc, #20]	; (800490c <_sbrk_r+0x1c>)
 80048f6:	4605      	mov	r5, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	f7fc fb28 	bl	8000f50 <_sbrk>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_sbrk_r+0x1a>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	b103      	cbz	r3, 800490a <_sbrk_r+0x1a>
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200002a8 	.word	0x200002a8

08004910 <__malloc_lock>:
 8004910:	4770      	bx	lr

08004912 <__malloc_unlock>:
 8004912:	4770      	bx	lr

08004914 <_malloc_usable_size_r>:
 8004914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004918:	1f18      	subs	r0, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	bfbc      	itt	lt
 800491e:	580b      	ldrlt	r3, [r1, r0]
 8004920:	18c0      	addlt	r0, r0, r3
 8004922:	4770      	bx	lr

08004924 <_init>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr

08004930 <_fini>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr
