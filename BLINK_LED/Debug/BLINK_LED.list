
BLINK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b70  08002b70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b70  08002b70  00012b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08002b84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002b84  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1d9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a9  00000000  00000000  0002b20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002cab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  0002d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014004  00000000  00000000  0002e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090b2  00000000  00000000  000423d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072e04  00000000  00000000  0004b486  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be28a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  000be308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b2c 	.word	0x08002b2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b2c 	.word	0x08002b2c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fcf4 	bl	8000b3c <HAL_Init>

// TIM1->CCR1 = 60000;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f818 	bl	8000188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa30 	bl	80005bc <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f906 	bl	800036c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000160:	f000 f86a 	bl	8000238 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8a6 	bl	80002b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000168:	f000 f8d2 	bl	8000310 <MX_I2C2_Init>
  MX_TIM2_Init();
 800016c:	f000 f9c4 	bl	80004f8 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000174:	4803      	ldr	r0, [pc, #12]	; (8000184 <main+0x38>)
 8000176:	f001 f9c5 	bl	8001504 <HAL_GPIO_TogglePin>
HAL_Delay(200);
 800017a:	20c8      	movs	r0, #200	; 0xc8
 800017c:	f000 fd40 	bl	8000c00 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000180:	e7f6      	b.n	8000170 <main+0x24>
 8000182:	bf00      	nop
 8000184:	40010c00 	.word	0x40010c00

08000188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b094      	sub	sp, #80	; 0x50
 800018c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000192:	2228      	movs	r2, #40	; 0x28
 8000194:	2100      	movs	r1, #0
 8000196:	4618      	mov	r0, r3
 8000198:	f002 fcc0 	bl	8002b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019c:	f107 0314 	add.w	r3, r7, #20
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]
 80001a4:	605a      	str	r2, [r3, #4]
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	60da      	str	r2, [r3, #12]
 80001aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b8:	2301      	movs	r3, #1
 80001ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c6:	2301      	movs	r3, #1
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ca:	2302      	movs	r3, #2
 80001cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001d4:	2300      	movs	r3, #0
 80001d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fad1 	bl	8001784 <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x64>
  {
    Error_Handler();
 80001e8:	f000 fa72 	bl	80006d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fd3c 	bl	8001c84 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000212:	f000 fa5d 	bl	80006d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000216:	2302      	movs	r3, #2
 8000218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f001 feb7 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800022c:	f000 fa50 	bl	80006d0 <Error_Handler>
  }
}
 8000230:	bf00      	nop
 8000232:	3750      	adds	r7, #80	; 0x50
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <MX_ADC1_Init+0x74>)
 800024a:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <MX_ADC1_Init+0x78>)
 800024c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <MX_ADC1_Init+0x74>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000254:	4b15      	ldr	r3, [pc, #84]	; (80002ac <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800025a:	4b14      	ldr	r3, [pc, #80]	; (80002ac <MX_ADC1_Init+0x74>)
 800025c:	2200      	movs	r2, #0
 800025e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_ADC1_Init+0x74>)
 8000262:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000266:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_ADC1_Init+0x74>)
 800026a:	2200      	movs	r2, #0
 800026c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_ADC1_Init+0x74>)
 8000270:	2201      	movs	r2, #1
 8000272:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <MX_ADC1_Init+0x74>)
 8000276:	f000 fce5 	bl	8000c44 <HAL_ADC_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000280:	f000 fa26 	bl	80006d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000284:	2300      	movs	r3, #0
 8000286:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000288:	2301      	movs	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_ADC1_Init+0x74>)
 8000296:	f000 fdad 	bl	8000df4 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002a0:	f000 fa16 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	200000d0 	.word	0x200000d0
 80002b0:	40012400 	.word	0x40012400

080002b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_I2C1_Init+0x50>)
 80002ba:	4a13      	ldr	r2, [pc, #76]	; (8000308 <MX_I2C1_Init+0x54>)
 80002bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_I2C1_Init+0x50>)
 80002c0:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_I2C1_Init+0x58>)
 80002c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_I2C1_Init+0x50>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_I2C1_Init+0x50>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_I2C1_Init+0x50>)
 80002d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <MX_I2C1_Init+0x50>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_I2C1_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_I2C1_Init+0x50>)
 80002f2:	f001 f91f 	bl	8001534 <HAL_I2C_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002fc:	f000 f9e8 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000028 	.word	0x20000028
 8000308:	40005400 	.word	0x40005400
 800030c:	000186a0 	.word	0x000186a0

08000310 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_I2C2_Init+0x50>)
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <MX_I2C2_Init+0x54>)
 8000318:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <MX_I2C2_Init+0x50>)
 800031c:	4a12      	ldr	r2, [pc, #72]	; (8000368 <MX_I2C2_Init+0x58>)
 800031e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_I2C2_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000326:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <MX_I2C2_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <MX_I2C2_Init+0x50>)
 800032e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000332:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000334:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <MX_I2C2_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <MX_I2C2_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000340:	4b07      	ldr	r3, [pc, #28]	; (8000360 <MX_I2C2_Init+0x50>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <MX_I2C2_Init+0x50>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <MX_I2C2_Init+0x50>)
 800034e:	f001 f8f1 	bl	8001534 <HAL_I2C_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000358:	f000 f9ba 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	2000007c 	.word	0x2000007c
 8000364:	40005800 	.word	0x40005800
 8000368:	000186a0 	.word	0x000186a0

0800036c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b096      	sub	sp, #88	; 0x58
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000372:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800038a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
 800039a:	615a      	str	r2, [r3, #20]
 800039c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2220      	movs	r2, #32
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f002 fbb9 	bl	8002b1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003aa:	4b51      	ldr	r3, [pc, #324]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003ac:	4a51      	ldr	r2, [pc, #324]	; (80004f4 <MX_TIM1_Init+0x188>)
 80003ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3200;
 80003b0:	4b4f      	ldr	r3, [pc, #316]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003b2:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80003b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b8:	4b4d      	ldr	r3, [pc, #308]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80003be:	4b4c      	ldr	r3, [pc, #304]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b4a      	ldr	r3, [pc, #296]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003cc:	4b48      	ldr	r3, [pc, #288]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d2:	4b47      	ldr	r3, [pc, #284]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003d8:	4845      	ldr	r0, [pc, #276]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003da:	f001 fe91 	bl	8002100 <HAL_TIM_Base_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80003e4:	f000 f974 	bl	80006d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003f2:	4619      	mov	r1, r3
 80003f4:	483e      	ldr	r0, [pc, #248]	; (80004f0 <MX_TIM1_Init+0x184>)
 80003f6:	f001 ff9f 	bl	8002338 <HAL_TIM_ConfigClockSource>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000400:	f000 f966 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000404:	483a      	ldr	r0, [pc, #232]	; (80004f0 <MX_TIM1_Init+0x184>)
 8000406:	f001 fea6 	bl	8002156 <HAL_TIM_PWM_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000410:	f000 f95e 	bl	80006d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000420:	4619      	mov	r1, r3
 8000422:	4833      	ldr	r0, [pc, #204]	; (80004f0 <MX_TIM1_Init+0x184>)
 8000424:	f002 fac0 	bl	80029a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800042e:	f000 f94f 	bl	80006d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000432:	2360      	movs	r3, #96	; 0x60
 8000434:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800043a:	2300      	movs	r3, #0
 800043c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800043e:	2300      	movs	r3, #0
 8000440:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800044e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	4826      	ldr	r0, [pc, #152]	; (80004f0 <MX_TIM1_Init+0x184>)
 8000458:	f001 fea8 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000462:	f000 f935 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800046a:	2204      	movs	r2, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4820      	ldr	r0, [pc, #128]	; (80004f0 <MX_TIM1_Init+0x184>)
 8000470:	f001 fe9c 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800047a:	f000 f929 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000482:	2208      	movs	r2, #8
 8000484:	4619      	mov	r1, r3
 8000486:	481a      	ldr	r0, [pc, #104]	; (80004f0 <MX_TIM1_Init+0x184>)
 8000488:	f001 fe90 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000492:	f000 f91d 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049a:	220c      	movs	r2, #12
 800049c:	4619      	mov	r1, r3
 800049e:	4814      	ldr	r0, [pc, #80]	; (80004f0 <MX_TIM1_Init+0x184>)
 80004a0:	f001 fe84 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80004aa:	f000 f911 	bl	80006d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	4619      	mov	r1, r3
 80004d0:	4807      	ldr	r0, [pc, #28]	; (80004f0 <MX_TIM1_Init+0x184>)
 80004d2:	f002 faad 	bl	8002a30 <HAL_TIMEx_ConfigBreakDeadTime>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80004dc:	f000 f8f8 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <MX_TIM1_Init+0x184>)
 80004e2:	f000 fa27 	bl	8000934 <HAL_TIM_MspPostInit>

}
 80004e6:	bf00      	nop
 80004e8:	3758      	adds	r7, #88	; 0x58
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000100 	.word	0x20000100
 80004f4:	40012c00 	.word	0x40012c00

080004f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fe:	f107 0320 	add.w	r3, r7, #32
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <MX_TIM2_Init+0xc0>)
 800051c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000522:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <MX_TIM2_Init+0xc0>)
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <MX_TIM2_Init+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800052e:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <MX_TIM2_Init+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <MX_TIM2_Init+0xc0>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_TIM2_Init+0xc0>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000540:	481d      	ldr	r0, [pc, #116]	; (80005b8 <MX_TIM2_Init+0xc0>)
 8000542:	f001 fe08 	bl	8002156 <HAL_TIM_PWM_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800054c:	f000 f8c0 	bl	80006d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000554:	2300      	movs	r3, #0
 8000556:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000558:	f107 0320 	add.w	r3, r7, #32
 800055c:	4619      	mov	r1, r3
 800055e:	4816      	ldr	r0, [pc, #88]	; (80005b8 <MX_TIM2_Init+0xc0>)
 8000560:	f002 fa22 	bl	80029a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800056a:	f000 f8b1 	bl	80006d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800056e:	2360      	movs	r3, #96	; 0x60
 8000570:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	4619      	mov	r1, r3
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_TIM2_Init+0xc0>)
 8000586:	f001 fe11 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000590:	f000 f89e 	bl	80006d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2204      	movs	r2, #4
 8000598:	4619      	mov	r1, r3
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <MX_TIM2_Init+0xc0>)
 800059c:	f001 fe06 	bl	80021ac <HAL_TIM_PWM_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80005a6:	f000 f893 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005aa:	4803      	ldr	r0, [pc, #12]	; (80005b8 <MX_TIM2_Init+0xc0>)
 80005ac:	f000 f9c2 	bl	8000934 <HAL_TIM_MspPostInit>

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	; 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000140 	.word	0x20000140

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d0:	4b3b      	ldr	r3, [pc, #236]	; (80006c0 <MX_GPIO_Init+0x104>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a3a      	ldr	r2, [pc, #232]	; (80006c0 <MX_GPIO_Init+0x104>)
 80005d6:	f043 0310 	orr.w	r3, r3, #16
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <MX_GPIO_Init+0x104>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0310 	and.w	r3, r3, #16
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e8:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <MX_GPIO_Init+0x104>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a34      	ldr	r2, [pc, #208]	; (80006c0 <MX_GPIO_Init+0x104>)
 80005ee:	f043 0320 	orr.w	r3, r3, #32
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <MX_GPIO_Init+0x104>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0320 	and.w	r3, r3, #32
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <MX_GPIO_Init+0x104>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a2e      	ldr	r2, [pc, #184]	; (80006c0 <MX_GPIO_Init+0x104>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <MX_GPIO_Init+0x104>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <MX_GPIO_Init+0x104>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <MX_GPIO_Init+0x104>)
 800061e:	f043 0308 	orr.w	r3, r3, #8
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <MX_GPIO_Init+0x104>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0308 	and.w	r3, r3, #8
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin 
 8000630:	2200      	movs	r2, #0
 8000632:	f24f 3130 	movw	r1, #62256	; 0xf330
 8000636:	4823      	ldr	r0, [pc, #140]	; (80006c4 <MX_GPIO_Init+0x108>)
 8000638:	f000 ff4c 	bl	80014d4 <HAL_GPIO_WritePin>
                          |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Output_5_GPIO_Port, Output_5_Pin, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000642:	4821      	ldr	r0, [pc, #132]	; (80006c8 <MX_GPIO_Init+0x10c>)
 8000644:	f000 ff46 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Input_0_Pin Input_1_Pin Input_2_Pin */
  GPIO_InitStruct.Pin = Input_0_Pin|Input_1_Pin|Input_2_Pin;
 8000648:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800064c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4619      	mov	r1, r3
 800065c:	481b      	ldr	r0, [pc, #108]	; (80006cc <MX_GPIO_Init+0x110>)
 800065e:	f000 fddf 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_3_Pin Input_4_Pin */
  GPIO_InitStruct.Pin = Input_3_Pin|Input_4_Pin;
 8000662:	2306      	movs	r3, #6
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4619      	mov	r1, r3
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <MX_GPIO_Init+0x108>)
 8000676:	f000 fdd3 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : Output_9_Pin Output_8_Pin Output_7_Pin Output_6_Pin 
                           Output_4_Pin Output_3_Pin Output_2_Pin Output_1_Pin */
  GPIO_InitStruct.Pin = Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin 
 800067a:	f24f 3330 	movw	r3, #62256	; 0xf330
 800067e:	613b      	str	r3, [r7, #16]
                          |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4619      	mov	r1, r3
 8000692:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_GPIO_Init+0x108>)
 8000694:	f000 fdc4 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : Output_5_Pin */
  GPIO_InitStruct.Pin = Output_5_Pin;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2302      	movs	r3, #2
 80006a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Output_5_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_GPIO_Init+0x10c>)
 80006b2:	f000 fdb5 	bl	8001220 <HAL_GPIO_Init>

}
 80006b6:	bf00      	nop
 80006b8:	3720      	adds	r7, #32
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	40010800 	.word	0x40010800
 80006cc:	40011000 	.word	0x40011000

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <HAL_MspInit+0x5c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a14      	ldr	r2, [pc, #80]	; (8000738 <HAL_MspInit+0x5c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_MspInit+0x5c>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x5c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_MspInit+0x5c>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x5c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_MspInit+0x60>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_MspInit+0x60>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000
 800073c:	40010000 	.word	0x40010000

08000740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0318 	add.w	r3, r7, #24
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a1f      	ldr	r2, [pc, #124]	; (80007d8 <HAL_ADC_MspInit+0x98>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d137      	bne.n	80007d0 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a17      	ldr	r2, [pc, #92]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a11      	ldr	r2, [pc, #68]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_ADC_MspInit+0x9c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80007a8:	23ff      	movs	r3, #255	; 0xff
 80007aa:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ac:	2303      	movs	r3, #3
 80007ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	4619      	mov	r1, r3
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <HAL_ADC_MspInit+0xa0>)
 80007b8:	f000 fd32 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c0:	2303      	movs	r3, #3
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4806      	ldr	r0, [pc, #24]	; (80007e4 <HAL_ADC_MspInit+0xa4>)
 80007cc:	f000 fd28 	bl	8001220 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40012400 	.word	0x40012400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00

080007e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	; 0x28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <HAL_I2C_MspInit+0xc8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d124      	bne.n	8000852 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a29      	ldr	r2, [pc, #164]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000820:	23c0      	movs	r3, #192	; 0xc0
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000824:	2312      	movs	r3, #18
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4619      	mov	r1, r3
 8000832:	4821      	ldr	r0, [pc, #132]	; (80008b8 <HAL_I2C_MspInit+0xd0>)
 8000834:	f000 fcf4 	bl	8001220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 800083e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000842:	61d3      	str	r3, [r2, #28]
 8000844:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 8000846:	69db      	ldr	r3, [r3, #28]
 8000848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000850:	e029      	b.n	80008a6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a19      	ldr	r2, [pc, #100]	; (80008bc <HAL_I2C_MspInit+0xd4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d124      	bne.n	80008a6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085c:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 8000862:	f043 0308 	orr.w	r3, r3, #8
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0308 	and.w	r3, r3, #8
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000874:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800087a:	2312      	movs	r3, #18
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	4619      	mov	r1, r3
 8000888:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_I2C_MspInit+0xd0>)
 800088a:	f000 fcc9 	bl	8001220 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_I2C_MspInit+0xcc>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	; 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40005400 	.word	0x40005400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	40005800 	.word	0x40005800

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_TIM_Base_MspInit+0x34>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d10b      	bne.n	80008ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_TIM_Base_MspInit+0x38>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_TIM_Base_MspInit+0x38>)
 80008d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_TIM_Base_MspInit+0x38>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40012c00 	.word	0x40012c00
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800090c:	d10b      	bne.n	8000926 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_TIM_PWM_MspInit+0x34>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_TIM_PWM_MspInit+0x34>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	61d3      	str	r3, [r2, #28]
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_TIM_PWM_MspInit+0x34>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a34      	ldr	r2, [pc, #208]	; (8000a20 <HAL_TIM_MspPostInit+0xec>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d119      	bne.n	8000988 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800096c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4829      	ldr	r0, [pc, #164]	; (8000a28 <HAL_TIM_MspPostInit+0xf4>)
 8000982:	f000 fc4d 	bl	8001220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000986:	e047      	b.n	8000a18 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000990:	d142      	bne.n	8000a18 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6193      	str	r3, [r2, #24]
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a1d      	ldr	r2, [pc, #116]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <HAL_TIM_MspPostInit+0xf0>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4814      	ldr	r0, [pc, #80]	; (8000a28 <HAL_TIM_MspPostInit+0xf4>)
 80009d8:	f000 fc22 	bl	8001220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009dc:	2308      	movs	r3, #8
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <HAL_TIM_MspPostInit+0xf8>)
 80009f0:	f000 fc16 	bl	8001220 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_TIM_MspPostInit+0xfc>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_TIM_MspPostInit+0xfc>)
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	6053      	str	r3, [r2, #4]
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	40010000 	.word	0x40010000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <HardFault_Handler+0x4>

08000a46 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <BusFault_Handler+0x4>

08000a52 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <UsageFault_Handler+0x4>

08000a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f8a2 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <SystemInit+0x5c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <SystemInit+0x5c>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <SystemInit+0x5c>)
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4911      	ldr	r1, [pc, #68]	; (8000ae4 <SystemInit+0x5c>)
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <SystemInit+0x60>)
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <SystemInit+0x5c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <SystemInit+0x5c>)
 8000aaa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ab2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <SystemInit+0x5c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <SystemInit+0x5c>)
 8000aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000abe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SystemInit+0x5c>)
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <SystemInit+0x5c>)
 8000ac6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000aca:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <SystemInit+0x5c>)
 8000ace:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ad2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SystemInit+0x64>)
 8000ad6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ada:	609a      	str	r2, [r3, #8]
#endif 
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	f8ff0000 	.word	0xf8ff0000
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000af0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000af2:	e003      	b.n	8000afc <LoopCopyDataInit>

08000af4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000af6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000af8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000afa:	3104      	adds	r1, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b04:	d3f6      	bcc.n	8000af4 <CopyDataInit>
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b08:	e002      	b.n	8000b10 <LoopFillZerobss>

08000b0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b0c:	f842 3b04 	str.w	r3, [r2], #4

08000b10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b14:	d3f9      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffb7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f001 ffdb 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b1e:	f7ff fb15 	bl	800014c <main>
  bx lr
 8000b22:	4770      	bx	lr
  ldr r3, =_sidata
 8000b24:	08002b78 	.word	0x08002b78
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b34:	20000184 	.word	0x20000184

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 fb33 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fdc0 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fb3d 	bl	8001206 <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 fb13 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <HAL_IncTick+0x1c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x20>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <HAL_IncTick+0x20>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000180 	.word	0x20000180

08000bec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <HAL_GetTick+0x10>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000180 	.word	0x20000180

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff fff0 	bl	8000bec <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_Delay+0x40>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffe0 	bl	8000bec <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e0be      	b.n	8000de4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d109      	bne.n	8000c88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fd5c 	bl	8000740 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 f9ab 	bl	8000fe4 <ADC_ConversionStop_Disable>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 8099 	bne.w	8000dd2 <HAL_ADC_Init+0x18e>
 8000ca0:	7dfb      	ldrb	r3, [r7, #23]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f040 8095 	bne.w	8000dd2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cb0:	f023 0302 	bic.w	r3, r3, #2
 8000cb4:	f043 0202 	orr.w	r2, r3, #2
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	7b1b      	ldrb	r3, [r3, #12]
 8000cca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ccc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cdc:	d003      	beq.n	8000ce6 <HAL_ADC_Init+0xa2>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d102      	bne.n	8000cec <HAL_ADC_Init+0xa8>
 8000ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cea:	e000      	b.n	8000cee <HAL_ADC_Init+0xaa>
 8000cec:	2300      	movs	r3, #0
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7d1b      	ldrb	r3, [r3, #20]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d119      	bne.n	8000d30 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7b1b      	ldrb	r3, [r3, #12]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d109      	bne.n	8000d18 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	035a      	lsls	r2, r3, #13
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e00b      	b.n	8000d30 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f043 0220 	orr.w	r2, r3, #32
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d28:	f043 0201 	orr.w	r2, r3, #1
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	4b28      	ldr	r3, [pc, #160]	; (8000dec <HAL_ADC_Init+0x1a8>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	68b9      	ldr	r1, [r7, #8]
 8000d54:	430b      	orrs	r3, r1
 8000d56:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d60:	d003      	beq.n	8000d6a <HAL_ADC_Init+0x126>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d104      	bne.n	8000d74 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	051b      	lsls	r3, r3, #20
 8000d72:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_ADC_Init+0x1ac>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d10b      	bne.n	8000db0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	f023 0303 	bic.w	r3, r3, #3
 8000da6:	f043 0201 	orr.w	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dae:	e018      	b.n	8000de2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	f023 0312 	bic.w	r3, r3, #18
 8000db8:	f043 0210 	orr.w	r2, r3, #16
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	f043 0201 	orr.w	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dd0:	e007      	b.n	8000de2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	f043 0210 	orr.w	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	ffe1f7fd 	.word	0xffe1f7fd
 8000df0:	ff1f0efe 	.word	0xff1f0efe

08000df4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x20>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e0dc      	b.n	8000fce <HAL_ADC_ConfigChannel+0x1da>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d81c      	bhi.n	8000e5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	3b05      	subs	r3, #5
 8000e36:	221f      	movs	r2, #31
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4019      	ands	r1, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b05      	subs	r3, #5
 8000e50:	fa00 f203 	lsl.w	r2, r0, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e5c:	e03c      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b0c      	cmp	r3, #12
 8000e64:	d81c      	bhi.n	8000ea0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	3b23      	subs	r3, #35	; 0x23
 8000e78:	221f      	movs	r2, #31
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	4019      	ands	r1, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	3b23      	subs	r3, #35	; 0x23
 8000e92:	fa00 f203 	lsl.w	r2, r0, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e9e:	e01b      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	3b41      	subs	r3, #65	; 0x41
 8000eb2:	221f      	movs	r2, #31
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4019      	ands	r1, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b41      	subs	r3, #65	; 0x41
 8000ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b09      	cmp	r3, #9
 8000ede:	d91c      	bls.n	8000f1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68d9      	ldr	r1, [r3, #12]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	3b1e      	subs	r3, #30
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4019      	ands	r1, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b1e      	subs	r3, #30
 8000f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	e019      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6919      	ldr	r1, [r3, #16]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4019      	ands	r1, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6898      	ldr	r0, [r3, #8]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	fa00 f203 	lsl.w	r2, r0, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d003      	beq.n	8000f5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5a:	2b11      	cmp	r3, #17
 8000f5c:	d132      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d125      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d126      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f84:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d11a      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_ADC_ConfigChannel+0x1e8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	0c9a      	lsrs	r2, r3, #18
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa4:	e002      	b.n	8000fac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <HAL_ADC_ConfigChannel+0x1b2>
 8000fb2:	e007      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	f043 0220 	orr.w	r2, r3, #32
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40012400 	.word	0x40012400
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	431bde83 	.word	0x431bde83

08000fe4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d127      	bne.n	800104e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0201 	bic.w	r2, r2, #1
 800100c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800100e:	f7ff fded 	bl	8000bec <HAL_GetTick>
 8001012:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001014:	e014      	b.n	8001040 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001016:	f7ff fde9 	bl	8000bec <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d90d      	bls.n	8001040 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	f043 0210 	orr.w	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e007      	b.n	8001050 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b01      	cmp	r3, #1
 800104c:	d0e3      	beq.n	8001016 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff90 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff49 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff5e 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff90 	bl	8001110 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffb0 	bl	8001174 <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b08b      	sub	sp, #44	; 0x2c
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001232:	e127      	b.n	8001484 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001234:	2201      	movs	r2, #1
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8116 	bne.w	800147e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b12      	cmp	r3, #18
 8001258:	d034      	beq.n	80012c4 <HAL_GPIO_Init+0xa4>
 800125a:	2b12      	cmp	r3, #18
 800125c:	d80d      	bhi.n	800127a <HAL_GPIO_Init+0x5a>
 800125e:	2b02      	cmp	r3, #2
 8001260:	d02b      	beq.n	80012ba <HAL_GPIO_Init+0x9a>
 8001262:	2b02      	cmp	r3, #2
 8001264:	d804      	bhi.n	8001270 <HAL_GPIO_Init+0x50>
 8001266:	2b00      	cmp	r3, #0
 8001268:	d031      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d01c      	beq.n	80012a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126e:	e048      	b.n	8001302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001270:	2b03      	cmp	r3, #3
 8001272:	d043      	beq.n	80012fc <HAL_GPIO_Init+0xdc>
 8001274:	2b11      	cmp	r3, #17
 8001276:	d01b      	beq.n	80012b0 <HAL_GPIO_Init+0x90>
          break;
 8001278:	e043      	b.n	8001302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800127a:	4a89      	ldr	r2, [pc, #548]	; (80014a0 <HAL_GPIO_Init+0x280>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d026      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 8001280:	4a87      	ldr	r2, [pc, #540]	; (80014a0 <HAL_GPIO_Init+0x280>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d806      	bhi.n	8001294 <HAL_GPIO_Init+0x74>
 8001286:	4a87      	ldr	r2, [pc, #540]	; (80014a4 <HAL_GPIO_Init+0x284>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d020      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 800128c:	4a86      	ldr	r2, [pc, #536]	; (80014a8 <HAL_GPIO_Init+0x288>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d01d      	beq.n	80012ce <HAL_GPIO_Init+0xae>
          break;
 8001292:	e036      	b.n	8001302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001294:	4a85      	ldr	r2, [pc, #532]	; (80014ac <HAL_GPIO_Init+0x28c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d019      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 800129a:	4a85      	ldr	r2, [pc, #532]	; (80014b0 <HAL_GPIO_Init+0x290>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d016      	beq.n	80012ce <HAL_GPIO_Init+0xae>
 80012a0:	4a84      	ldr	r2, [pc, #528]	; (80014b4 <HAL_GPIO_Init+0x294>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0xae>
          break;
 80012a6:	e02c      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e028      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	3304      	adds	r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e023      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	3308      	adds	r3, #8
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e01e      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	330c      	adds	r3, #12
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e019      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012d6:	2304      	movs	r3, #4
 80012d8:	623b      	str	r3, [r7, #32]
          break;
 80012da:	e012      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d105      	bne.n	80012f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e4:	2308      	movs	r3, #8
 80012e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69fa      	ldr	r2, [r7, #28]
 80012ec:	611a      	str	r2, [r3, #16]
          break;
 80012ee:	e008      	b.n	8001302 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f0:	2308      	movs	r3, #8
 80012f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69fa      	ldr	r2, [r7, #28]
 80012f8:	615a      	str	r2, [r3, #20]
          break;
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2bff      	cmp	r3, #255	; 0xff
 8001306:	d801      	bhi.n	800130c <HAL_GPIO_Init+0xec>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	e001      	b.n	8001310 <HAL_GPIO_Init+0xf0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3304      	adds	r3, #4
 8001310:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2bff      	cmp	r3, #255	; 0xff
 8001316:	d802      	bhi.n	800131e <HAL_GPIO_Init+0xfe>
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x104>
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	3b08      	subs	r3, #8
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	210f      	movs	r1, #15
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	401a      	ands	r2, r3
 8001336:	6a39      	ldr	r1, [r7, #32]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	431a      	orrs	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8096 	beq.w	800147e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_GPIO_Init+0x298>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_GPIO_Init+0x298>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6193      	str	r3, [r2, #24]
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_GPIO_Init+0x298>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800136a:	4a54      	ldr	r2, [pc, #336]	; (80014bc <HAL_GPIO_Init+0x29c>)
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x2a0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x19e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4a      	ldr	r2, [pc, #296]	; (80014c4 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x19a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_GPIO_Init+0x2a8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x196>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	; (80014cc <HAL_GPIO_Init+0x2ac>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x192>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x1a0>
 80013be:	2300      	movs	r3, #0
 80013c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d0:	493a      	ldr	r1, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x29c>)
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ea:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4938      	ldr	r1, [pc, #224]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f8:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	4933      	ldr	r1, [pc, #204]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001402:	4013      	ands	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	492e      	ldr	r1, [pc, #184]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	4929      	ldr	r1, [pc, #164]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800142a:	4013      	ands	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800143a:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	43db      	mvns	r3, r3
 8001450:	491f      	ldr	r1, [pc, #124]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001452:	4013      	ands	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	491a      	ldr	r1, [pc, #104]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	60cb      	str	r3, [r1, #12]
 800146e:	e006      	b.n	800147e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	43db      	mvns	r3, r3
 8001478:	4915      	ldr	r1, [pc, #84]	; (80014d0 <HAL_GPIO_Init+0x2b0>)
 800147a:	4013      	ands	r3, r2
 800147c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	3301      	adds	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	fa22 f303 	lsr.w	r3, r2, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f47f aed0 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 8001494:	bf00      	nop
 8001496:	372c      	adds	r7, #44	; 0x2c
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	10210000 	.word	0x10210000
 80014a4:	10110000 	.word	0x10110000
 80014a8:	10120000 	.word	0x10120000
 80014ac:	10310000 	.word	0x10310000
 80014b0:	10320000 	.word	0x10320000
 80014b4:	10220000 	.word	0x10220000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40011400 	.word	0x40011400
 80014d0:	40010400 	.word	0x40010400

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151c:	887a      	ldrh	r2, [r7, #2]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001522:	e002      	b.n	800152a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	611a      	str	r2, [r3, #16]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e10f      	b.n	8001766 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff f944 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001578:	f000 fcda 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a7b      	ldr	r2, [pc, #492]	; (8001770 <HAL_I2C_Init+0x23c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d807      	bhi.n	8001598 <HAL_I2C_Init+0x64>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a7a      	ldr	r2, [pc, #488]	; (8001774 <HAL_I2C_Init+0x240>)
 800158c:	4293      	cmp	r3, r2
 800158e:	bf94      	ite	ls
 8001590:	2301      	movls	r3, #1
 8001592:	2300      	movhi	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	e006      	b.n	80015a6 <HAL_I2C_Init+0x72>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4a77      	ldr	r2, [pc, #476]	; (8001778 <HAL_I2C_Init+0x244>)
 800159c:	4293      	cmp	r3, r2
 800159e:	bf94      	ite	ls
 80015a0:	2301      	movls	r3, #1
 80015a2:	2300      	movhi	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0db      	b.n	8001766 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a72      	ldr	r2, [pc, #456]	; (800177c <HAL_I2C_Init+0x248>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	0c9b      	lsrs	r3, r3, #18
 80015b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a64      	ldr	r2, [pc, #400]	; (8001770 <HAL_I2C_Init+0x23c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d802      	bhi.n	80015e8 <HAL_I2C_Init+0xb4>
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	3301      	adds	r3, #1
 80015e6:	e009      	b.n	80015fc <HAL_I2C_Init+0xc8>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4a63      	ldr	r2, [pc, #396]	; (8001780 <HAL_I2C_Init+0x24c>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	430b      	orrs	r3, r1
 8001602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800160e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4956      	ldr	r1, [pc, #344]	; (8001770 <HAL_I2C_Init+0x23c>)
 8001618:	428b      	cmp	r3, r1
 800161a:	d80d      	bhi.n	8001638 <HAL_I2C_Init+0x104>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e59      	subs	r1, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fbb1 f3f3 	udiv	r3, r1, r3
 800162a:	3301      	adds	r3, #1
 800162c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001630:	2b04      	cmp	r3, #4
 8001632:	bf38      	it	cc
 8001634:	2304      	movcc	r3, #4
 8001636:	e04f      	b.n	80016d8 <HAL_I2C_Init+0x1a4>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d111      	bne.n	8001664 <HAL_I2C_Init+0x130>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	440b      	add	r3, r1
 800164e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf0c      	ite	eq
 800165c:	2301      	moveq	r3, #1
 800165e:	2300      	movne	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	e012      	b.n	800168a <HAL_I2C_Init+0x156>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e58      	subs	r0, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	0099      	lsls	r1, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	fbb0 f3f3 	udiv	r3, r0, r3
 800167a:	3301      	adds	r3, #1
 800167c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Init+0x15e>
 800168e:	2301      	movs	r3, #1
 8001690:	e022      	b.n	80016d8 <HAL_I2C_Init+0x1a4>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10e      	bne.n	80016b8 <HAL_I2C_Init+0x184>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1e58      	subs	r0, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6859      	ldr	r1, [r3, #4]
 80016a2:	460b      	mov	r3, r1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	440b      	add	r3, r1
 80016a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b6:	e00f      	b.n	80016d8 <HAL_I2C_Init+0x1a4>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1e58      	subs	r0, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	0099      	lsls	r1, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	6809      	ldr	r1, [r1, #0]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69da      	ldr	r2, [r3, #28]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001706:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6911      	ldr	r1, [r2, #16]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68d2      	ldr	r2, [r2, #12]
 8001712:	4311      	orrs	r1, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	430b      	orrs	r3, r1
 800171a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2220      	movs	r2, #32
 8001752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	000186a0 	.word	0x000186a0
 8001774:	001e847f 	.word	0x001e847f
 8001778:	003d08ff 	.word	0x003d08ff
 800177c:	431bde83 	.word	0x431bde83
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e26c      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8087 	beq.w	80018b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a4:	4b92      	ldr	r3, [pc, #584]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d00c      	beq.n	80017ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b0:	4b8f      	ldr	r3, [pc, #572]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d112      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
 80017bc:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c8:	d10b      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4b89      	ldr	r3, [pc, #548]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d06c      	beq.n	80018b0 <HAL_RCC_OscConfig+0x12c>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d168      	bne.n	80018b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e246      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x76>
 80017ec:	4b80      	ldr	r3, [pc, #512]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a7f      	ldr	r2, [pc, #508]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e02e      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x98>
 8001802:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7a      	ldr	r2, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b78      	ldr	r3, [pc, #480]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a77      	ldr	r2, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e01d      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0xbc>
 8001826:	4b72      	ldr	r3, [pc, #456]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a71      	ldr	r2, [pc, #452]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b6f      	ldr	r3, [pc, #444]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6e      	ldr	r2, [pc, #440]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xd4>
 8001840:	4b6b      	ldr	r3, [pc, #428]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a6a      	ldr	r2, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a67      	ldr	r2, [pc, #412]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f9c4 	bl	8000bec <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff f9c0 	bl	8000bec <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e1fa      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b5d      	ldr	r3, [pc, #372]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0xe4>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff f9b0 	bl	8000bec <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff f9ac 	bl	8000bec <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1e6      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	4b53      	ldr	r3, [pc, #332]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x10c>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d063      	beq.n	8001986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018be:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d11c      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
 80018d6:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d116      	bne.n	8001910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	4b43      	ldr	r3, [pc, #268]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e1ba      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4939      	ldr	r1, [pc, #228]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	e03a      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff f965 	bl	8000bec <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001926:	f7ff f961 	bl	8000bec <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e19b      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4927      	ldr	r1, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_RCC_OscConfig+0x270>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f944 	bl	8000bec <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001968:	f7ff f940 	bl	8000bec <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e17a      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d03a      	beq.n	8001a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d019      	beq.n	80019ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7ff f924 	bl	8000bec <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff f920 	bl	8000bec <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e15a      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 fac6 	bl	8001f58 <RCC_Delay>
 80019cc:	e01c      	b.n	8001a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d4:	f7ff f90a 	bl	8000bec <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019da:	e00f      	b.n	80019fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff f906 	bl	8000bec <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d908      	bls.n	80019fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e140      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	42420000 	.word	0x42420000
 80019f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	4b9e      	ldr	r3, [pc, #632]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e9      	bne.n	80019dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a6 	beq.w	8001b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b97      	ldr	r3, [pc, #604]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10d      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	4b94      	ldr	r3, [pc, #592]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a93      	ldr	r2, [pc, #588]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b91      	ldr	r3, [pc, #580]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b8e      	ldr	r3, [pc, #568]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b8b      	ldr	r3, [pc, #556]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a8a      	ldr	r2, [pc, #552]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f8c7 	bl	8000bec <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff f8c3 	bl	8000bec <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b64      	cmp	r3, #100	; 0x64
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0fd      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x312>
 8001a88:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4a7a      	ldr	r2, [pc, #488]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6213      	str	r3, [r2, #32]
 8001a94:	e02d      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x334>
 8001a9e:	4b76      	ldr	r3, [pc, #472]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a75      	ldr	r2, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	6213      	str	r3, [r2, #32]
 8001ab6:	e01c      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_OscConfig+0x356>
 8001ac0:	4b6d      	ldr	r3, [pc, #436]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a6c      	ldr	r2, [pc, #432]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	f043 0304 	orr.w	r3, r3, #4
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4a69      	ldr	r2, [pc, #420]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6213      	str	r3, [r2, #32]
 8001ad8:	e00b      	b.n	8001af2 <HAL_RCC_OscConfig+0x36e>
 8001ada:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a66      	ldr	r2, [pc, #408]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ae0:	f023 0301 	bic.w	r3, r3, #1
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b64      	ldr	r3, [pc, #400]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a63      	ldr	r2, [pc, #396]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	f023 0304 	bic.w	r3, r3, #4
 8001af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d015      	beq.n	8001b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f877 	bl	8000bec <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f873 	bl	8000bec <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e0ab      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ee      	beq.n	8001b02 <HAL_RCC_OscConfig+0x37e>
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f861 	bl	8000bec <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f85d 	bl	8000bec <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e095      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ee      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b50:	7dfb      	ldrb	r3, [r7, #23]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b56:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a47      	ldr	r2, [pc, #284]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8081 	beq.w	8001c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d061      	beq.n	8001c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d146      	bne.n	8001c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b80:	4b3f      	ldr	r3, [pc, #252]	; (8001c80 <HAL_RCC_OscConfig+0x4fc>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff f831 	bl	8000bec <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f82d 	bl	8000bec <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e067      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f0      	bne.n	8001b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	492d      	ldr	r1, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc8:	4b2b      	ldr	r3, [pc, #172]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a19      	ldr	r1, [r3, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	4927      	ldr	r1, [pc, #156]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x4fc>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff f801 	bl	8000bec <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7fe fffd 	bl	8000bec <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e037      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x46a>
 8001c0c:	e02f      	b.n	8001c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <HAL_RCC_OscConfig+0x4fc>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe ffea 	bl	8000bec <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe ffe6 	bl	8000bec <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e020      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x498>
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e013      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	42420060 	.word	0x42420060

08001c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0d0      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d910      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 0207 	bic.w	r2, r3, #7
 8001cae:	4965      	ldr	r1, [pc, #404]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b8      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce0:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	494d      	ldr	r1, [pc, #308]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d040      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d115      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e07f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b41      	ldr	r3, [pc, #260]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e073      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e06b      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d62:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f023 0203 	bic.w	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4936      	ldr	r1, [pc, #216]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7fe ff3a 	bl	8000bec <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7fe ff36 	bl	8000bec <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e053      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 020c 	and.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1eb      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d210      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4922      	ldr	r1, [pc, #136]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e032      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4916      	ldr	r1, [pc, #88]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	490e      	ldr	r1, [pc, #56]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e12:	f000 f821 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	fa21 f303 	lsr.w	r3, r1, r3
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1cc>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1d0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fe98 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	08002b58 	.word	0x08002b58
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e58:	b490      	push	{r4, r7}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e5e:	4b2a      	ldr	r3, [pc, #168]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e60:	1d3c      	adds	r4, r7, #4
 8001e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e6a:	881b      	ldrh	r3, [r3, #0]
 8001e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x40>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x46>
 8001e96:	e02d      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e9a:	623b      	str	r3, [r7, #32]
      break;
 8001e9c:	e02d      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	0c9b      	lsrs	r3, r3, #18
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eaa:	4413      	add	r3, r2
 8001eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d013      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0c5b      	lsrs	r3, r3, #17
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001eca:	4413      	add	r3, r2
 8001ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed6:	fb02 f203 	mul.w	r2, r2, r3
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	e004      	b.n	8001eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ee8:	fb02 f303 	mul.w	r3, r2, r3
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	623b      	str	r3, [r7, #32]
      break;
 8001ef2:	e002      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef6:	623b      	str	r3, [r7, #32]
      break;
 8001ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efa:	6a3b      	ldr	r3, [r7, #32]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc90      	pop	{r4, r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	08002b44 	.word	0x08002b44
 8001f0c:	08002b54 	.word	0x08002b54
 8001f10:	40021000 	.word	0x40021000
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	003d0900 	.word	0x003d0900

08001f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff2 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08002b68 	.word	0x08002b68

08001f58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <RCC_Delay+0x34>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <RCC_Delay+0x38>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0a5b      	lsrs	r3, r3, #9
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f74:	bf00      	nop
  }
  while (Delay --);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1e5a      	subs	r2, r3, #1
 8001f7a:	60fa      	str	r2, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f9      	bne.n	8001f74 <RCC_Delay+0x1c>
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	10624dd3 	.word	0x10624dd3

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07d      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fca:	61d3      	str	r3, [r2, #28]
 8001fcc:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d118      	bne.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe8:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a42      	ldr	r2, [pc, #264]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff4:	f7fe fdfa 	bl	8000bec <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	e008      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffc:	f7fe fdf6 	bl	8000bec <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	; 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e06d      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800201a:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002022:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02e      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d027      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002040:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002042:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002048:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800204e:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d014      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7fe fdc5 	bl	8000bec <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7fe fdc1 	bl	8000bec <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e036      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ee      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4917      	ldr	r1, [pc, #92]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002096:	4313      	orrs	r3, r2
 8002098:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800209a:	7dfb      	ldrb	r3, [r7, #23]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	490b      	ldr	r1, [pc, #44]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	4904      	ldr	r1, [pc, #16]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40007000 	.word	0x40007000
 80020fc:	42420440 	.word	0x42420440

08002100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e01d      	b.n	800214e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fbca 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4610      	mov	r0, r2
 8002140:	f000 f9b2 	bl	80024a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e01d      	b.n	80021a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7fe fbbd 	bl	80008fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f000 f987 	bl	80024a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e0b4      	b.n	8002330 <HAL_TIM_PWM_ConfigChannel+0x184>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	f200 809f 	bhi.w	800231c <HAL_TIM_PWM_ConfigChannel+0x170>
 80021de:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	08002219 	.word	0x08002219
 80021e8:	0800231d 	.word	0x0800231d
 80021ec:	0800231d 	.word	0x0800231d
 80021f0:	0800231d 	.word	0x0800231d
 80021f4:	08002259 	.word	0x08002259
 80021f8:	0800231d 	.word	0x0800231d
 80021fc:	0800231d 	.word	0x0800231d
 8002200:	0800231d 	.word	0x0800231d
 8002204:	0800229b 	.word	0x0800229b
 8002208:	0800231d 	.word	0x0800231d
 800220c:	0800231d 	.word	0x0800231d
 8002210:	0800231d 	.word	0x0800231d
 8002214:	080022db 	.word	0x080022db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f9a4 	bl	800256c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0204 	bic.w	r2, r2, #4
 8002242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6999      	ldr	r1, [r3, #24]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	619a      	str	r2, [r3, #24]
      break;
 8002256:	e062      	b.n	800231e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f9ea 	bl	8002638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6999      	ldr	r1, [r3, #24]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	021a      	lsls	r2, r3, #8
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	619a      	str	r2, [r3, #24]
      break;
 8002298:	e041      	b.n	800231e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fa33 	bl	800270c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0208 	orr.w	r2, r2, #8
 80022b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0204 	bic.w	r2, r2, #4
 80022c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69d9      	ldr	r1, [r3, #28]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	61da      	str	r2, [r3, #28]
      break;
 80022d8:	e021      	b.n	800231e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fa7d 	bl	80027e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	69da      	ldr	r2, [r3, #28]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69d9      	ldr	r1, [r3, #28]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	021a      	lsls	r2, r3, #8
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	61da      	str	r2, [r3, #28]
      break;
 800231a:	e000      	b.n	800231e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800231c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_TIM_ConfigClockSource+0x18>
 800234c:	2302      	movs	r3, #2
 800234e:	e0a6      	b.n	800249e <HAL_TIM_ConfigClockSource+0x166>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800236e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b40      	cmp	r3, #64	; 0x40
 8002386:	d067      	beq.n	8002458 <HAL_TIM_ConfigClockSource+0x120>
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d80b      	bhi.n	80023a4 <HAL_TIM_ConfigClockSource+0x6c>
 800238c:	2b10      	cmp	r3, #16
 800238e:	d073      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0x140>
 8002390:	2b10      	cmp	r3, #16
 8002392:	d802      	bhi.n	800239a <HAL_TIM_ConfigClockSource+0x62>
 8002394:	2b00      	cmp	r3, #0
 8002396:	d06f      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002398:	e078      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800239a:	2b20      	cmp	r3, #32
 800239c:	d06c      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0x140>
 800239e:	2b30      	cmp	r3, #48	; 0x30
 80023a0:	d06a      	beq.n	8002478 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80023a2:	e073      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d00d      	beq.n	80023c4 <HAL_TIM_ConfigClockSource+0x8c>
 80023a8:	2b70      	cmp	r3, #112	; 0x70
 80023aa:	d804      	bhi.n	80023b6 <HAL_TIM_ConfigClockSource+0x7e>
 80023ac:	2b50      	cmp	r3, #80	; 0x50
 80023ae:	d033      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0xe0>
 80023b0:	2b60      	cmp	r3, #96	; 0x60
 80023b2:	d041      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80023b4:	e06a      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80023b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ba:	d066      	beq.n	800248a <HAL_TIM_ConfigClockSource+0x152>
 80023bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c0:	d017      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80023c2:	e063      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f000 fac9 	bl	800296a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	609a      	str	r2, [r3, #8]
      break;
 80023f0:	e04c      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f000 fab2 	bl	800296a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002414:	609a      	str	r2, [r3, #8]
      break;
 8002416:	e039      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	461a      	mov	r2, r3
 8002426:	f000 fa29 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2150      	movs	r1, #80	; 0x50
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fa80 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002436:	e029      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	461a      	mov	r2, r3
 8002446:	f000 fa47 	bl	80028d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2160      	movs	r1, #96	; 0x60
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa70 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002456:	e019      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	461a      	mov	r2, r3
 8002466:	f000 fa09 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2140      	movs	r1, #64	; 0x40
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fa60 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002476:	e009      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f000 fa57 	bl	8002936 <TIM_ITRx_SetConfig>
      break;
 8002488:	e000      	b.n	800248c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800248a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a29      	ldr	r2, [pc, #164]	; (8002560 <TIM_Base_SetConfig+0xb8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00b      	beq.n	80024d8 <TIM_Base_SetConfig+0x30>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c6:	d007      	beq.n	80024d8 <TIM_Base_SetConfig+0x30>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a26      	ldr	r2, [pc, #152]	; (8002564 <TIM_Base_SetConfig+0xbc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <TIM_Base_SetConfig+0x30>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a25      	ldr	r2, [pc, #148]	; (8002568 <TIM_Base_SetConfig+0xc0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <TIM_Base_SetConfig+0xb8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <TIM_Base_SetConfig+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f8:	d007      	beq.n	800250a <TIM_Base_SetConfig+0x62>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a19      	ldr	r2, [pc, #100]	; (8002564 <TIM_Base_SetConfig+0xbc>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_Base_SetConfig+0x62>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a18      	ldr	r2, [pc, #96]	; (8002568 <TIM_Base_SetConfig+0xc0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d108      	bne.n	800251c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	4313      	orrs	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <TIM_Base_SetConfig+0xb8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40012c00 	.word	0x40012c00
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800

0800256c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f023 0201 	bic.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0303 	bic.w	r3, r3, #3
 80025a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f023 0302 	bic.w	r3, r3, #2
 80025b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <TIM_OC1_SetConfig+0xc8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d10c      	bne.n	80025e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0308 	bic.w	r3, r3, #8
 80025ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f023 0304 	bic.w	r3, r3, #4
 80025e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a13      	ldr	r2, [pc, #76]	; (8002634 <TIM_OC1_SetConfig+0xc8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d111      	bne.n	800260e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	621a      	str	r2, [r3, #32]
}
 8002628:	bf00      	nop
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40012c00 	.word	0x40012c00

08002638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	f023 0210 	bic.w	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f023 0320 	bic.w	r3, r3, #32
 8002682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <TIM_OC2_SetConfig+0xd0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10d      	bne.n	80026b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800269e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <TIM_OC2_SetConfig+0xd0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d113      	bne.n	80026e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	621a      	str	r2, [r3, #32]
}
 80026fe:	bf00      	nop
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012c00 	.word	0x40012c00

0800270c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0303 	bic.w	r3, r3, #3
 8002742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <TIM_OC3_SetConfig+0xd0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10d      	bne.n	8002786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <TIM_OC3_SetConfig+0xd0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800279c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	621a      	str	r2, [r3, #32]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40012c00 	.word	0x40012c00

080027e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800282a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	031b      	lsls	r3, r3, #12
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <TIM_OC4_SetConfig+0x98>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d109      	bne.n	8002854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	621a      	str	r2, [r3, #32]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	40012c00 	.word	0x40012c00

0800287c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f023 0201 	bic.w	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 030a 	bic.w	r3, r3, #10
 80028b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	f023 0210 	bic.w	r2, r3, #16
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002902:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	031b      	lsls	r3, r3, #12
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002914:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	621a      	str	r2, [r3, #32]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 0307 	orr.w	r3, r3, #7
 8002958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800296a:	b480      	push	{r7}
 800296c:	b087      	sub	sp, #28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002984:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	021a      	lsls	r2, r3, #8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4313      	orrs	r3, r2
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	609a      	str	r2, [r3, #8]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029bc:	2302      	movs	r3, #2
 80029be:	e032      	b.n	8002a26 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e03d      	b.n	8002ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2500      	movs	r5, #0
 8002ad8:	4e0c      	ldr	r6, [pc, #48]	; (8002b0c <__libc_init_array+0x38>)
 8002ada:	4c0d      	ldr	r4, [pc, #52]	; (8002b10 <__libc_init_array+0x3c>)
 8002adc:	1ba4      	subs	r4, r4, r6
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	42a5      	cmp	r5, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	f000 f822 	bl	8002b2c <_init>
 8002ae8:	2500      	movs	r5, #0
 8002aea:	4e0a      	ldr	r6, [pc, #40]	; (8002b14 <__libc_init_array+0x40>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	; (8002b18 <__libc_init_array+0x44>)
 8002aee:	1ba4      	subs	r4, r4, r6
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	42a5      	cmp	r5, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002afc:	4798      	blx	r3
 8002afe:	3501      	adds	r5, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b06:	4798      	blx	r3
 8002b08:	3501      	adds	r5, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	08002b70 	.word	0x08002b70
 8002b10:	08002b70 	.word	0x08002b70
 8002b14:	08002b70 	.word	0x08002b70
 8002b18:	08002b74 	.word	0x08002b74

08002b1c <memset>:
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4402      	add	r2, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <_init>:
 8002b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2e:	bf00      	nop
 8002b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b32:	bc08      	pop	{r3}
 8002b34:	469e      	mov	lr, r3
 8002b36:	4770      	bx	lr

08002b38 <_fini>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	bf00      	nop
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr
