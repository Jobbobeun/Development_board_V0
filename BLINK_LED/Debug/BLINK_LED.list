
BLINK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00002ebc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002fc8  08002fc8  00012fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003008  08003008  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003008  08003008  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003008  08003008  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000000c  0800301c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  0800301c  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbad  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001db7  00000000  00000000  0002cbe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  0002e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  0002f860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014994  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad45  00000000  00000000  00044fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000751a8  00000000  00000000  0004fd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4eb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db0  00000000  00000000  000c4f34  2**2
=======
  1 .text         00002b1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c54  08002c54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c54  08002c54  00012c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08002c68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002c68  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b20b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018ce  00000000  00000000  0002b240  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002cb10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014004  00000000  00000000  0002e428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090d8  00000000  00000000  0004242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072e04  00000000  00000000  0004b504  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000367c  00000000  00000000  000be384  2**2
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	08002fb0 	.word	0x08002fb0
=======
 800012c:	08002c10 	.word	0x08002c10
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
<<<<<<< HEAD
 8000148:	08002fb0 	.word	0x08002fb0
=======
 8000148:	08002c10 	.word	0x08002c10
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

0800014c <Application>:

#include "application.h"
#include "stm32f1xx_hal.h"

void Application()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000154:	4804      	ldr	r0, [pc, #16]	; (8000168 <Application+0x1c>)
 8000156:	f001 fa27 	bl	80015a8 <HAL_GPIO_TogglePin>
	HAL_Delay(2000);
 800015a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800015e:	f000 fda1 	bl	8000ca4 <HAL_Delay>
}
 8000162:	bf00      	nop
 8000164:	bd80      	pop	{r7, pc}
 8000166:	bf00      	nop
 8000168:	40010c00 	.word	0x40010c00

0800016c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */
=======
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000170:	f000 fd36 	bl	8000be0 <HAL_Init>
=======
 8000152:	f000 fd27 	bl	8000ba4 <HAL_Init>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

// TIM1->CCR1 = 60000;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000174:	f000 f811 	bl	800019a <SystemClock_Config>
=======
 8000156:	f000 f849 	bl	80001ec <SystemClock_Config>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000178:	f000 fa4e 	bl	8000618 <MX_GPIO_Init>
  MX_TIM1_Init();
 800017c:	f000 f924 	bl	80003c8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000180:	f000 f86c 	bl	800025c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000184:	f000 f8a8 	bl	80002d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000188:	f000 f8d4 	bl	8000334 <MX_I2C2_Init>
  MX_RTC_Init();
 800018c:	f000 f900 	bl	8000390 <MX_RTC_Init>
  MX_TIM2_Init();
 8000190:	f000 f9e0 	bl	8000554 <MX_TIM2_Init>
=======
 800015a:	f000 fa63 	bl	8000624 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015e:	f000 f93b 	bl	80003d8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000162:	f000 f89f 	bl	80002a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000166:	f000 f8db 	bl	8000320 <MX_I2C1_Init>
  MX_I2C2_Init();
 800016a:	f000 f907 	bl	800037c <MX_I2C2_Init>
  MX_TIM2_Init();
 800016e:	f000 f9f7 	bl	8000560 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000172:	2100      	movs	r1, #0
 8000174:	481b      	ldr	r0, [pc, #108]	; (80001e4 <main+0x98>)
 8000176:	f002 f835 	bl	80021e4 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800017a:	2104      	movs	r1, #4
 800017c:	4819      	ldr	r0, [pc, #100]	; (80001e4 <main+0x98>)
 800017e:	f002 f831 	bl	80021e4 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000182:	2108      	movs	r1, #8
 8000184:	4817      	ldr	r0, [pc, #92]	; (80001e4 <main+0x98>)
 8000186:	f002 f82d 	bl	80021e4 <HAL_TIM_PWM_Start>
TIM1->CCR1 = 0;
 800018a:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <main+0x9c>)
 800018c:	2200      	movs	r2, #0
 800018e:	635a      	str	r2, [r3, #52]	; 0x34
TIM1->CCR2 = 65535;
 8000190:	4b15      	ldr	r3, [pc, #84]	; (80001e8 <main+0x9c>)
 8000192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000196:	639a      	str	r2, [r3, #56]	; 0x38
TIM1->CCR3 = 65535;
 8000198:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <main+0x9c>)
 800019a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800019e:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
<<<<<<< HEAD
	  Application();
 8000194:	f7ff ffda 	bl	800014c <Application>
  {
 8000198:	e7fc      	b.n	8000194 <main+0x28>

0800019a <SystemClock_Config>:
=======
for (int i = 0; i<65535; i+=100){
 80001a0:	2300      	movs	r3, #0
 80001a2:	607b      	str	r3, [r7, #4]
 80001a4:	e008      	b.n	80001b8 <main+0x6c>
	TIM1->CCR1 = i;
 80001a6:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <main+0x9c>)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(1);
 80001ac:	2001      	movs	r0, #1
 80001ae:	f000 fd5b 	bl	8000c68 <HAL_Delay>
for (int i = 0; i<65535; i+=100){
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	3364      	adds	r3, #100	; 0x64
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80001be:	4293      	cmp	r3, r2
 80001c0:	ddf1      	ble.n	80001a6 <main+0x5a>
}
for (int i = 65535; i>0; i-=100){
 80001c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001c6:	603b      	str	r3, [r7, #0]
 80001c8:	e008      	b.n	80001dc <main+0x90>
	TIM1->CCR1 = i;
 80001ca:	4a07      	ldr	r2, [pc, #28]	; (80001e8 <main+0x9c>)
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(1);
 80001d0:	2001      	movs	r0, #1
 80001d2:	f000 fd49 	bl	8000c68 <HAL_Delay>
for (int i = 65535; i>0; i-=100){
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	3b64      	subs	r3, #100	; 0x64
 80001da:	603b      	str	r3, [r7, #0]
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	dcf3      	bgt.n	80001ca <main+0x7e>
for (int i = 0; i<65535; i+=100){
 80001e2:	e7dd      	b.n	80001a0 <main+0x54>
 80001e4:	20000100 	.word	0x20000100
 80001e8:	40012c00 	.word	0x40012c00

080001ec <SystemClock_Config>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 800019a:	b580      	push	{r7, lr}
 800019c:	b094      	sub	sp, #80	; 0x50
 800019e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a4:	2228      	movs	r2, #40	; 0x28
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fef9 	bl	8002fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ae:	f107 0314 	add.w	r3, r7, #20
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]
 80001bc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001be:	1d3b      	adds	r3, r7, #4
 80001c0:	2200      	movs	r2, #0
 80001c2:	601a      	str	r2, [r3, #0]
 80001c4:	605a      	str	r2, [r3, #4]
 80001c6:	609a      	str	r2, [r3, #8]
 80001c8:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80001ca:	2305      	movs	r3, #5
 80001cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fb23 	bl	8001840 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000200:	f000 fa94 	bl	800072c <Error_Handler>
=======
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b094      	sub	sp, #80	; 0x50
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fd00 	bl	8002c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0314 	add.w	r3, r7, #20
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000220:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000224:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800023c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	4618      	mov	r0, r3
 8000244:	f001 faba 	bl	80017bc <HAL_RCC_OscConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800024e:	f000 fa73 	bl	8000738 <Error_Handler>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000204:	230f      	movs	r3, #15
 8000206:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000214:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2102      	movs	r1, #2
 8000220:	4618      	mov	r0, r3
 8000222:	f001 fd8d 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800022c:	f000 fa7e 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000230:	2303      	movs	r3, #3
 8000232:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000238:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800023a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f001 ff18 	bl	8002078 <HAL_RCCEx_PeriphCLKConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800024e:	f000 fa6d 	bl	800072c <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3750      	adds	r7, #80	; 0x50
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_ADC1_Init>:
=======
 8000252:	230f      	movs	r3, #15
 8000254:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000262:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2102      	movs	r1, #2
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fd24 	bl	8001cbc <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027a:	f000 fa5d 	bl	8000738 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027e:	2302      	movs	r3, #2
 8000280:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe9e 	bl	8001fcc <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000296:	f000 fa4f 	bl	8000738 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3750      	adds	r7, #80	; 0x50
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_ADC1_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
=======
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
=======
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_ADC1_Init+0x74>)
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <MX_ADC1_Init+0x78>)
 8000270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_ADC1_Init+0x74>)
 800027a:	2200      	movs	r2, #0
 800027c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000286:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800028a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_ADC1_Init+0x74>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000294:	2201      	movs	r2, #1
 8000296:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <MX_ADC1_Init+0x74>)
 800029a:	f000 fd25 	bl	8000ce8 <HAL_ADC_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 fa42 	bl	800072c <Error_Handler>
=======
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MX_ADC1_Init+0x74>)
 80002b6:	4a19      	ldr	r2, [pc, #100]	; (800031c <MX_ADC1_Init+0x78>)
 80002b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <MX_ADC1_Init+0x74>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MX_ADC1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_ADC1_Init+0x74>)
 80002ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <MX_ADC1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_ADC1_Init+0x74>)
 80002dc:	2201      	movs	r2, #1
 80002de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <MX_ADC1_Init+0x74>)
 80002e2:	f000 fce3 	bl	8000cac <HAL_ADC_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002ec:	f000 fa24 	bl	8000738 <Error_Handler>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
<<<<<<< HEAD
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 fded 	bl	8000e98 <HAL_ADC_ConfigChannel>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c4:	f000 fa32 	bl	800072c <Error_Handler>
=======
 80002f0:	2300      	movs	r3, #0
 80002f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_ADC1_Init+0x74>)
 8000302:	f000 fdab 	bl	8000e5c <HAL_ADC_ConfigChannel>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800030c:	f000 fa14 	bl	8000738 <Error_Handler>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	200000d0 	.word	0x200000d0
 80002d4:	40012400 	.word	0x40012400

080002d8 <MX_I2C1_Init>:
=======
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200000d0 	.word	0x200000d0
 800031c:	40012400 	.word	0x40012400

08000320 <MX_I2C1_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
=======
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <MX_I2C1_Init+0x50>)
 80002de:	4a13      	ldr	r2, [pc, #76]	; (800032c <MX_I2C1_Init+0x54>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_I2C1_Init+0x50>)
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_I2C1_Init+0x58>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_I2C1_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_I2C1_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <MX_I2C1_Init+0x50>)
 80002f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <MX_I2C1_Init+0x50>)
 80002fe:	2200      	movs	r2, #0
 8000300:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <MX_I2C1_Init+0x50>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <MX_I2C1_Init+0x50>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <MX_I2C1_Init+0x50>)
 8000310:	2200      	movs	r2, #0
 8000312:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <MX_I2C1_Init+0x50>)
 8000316:	f001 f95f 	bl	80015d8 <HAL_I2C_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000320:	f000 fa04 	bl	800072c <Error_Handler>
=======
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_I2C1_Init+0x50>)
 8000326:	4a13      	ldr	r2, [pc, #76]	; (8000374 <MX_I2C1_Init+0x54>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_I2C1_Init+0x50>)
 800032c:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_I2C1_Init+0x58>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_I2C1_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_I2C1_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_I2C1_Init+0x50>)
 800033e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000342:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <MX_I2C1_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_I2C1_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <MX_I2C1_Init+0x50>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_I2C1_Init+0x50>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_I2C1_Init+0x50>)
 800035e:	f001 f905 	bl	800156c <HAL_I2C_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000368:	f000 f9e6 	bl	8000738 <Error_Handler>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000028 	.word	0x20000028
 800032c:	40005400 	.word	0x40005400
 8000330:	000186a0 	.word	0x000186a0

08000334 <MX_I2C2_Init>:
=======
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000028 	.word	0x20000028
 8000374:	40005400 	.word	0x40005400
 8000378:	000186a0 	.word	0x000186a0

0800037c <MX_I2C2_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
<<<<<<< HEAD
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
=======
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
<<<<<<< HEAD
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <MX_I2C2_Init+0x50>)
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <MX_I2C2_Init+0x54>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <MX_I2C2_Init+0x50>)
 8000340:	4a12      	ldr	r2, [pc, #72]	; (800038c <MX_I2C2_Init+0x58>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <MX_I2C2_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <MX_I2C2_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000350:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_I2C2_Init+0x50>)
 8000352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000356:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <MX_I2C2_Init+0x50>)
 800035a:	2200      	movs	r2, #0
 800035c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_I2C2_Init+0x50>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <MX_I2C2_Init+0x50>)
 8000366:	2200      	movs	r2, #0
 8000368:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_I2C2_Init+0x50>)
 800036c:	2200      	movs	r2, #0
 800036e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_I2C2_Init+0x50>)
 8000372:	f001 f931 	bl	80015d8 <HAL_I2C_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800037c:	f000 f9d6 	bl	800072c <Error_Handler>
=======
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <MX_I2C2_Init+0x50>)
 8000382:	4a13      	ldr	r2, [pc, #76]	; (80003d0 <MX_I2C2_Init+0x54>)
 8000384:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_I2C2_Init+0x50>)
 8000388:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_I2C2_Init+0x58>)
 800038a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_I2C2_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_I2C2_Init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_I2C2_Init+0x50>)
 800039a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800039e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_I2C2_Init+0x50>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_I2C2_Init+0x50>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <MX_I2C2_Init+0x50>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_I2C2_Init+0x50>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <MX_I2C2_Init+0x50>)
 80003ba:	f001 f8d7 	bl	800156c <HAL_I2C_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003c4:	f000 f9b8 	bl	8000738 <Error_Handler>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
<<<<<<< HEAD
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000007c 	.word	0x2000007c
 8000388:	40005800 	.word	0x40005800
 800038c:	000186a0 	.word	0x000186a0

08000390 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <MX_RTC_Init+0x30>)
 8000396:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <MX_RTC_Init+0x34>)
 8000398:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_RTC_Init+0x30>)
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <MX_RTC_Init+0x30>)
 80003a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003aa:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_RTC_Init+0x30>)
 80003ac:	f001 ffd6 	bl	800235c <HAL_RTC_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80003b6:	f000 f9b9 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000100 	.word	0x20000100
 80003c4:	40002800 	.word	0x40002800

080003c8 <MX_TIM1_Init>:
=======
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	2000007c 	.word	0x2000007c
 80003d0:	40005800 	.word	0x40005800
 80003d4:	000186a0 	.word	0x000186a0

080003d8 <MX_TIM1_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b096      	sub	sp, #88	; 0x58
 80003cc:	af00      	add	r7, sp, #0
=======
 80003d8:	b580      	push	{r7, lr}
 80003da:	b096      	sub	sp, #88	; 0x58
 80003dc:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80003ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
 80003f6:	615a      	str	r2, [r3, #20]
 80003f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2220      	movs	r2, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f002 fdcd 	bl	8002fa0 <memset>
=======
 80003de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
 8000406:	615a      	str	r2, [r3, #20]
 8000408:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2220      	movs	r2, #32
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f002 fbf5 	bl	8002c00 <memset>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8000406:	4b51      	ldr	r3, [pc, #324]	; (800054c <MX_TIM1_Init+0x184>)
 8000408:	4a51      	ldr	r2, [pc, #324]	; (8000550 <MX_TIM1_Init+0x188>)
 800040a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3200;
 800040c:	4b4f      	ldr	r3, [pc, #316]	; (800054c <MX_TIM1_Init+0x184>)
 800040e:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000412:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b4d      	ldr	r3, [pc, #308]	; (800054c <MX_TIM1_Init+0x184>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800041a:	4b4c      	ldr	r3, [pc, #304]	; (800054c <MX_TIM1_Init+0x184>)
 800041c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000420:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000422:	4b4a      	ldr	r3, [pc, #296]	; (800054c <MX_TIM1_Init+0x184>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000428:	4b48      	ldr	r3, [pc, #288]	; (800054c <MX_TIM1_Init+0x184>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042e:	4b47      	ldr	r3, [pc, #284]	; (800054c <MX_TIM1_Init+0x184>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000434:	4845      	ldr	r0, [pc, #276]	; (800054c <MX_TIM1_Init+0x184>)
 8000436:	f002 f8a4 	bl	8002582 <HAL_TIM_Base_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000440:	f000 f974 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000448:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800044a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800044e:	4619      	mov	r1, r3
 8000450:	483e      	ldr	r0, [pc, #248]	; (800054c <MX_TIM1_Init+0x184>)
 8000452:	f002 f9b3 	bl	80027bc <HAL_TIM_ConfigClockSource>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800045c:	f000 f966 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000460:	483a      	ldr	r0, [pc, #232]	; (800054c <MX_TIM1_Init+0x184>)
 8000462:	f002 f8b9 	bl	80025d8 <HAL_TIM_PWM_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800046c:	f000 f95e 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000470:	2300      	movs	r3, #0
 8000472:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800047c:	4619      	mov	r1, r3
 800047e:	4833      	ldr	r0, [pc, #204]	; (800054c <MX_TIM1_Init+0x184>)
 8000480:	f002 fcd4 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800048a:	f000 f94f 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800048e:	2360      	movs	r3, #96	; 0x60
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000496:	2300      	movs	r3, #0
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800049a:	2300      	movs	r3, #0
 800049c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004a2:	2300      	movs	r3, #0
 80004a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004a6:	2300      	movs	r3, #0
 80004a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	4826      	ldr	r0, [pc, #152]	; (800054c <MX_TIM1_Init+0x184>)
 80004b4:	f002 f8bc 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80004be:	f000 f935 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c6:	2204      	movs	r2, #4
 80004c8:	4619      	mov	r1, r3
 80004ca:	4820      	ldr	r0, [pc, #128]	; (800054c <MX_TIM1_Init+0x184>)
 80004cc:	f002 f8b0 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80004d6:	f000 f929 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004de:	2208      	movs	r2, #8
 80004e0:	4619      	mov	r1, r3
 80004e2:	481a      	ldr	r0, [pc, #104]	; (800054c <MX_TIM1_Init+0x184>)
 80004e4:	f002 f8a4 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80004ee:	f000 f91d 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f6:	220c      	movs	r2, #12
 80004f8:	4619      	mov	r1, r3
 80004fa:	4814      	ldr	r0, [pc, #80]	; (800054c <MX_TIM1_Init+0x184>)
 80004fc:	f002 f898 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000506:	f000 f911 	bl	800072c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800051e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000522:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4619      	mov	r1, r3
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <MX_TIM1_Init+0x184>)
 800052e:	f002 fcc1 	bl	8002eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8000538:	f000 f8f8 	bl	800072c <Error_Handler>
=======
 8000416:	4b50      	ldr	r3, [pc, #320]	; (8000558 <MX_TIM1_Init+0x180>)
 8000418:	4a50      	ldr	r2, [pc, #320]	; (800055c <MX_TIM1_Init+0x184>)
 800041a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800041c:	4b4e      	ldr	r3, [pc, #312]	; (8000558 <MX_TIM1_Init+0x180>)
 800041e:	2200      	movs	r2, #0
 8000420:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000422:	4b4d      	ldr	r3, [pc, #308]	; (8000558 <MX_TIM1_Init+0x180>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000428:	4b4b      	ldr	r3, [pc, #300]	; (8000558 <MX_TIM1_Init+0x180>)
 800042a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800042e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000430:	4b49      	ldr	r3, [pc, #292]	; (8000558 <MX_TIM1_Init+0x180>)
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000436:	4b48      	ldr	r3, [pc, #288]	; (8000558 <MX_TIM1_Init+0x180>)
 8000438:	2200      	movs	r2, #0
 800043a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800043c:	4b46      	ldr	r3, [pc, #280]	; (8000558 <MX_TIM1_Init+0x180>)
 800043e:	2200      	movs	r2, #0
 8000440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000442:	4845      	ldr	r0, [pc, #276]	; (8000558 <MX_TIM1_Init+0x180>)
 8000444:	f001 fe78 	bl	8002138 <HAL_TIM_Base_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800044e:	f000 f973 	bl	8000738 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000456:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000458:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800045c:	4619      	mov	r1, r3
 800045e:	483e      	ldr	r0, [pc, #248]	; (8000558 <MX_TIM1_Init+0x180>)
 8000460:	f001 ffb8 	bl	80023d4 <HAL_TIM_ConfigClockSource>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800046a:	f000 f965 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800046e:	483a      	ldr	r0, [pc, #232]	; (8000558 <MX_TIM1_Init+0x180>)
 8000470:	f001 fe8d 	bl	800218e <HAL_TIM_PWM_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800047a:	f000 f95d 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800047e:	2300      	movs	r3, #0
 8000480:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000486:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800048a:	4619      	mov	r1, r3
 800048c:	4832      	ldr	r0, [pc, #200]	; (8000558 <MX_TIM1_Init+0x180>)
 800048e:	f002 fafd 	bl	8002a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000498:	f000 f94e 	bl	8000738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800049c:	2360      	movs	r3, #96	; 0x60
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004a8:	2300      	movs	r3, #0
 80004aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004b0:	2300      	movs	r3, #0
 80004b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004bc:	2200      	movs	r2, #0
 80004be:	4619      	mov	r1, r3
 80004c0:	4825      	ldr	r0, [pc, #148]	; (8000558 <MX_TIM1_Init+0x180>)
 80004c2:	f001 fec1 	bl	8002248 <HAL_TIM_PWM_ConfigChannel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80004cc:	f000 f934 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d4:	2204      	movs	r2, #4
 80004d6:	4619      	mov	r1, r3
 80004d8:	481f      	ldr	r0, [pc, #124]	; (8000558 <MX_TIM1_Init+0x180>)
 80004da:	f001 feb5 	bl	8002248 <HAL_TIM_PWM_ConfigChannel>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80004e4:	f000 f928 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ec:	2208      	movs	r2, #8
 80004ee:	4619      	mov	r1, r3
 80004f0:	4819      	ldr	r0, [pc, #100]	; (8000558 <MX_TIM1_Init+0x180>)
 80004f2:	f001 fea9 	bl	8002248 <HAL_TIM_PWM_ConfigChannel>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80004fc:	f000 f91c 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000504:	220c      	movs	r2, #12
 8000506:	4619      	mov	r1, r3
 8000508:	4813      	ldr	r0, [pc, #76]	; (8000558 <MX_TIM1_Init+0x180>)
 800050a:	f001 fe9d 	bl	8002248 <HAL_TIM_PWM_ConfigChannel>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000514:	f000 f910 	bl	8000738 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800052c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000530:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4619      	mov	r1, r3
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <MX_TIM1_Init+0x180>)
 800053c:	f002 faea 	bl	8002b14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000546:	f000 f8f7 	bl	8000738 <Error_Handler>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <MX_TIM1_Init+0x184>)
 800053e:	f000 fa4b 	bl	80009d8 <HAL_TIM_MspPostInit>

}
 8000542:	bf00      	nop
 8000544:	3758      	adds	r7, #88	; 0x58
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000114 	.word	0x20000114
 8000550:	40012c00 	.word	0x40012c00

08000554 <MX_TIM2_Init>:
=======
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <MX_TIM1_Init+0x180>)
 800054c:	f000 fa26 	bl	800099c <HAL_TIM_MspPostInit>

}
 8000550:	bf00      	nop
 8000552:	3758      	adds	r7, #88	; 0x58
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000100 	.word	0x20000100
 800055c:	40012c00 	.word	0x40012c00

08000560 <MX_TIM2_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
=======
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	619a      	str	r2, [r3, #24]
=======
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	619a      	str	r2, [r3, #24]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8000576:	4b27      	ldr	r3, [pc, #156]	; (8000614 <MX_TIM2_Init+0xc0>)
 8000578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800057c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <MX_TIM2_Init+0xc0>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <MX_TIM2_Init+0xc0>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800058a:	4b22      	ldr	r3, [pc, #136]	; (8000614 <MX_TIM2_Init+0xc0>)
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <MX_TIM2_Init+0xc0>)
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <MX_TIM2_Init+0xc0>)
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800059c:	481d      	ldr	r0, [pc, #116]	; (8000614 <MX_TIM2_Init+0xc0>)
 800059e:	f002 f81b 	bl	80025d8 <HAL_TIM_PWM_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005a8:	f000 f8c0 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4619      	mov	r1, r3
 80005ba:	4816      	ldr	r0, [pc, #88]	; (8000614 <MX_TIM2_Init+0xc0>)
 80005bc:	f002 fc36 	bl	8002e2c <HAL_TIMEx_MasterConfigSynchronization>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80005c6:	f000 f8b1 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005ca:	2360      	movs	r3, #96	; 0x60
 80005cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <MX_TIM2_Init+0xc0>)
 80005e2:	f002 f825 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80005ec:	f000 f89e 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2204      	movs	r2, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <MX_TIM2_Init+0xc0>)
 80005f8:	f002 f81a 	bl	8002630 <HAL_TIM_PWM_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000602:	f000 f893 	bl	800072c <Error_Handler>
=======
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <MX_TIM2_Init+0xc0>)
 8000584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000588:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <MX_TIM2_Init+0xc0>)
 800058c:	2200      	movs	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <MX_TIM2_Init+0xc0>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <MX_TIM2_Init+0xc0>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_TIM2_Init+0xc0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a2:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <MX_TIM2_Init+0xc0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005a8:	481d      	ldr	r0, [pc, #116]	; (8000620 <MX_TIM2_Init+0xc0>)
 80005aa:	f001 fdf0 	bl	800218e <HAL_TIM_PWM_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80005b4:	f000 f8c0 	bl	8000738 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c0:	f107 0320 	add.w	r3, r7, #32
 80005c4:	4619      	mov	r1, r3
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <MX_TIM2_Init+0xc0>)
 80005c8:	f002 fa60 	bl	8002a8c <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80005d2:	f000 f8b1 	bl	8000738 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d6:	2360      	movs	r3, #96	; 0x60
 80005d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <MX_TIM2_Init+0xc0>)
 80005ee:	f001 fe2b 	bl	8002248 <HAL_TIM_PWM_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80005f8:	f000 f89e 	bl	8000738 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2204      	movs	r2, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4807      	ldr	r0, [pc, #28]	; (8000620 <MX_TIM2_Init+0xc0>)
 8000604:	f001 fe20 	bl	8002248 <HAL_TIM_PWM_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800060e:	f000 f893 	bl	8000738 <Error_Handler>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <MX_TIM2_Init+0xc0>)
 8000608:	f000 f9e6 	bl	80009d8 <HAL_TIM_MspPostInit>

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000154 	.word	0x20000154

08000618 <MX_GPIO_Init>:
=======
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <MX_TIM2_Init+0xc0>)
 8000614:	f000 f9c2 	bl	800099c <HAL_TIM_MspPostInit>

}
 8000618:	bf00      	nop
 800061a:	3728      	adds	r7, #40	; 0x28
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000140 	.word	0x20000140

08000624 <MX_GPIO_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MX_GPIO_Init+0x104>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a3a      	ldr	r2, [pc, #232]	; (800071c <MX_GPIO_Init+0x104>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b38      	ldr	r3, [pc, #224]	; (800071c <MX_GPIO_Init+0x104>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <MX_GPIO_Init+0x104>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a34      	ldr	r2, [pc, #208]	; (800071c <MX_GPIO_Init+0x104>)
 800064a:	f043 0320 	orr.w	r3, r3, #32
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b32      	ldr	r3, [pc, #200]	; (800071c <MX_GPIO_Init+0x104>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0320 	and.w	r3, r3, #32
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_GPIO_Init+0x104>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a2e      	ldr	r2, [pc, #184]	; (800071c <MX_GPIO_Init+0x104>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <MX_GPIO_Init+0x104>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <MX_GPIO_Init+0x104>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a28      	ldr	r2, [pc, #160]	; (800071c <MX_GPIO_Init+0x104>)
 800067a:	f043 0308 	orr.w	r3, r3, #8
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_GPIO_Init+0x104>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin 
 800068c:	2200      	movs	r2, #0
 800068e:	f24f 3130 	movw	r1, #62256	; 0xf330
 8000692:	4823      	ldr	r0, [pc, #140]	; (8000720 <MX_GPIO_Init+0x108>)
 8000694:	f000 ff70 	bl	8001578 <HAL_GPIO_WritePin>
=======
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0310 	add.w	r3, r7, #16
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000638:	4b3b      	ldr	r3, [pc, #236]	; (8000728 <MX_GPIO_Init+0x104>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a3a      	ldr	r2, [pc, #232]	; (8000728 <MX_GPIO_Init+0x104>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b38      	ldr	r3, [pc, #224]	; (8000728 <MX_GPIO_Init+0x104>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0310 	and.w	r3, r3, #16
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000650:	4b35      	ldr	r3, [pc, #212]	; (8000728 <MX_GPIO_Init+0x104>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a34      	ldr	r2, [pc, #208]	; (8000728 <MX_GPIO_Init+0x104>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b32      	ldr	r3, [pc, #200]	; (8000728 <MX_GPIO_Init+0x104>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MX_GPIO_Init+0x104>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a2e      	ldr	r2, [pc, #184]	; (8000728 <MX_GPIO_Init+0x104>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_GPIO_Init+0x104>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_GPIO_Init+0x104>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <MX_GPIO_Init+0x104>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_GPIO_Init+0x104>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin 
 8000698:	2200      	movs	r2, #0
 800069a:	f24f 3130 	movw	r1, #62256	; 0xf330
 800069e:	4823      	ldr	r0, [pc, #140]	; (800072c <MX_GPIO_Init+0x108>)
 80006a0:	f000 ff4c 	bl	800153c <HAL_GPIO_WritePin>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
                          |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Output_5_GPIO_Port, Output_5_Pin, GPIO_PIN_RESET);
<<<<<<< HEAD
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069e:	4821      	ldr	r0, [pc, #132]	; (8000724 <MX_GPIO_Init+0x10c>)
 80006a0:	f000 ff6a 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Input_0_Pin */
  GPIO_InitStruct.Pin = Input_0_Pin;
 80006a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Input_0_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	481b      	ldr	r0, [pc, #108]	; (8000728 <MX_GPIO_Init+0x110>)
 80006ba:	f000 fe03 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_3_Pin Input_4_Pin */
  GPIO_InitStruct.Pin = Input_3_Pin|Input_4_Pin;
 80006be:	2306      	movs	r3, #6
 80006c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	4619      	mov	r1, r3
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <MX_GPIO_Init+0x108>)
 80006d2:	f000 fdf7 	bl	80012c4 <HAL_GPIO_Init>
=======
 80006a4:	2200      	movs	r2, #0
 80006a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006aa:	4821      	ldr	r0, [pc, #132]	; (8000730 <MX_GPIO_Init+0x10c>)
 80006ac:	f000 ff46 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Input_0_Pin Input_1_Pin Input_2_Pin */
  GPIO_InitStruct.Pin = Input_0_Pin|Input_1_Pin|Input_2_Pin;
 80006b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <MX_GPIO_Init+0x110>)
 80006c6:	f000 fddf 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Input_3_Pin Input_4_Pin */
  GPIO_InitStruct.Pin = Input_3_Pin|Input_4_Pin;
 80006ca:	2306      	movs	r3, #6
 80006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <MX_GPIO_Init+0x108>)
 80006de:	f000 fdd3 	bl	8001288 <HAL_GPIO_Init>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /*Configure GPIO pins : Output_9_Pin Output_8_Pin Output_7_Pin Output_6_Pin 
                           Output_4_Pin Output_3_Pin Output_2_Pin Output_1_Pin */
  GPIO_InitStruct.Pin = Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin 
<<<<<<< HEAD
 80006d6:	f24f 3330 	movw	r3, #62256	; 0xf330
 80006da:	613b      	str	r3, [r7, #16]
                          |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4619      	mov	r1, r3
 80006ee:	480c      	ldr	r0, [pc, #48]	; (8000720 <MX_GPIO_Init+0x108>)
 80006f0:	f000 fde8 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Output_5_Pin */
  GPIO_InitStruct.Pin = Output_5_Pin;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2302      	movs	r3, #2
 8000704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Output_5_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_GPIO_Init+0x10c>)
 800070e:	f000 fdd9 	bl	80012c4 <HAL_GPIO_Init>

}
 8000712:	bf00      	nop
 8000714:	3720      	adds	r7, #32
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	40010c00 	.word	0x40010c00
 8000724:	40010800 	.word	0x40010800
 8000728:	40011000 	.word	0x40011000

0800072c <Error_Handler>:
=======
 80006e2:	f24f 3330 	movw	r3, #62256	; 0xf330
 80006e6:	613b      	str	r3, [r7, #16]
                          |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_GPIO_Init+0x108>)
 80006fc:	f000 fdc4 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pin : Output_5_Pin */
  GPIO_InitStruct.Pin = Output_5_Pin;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Output_5_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_GPIO_Init+0x10c>)
 800071a:	f000 fdb5 	bl	8001288 <HAL_GPIO_Init>

}
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	40010c00 	.word	0x40010c00
 8000730:	40010800 	.word	0x40010800
 8000734:	40011000 	.word	0x40011000

08000738 <Error_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
=======
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <HAL_MspInit>:
=======
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr

08000744 <HAL_MspInit>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
=======
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_MspInit+0x5c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x5c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
=======
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <HAL_MspInit+0x5c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x5c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x60>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_MspInit+0x60>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6053      	str	r3, [r2, #4]
=======
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x60>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x60>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000
 8000798:	40010000 	.word	0x40010000

0800079c <HAL_ADC_MspInit>:
=======
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <HAL_ADC_MspInit>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0318 	add.w	r3, r7, #24
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1f      	ldr	r2, [pc, #124]	; (8000834 <HAL_ADC_MspInit+0x98>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d137      	bne.n	800082c <HAL_ADC_MspInit+0x90>
=======
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0318 	add.w	r3, r7, #24
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <HAL_ADC_MspInit+0x98>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d137      	bne.n	8000838 <HAL_ADC_MspInit+0x90>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	4a17      	ldr	r2, [pc, #92]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6193      	str	r3, [r2, #24]
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f003 0304 	and.w	r3, r3, #4
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_ADC_MspInit+0x9c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
=======
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_ADC_MspInit+0x9c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0308 	and.w	r3, r3, #8
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
<<<<<<< HEAD
 8000804:	23ff      	movs	r3, #255	; 0xff
 8000806:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000808:	2303      	movs	r3, #3
 800080a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	4619      	mov	r1, r3
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <HAL_ADC_MspInit+0xa0>)
 8000814:	f000 fd56 	bl	80012c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081c:	2303      	movs	r3, #3
 800081e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <HAL_ADC_MspInit+0xa4>)
 8000828:	f000 fd4c 	bl	80012c4 <HAL_GPIO_Init>
=======
 8000810:	23ff      	movs	r3, #255	; 0xff
 8000812:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000814:	2303      	movs	r3, #3
 8000816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	4619      	mov	r1, r3
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <HAL_ADC_MspInit+0xa0>)
 8000820:	f000 fd32 	bl	8001288 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000828:	2303      	movs	r3, #3
 800082a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <HAL_ADC_MspInit+0xa4>)
 8000834:	f000 fd28 	bl	8001288 <HAL_GPIO_Init>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40012400 	.word	0x40012400
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800
 8000840:	40010c00 	.word	0x40010c00

08000844 <HAL_I2C_MspInit>:
=======
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40012400 	.word	0x40012400
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800
 800084c:	40010c00 	.word	0x40010c00

08000850 <HAL_I2C_MspInit>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a2b      	ldr	r2, [pc, #172]	; (800090c <HAL_I2C_MspInit+0xc8>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d124      	bne.n	80008ae <HAL_I2C_MspInit+0x6a>
=======
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a2b      	ldr	r2, [pc, #172]	; (8000918 <HAL_I2C_MspInit+0xc8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d124      	bne.n	80008ba <HAL_I2C_MspInit+0x6a>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a29      	ldr	r2, [pc, #164]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 800086a:	f043 0308 	orr.w	r3, r3, #8
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0308 	and.w	r3, r3, #8
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	697b      	ldr	r3, [r7, #20]
=======
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <HAL_I2C_MspInit+0xcc>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a29      	ldr	r2, [pc, #164]	; (800091c <HAL_I2C_MspInit+0xcc>)
 8000876:	f043 0308 	orr.w	r3, r3, #8
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <HAL_I2C_MspInit+0xcc>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 800087c:	23c0      	movs	r3, #192	; 0xc0
 800087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000880:	2312      	movs	r3, #18
 8000882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	4619      	mov	r1, r3
 800088e:	4821      	ldr	r0, [pc, #132]	; (8000914 <HAL_I2C_MspInit+0xd0>)
 8000890:	f000 fd18 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 8000896:	69db      	ldr	r3, [r3, #28]
 8000898:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	61d3      	str	r3, [r2, #28]
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
=======
 8000888:	23c0      	movs	r3, #192	; 0xc0
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800088c:	2312      	movs	r3, #18
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	4619      	mov	r1, r3
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <HAL_I2C_MspInit+0xd0>)
 800089c:	f000 fcf4 	bl	8001288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008aa:	61d3      	str	r3, [r2, #28]
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	693b      	ldr	r3, [r7, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80008ac:	e029      	b.n	8000902 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_I2C_MspInit+0xd4>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d124      	bne.n	8000902 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	6193      	str	r3, [r2, #24]
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	f003 0308 	and.w	r3, r3, #8
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	2312      	movs	r3, #18
 80008d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008da:	2303      	movs	r3, #3
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <HAL_I2C_MspInit+0xd0>)
 80008e6:	f000 fced 	bl	80012c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 80008f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_I2C_MspInit+0xcc>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40005400 	.word	0x40005400
 8000910:	40021000 	.word	0x40021000
 8000914:	40010c00 	.word	0x40010c00
 8000918:	40005800 	.word	0x40005800

0800091c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <HAL_RTC_MspInit+0x3c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d110      	bne.n	8000950 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800092e:	f000 ff7b 	bl	8001828 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_RTC_MspInit+0x40>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_RTC_MspInit+0x40>)
 8000938:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_RTC_MspInit+0x40>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_RTC_MspInit+0x44>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40002800 	.word	0x40002800
 800095c:	40021000 	.word	0x40021000
 8000960:	4242043c 	.word	0x4242043c

08000964 <HAL_TIM_Base_MspInit>:
=======
 80008b8:	e029      	b.n	800090e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a19      	ldr	r2, [pc, #100]	; (8000924 <HAL_I2C_MspInit+0xd4>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d124      	bne.n	800090e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	2312      	movs	r3, #18
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <HAL_I2C_MspInit+0xd0>)
 80008f2:	f000 fcc9 	bl	8001288 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_I2C_MspInit+0xcc>)
 80008fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_I2C_MspInit+0xcc>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40005400 	.word	0x40005400
 800091c:	40021000 	.word	0x40021000
 8000920:	40010c00 	.word	0x40010c00
 8000924:	40005800 	.word	0x40005800

08000928 <HAL_TIM_Base_MspInit>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a09      	ldr	r2, [pc, #36]	; (8000998 <HAL_TIM_Base_MspInit+0x34>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10b      	bne.n	800098e <HAL_TIM_Base_MspInit+0x2a>
=======
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a09      	ldr	r2, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x34>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10b      	bne.n	8000952 <HAL_TIM_Base_MspInit+0x2a>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 800097c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_TIM_Base_MspInit+0x38>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
=======
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_TIM_Base_MspInit+0x38>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_TIM_Base_MspInit+0x38>)
 8000940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_TIM_Base_MspInit+0x38>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40012c00 	.word	0x40012c00
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_TIM_PWM_MspInit>:
=======
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40012c00 	.word	0x40012c00
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_TIM_PWM_MspInit>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
<<<<<<< HEAD
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b0:	d10b      	bne.n	80009ca <HAL_TIM_PWM_MspInit+0x2a>
=======
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000974:	d10b      	bne.n	800098e <HAL_TIM_PWM_MspInit+0x2a>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_TIM_PWM_MspInit+0x34>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_TIM_PWM_MspInit+0x34>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_TIM_PWM_MspInit+0x34>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
=======
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_TIM_PWM_MspInit+0x34>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_TIM_PWM_MspInit+0x34>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	61d3      	str	r3, [r2, #28]
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_TIM_PWM_MspInit+0x34>)
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <HAL_TIM_MspPostInit+0xec>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d119      	bne.n	8000a2c <HAL_TIM_MspPostInit+0x54>
=======
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <HAL_TIM_MspPostInit+0xec>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d119      	bne.n	80009f0 <HAL_TIM_MspPostInit+0x54>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80009f8:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a32      	ldr	r2, [pc, #200]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b30      	ldr	r3, [pc, #192]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
=======
 80009bc:	4b33      	ldr	r3, [pc, #204]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a32      	ldr	r2, [pc, #200]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b30      	ldr	r3, [pc, #192]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
<<<<<<< HEAD
 8000a10:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4829      	ldr	r0, [pc, #164]	; (8000acc <HAL_TIM_MspPostInit+0xf4>)
 8000a26:	f000 fc4d 	bl	80012c4 <HAL_GPIO_Init>
=======
 80009d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4829      	ldr	r0, [pc, #164]	; (8000a90 <HAL_TIM_MspPostInit+0xf4>)
 80009ea:	f000 fc4d 	bl	8001288 <HAL_GPIO_Init>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8000a2a:	e047      	b.n	8000abc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a34:	d142      	bne.n	8000abc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6193      	str	r3, [r2, #24]
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_TIM_MspPostInit+0xf0>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4814      	ldr	r0, [pc, #80]	; (8000acc <HAL_TIM_MspPostInit+0xf4>)
 8000a7c:	f000 fc22 	bl	80012c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a80:	2308      	movs	r3, #8
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <HAL_TIM_MspPostInit+0xf8>)
 8000a94:	f000 fc16 	bl	80012c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_TIM_MspPostInit+0xfc>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
 8000aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab6:	4a07      	ldr	r2, [pc, #28]	; (8000ad4 <HAL_TIM_MspPostInit+0xfc>)
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	6053      	str	r3, [r2, #4]
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40012c00 	.word	0x40012c00
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	40010c00 	.word	0x40010c00
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <NMI_Handler>:
=======
 80009ee:	e047      	b.n	8000a80 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f8:	d142      	bne.n	8000a80 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b24      	ldr	r3, [pc, #144]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <HAL_TIM_MspPostInit+0xf0>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <HAL_TIM_MspPostInit+0xf4>)
 8000a40:	f000 fc22 	bl	8001288 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a44:	2308      	movs	r3, #8
 8000a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <HAL_TIM_MspPostInit+0xf8>)
 8000a58:	f000 fc16 	bl	8001288 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_TIM_MspPostInit+0xfc>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7a:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_TIM_MspPostInit+0xfc>)
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	6053      	str	r3, [r2, #4]
}
 8000a80:	bf00      	nop
 8000a82:	3728      	adds	r7, #40	; 0x28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40012c00 	.word	0x40012c00
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010800 	.word	0x40010800
 8000a94:	40010c00 	.word	0x40010c00
 8000a98:	40010000 	.word	0x40010000

08000a9c <NMI_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
=======
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <HardFault_Handler>:
=======
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <HardFault_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
=======
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000ae8:	e7fe      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aea <MemManage_Handler>:
=======
 8000aac:	e7fe      	b.n	8000aac <HardFault_Handler+0x4>

08000aae <MemManage_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
=======
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000aee:	e7fe      	b.n	8000aee <MemManage_Handler+0x4>

08000af0 <BusFault_Handler>:
=======
 8000ab2:	e7fe      	b.n	8000ab2 <MemManage_Handler+0x4>

08000ab4 <BusFault_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
=======
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000af4:	e7fe      	b.n	8000af4 <BusFault_Handler+0x4>

08000af6 <UsageFault_Handler>:
=======
 8000ab8:	e7fe      	b.n	8000ab8 <BusFault_Handler+0x4>

08000aba <UsageFault_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
=======
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000afa:	e7fe      	b.n	8000afa <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:
=======
 8000abe:	e7fe      	b.n	8000abe <UsageFault_Handler+0x4>

08000ac0 <SVC_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
=======
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:
=======
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
=======
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <PendSV_Handler>:
=======
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <PendSV_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
=======
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Handler>:
=======
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
=======
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000b24:	f000 f8a2 	bl	8000c6c <HAL_IncTick>
=======
 8000ae8:	f000 f8a2 	bl	8000c30 <HAL_IncTick>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SystemInit>:
=======
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SystemInit>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <SystemInit+0x5c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <SystemInit+0x5c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	6013      	str	r3, [r2, #0]
=======
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <SystemInit+0x5c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <SystemInit+0x5c>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6013      	str	r3, [r2, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
<<<<<<< HEAD
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <SystemInit+0x5c>)
 8000b3e:	685a      	ldr	r2, [r3, #4]
 8000b40:	4911      	ldr	r1, [pc, #68]	; (8000b88 <SystemInit+0x5c>)
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <SystemInit+0x60>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	604b      	str	r3, [r1, #4]
=======
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <SystemInit+0x5c>)
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	4911      	ldr	r1, [pc, #68]	; (8000b4c <SystemInit+0x5c>)
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <SystemInit+0x60>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
<<<<<<< HEAD
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <SystemInit+0x5c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <SystemInit+0x5c>)
 8000b4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <SystemInit+0x5c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <SystemInit+0x5c>)
 8000b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <SystemInit+0x5c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <SystemInit+0x5c>)
 8000b6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b6e:	6053      	str	r3, [r2, #4]
=======
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <SystemInit+0x5c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <SystemInit+0x5c>)
 8000b12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <SystemInit+0x5c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SystemInit+0x5c>)
 8000b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SystemInit+0x5c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <SystemInit+0x5c>)
 8000b2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b32:	6053      	str	r3, [r2, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
<<<<<<< HEAD
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SystemInit+0x5c>)
 8000b72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b76:	609a      	str	r2, [r3, #8]
=======
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SystemInit+0x5c>)
 8000b36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b3a:	609a      	str	r2, [r3, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
<<<<<<< HEAD
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <SystemInit+0x64>)
 8000b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	f8ff0000 	.word	0xf8ff0000
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:
=======
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SystemInit+0x64>)
 8000b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b42:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	f8ff0000 	.word	0xf8ff0000
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
<<<<<<< HEAD
 8000b94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b96:	e003      	b.n	8000ba0 <LoopCopyDataInit>

08000b98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b9e:	3104      	adds	r1, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ba4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ba6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ba8:	d3f6      	bcc.n	8000b98 <CopyDataInit>
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bac:	e002      	b.n	8000bb4 <LoopFillZerobss>

08000bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bb0:	f842 3b04 	str.w	r3, [r2], #4

08000bb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bb8:	d3f9      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bba:	f7ff ffb7 	bl	8000b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f002 f9cb 	bl	8002f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fad3 	bl	800016c <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r3, =_sidata
 8000bc8:	08003010 	.word	0x08003010
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000bd8:	20000198 	.word	0x20000198

08000bdc <ADC1_2_IRQHandler>:
=======
 8000b58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b5a:	e003      	b.n	8000b64 <LoopCopyDataInit>

08000b5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b62:	3104      	adds	r1, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b64:	480a      	ldr	r0, [pc, #40]	; (8000b90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b6c:	d3f6      	bcc.n	8000b5c <CopyDataInit>
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b70:	e002      	b.n	8000b78 <LoopFillZerobss>

08000b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b74:	f842 3b04 	str.w	r3, [r2], #4

08000b78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b7c:	d3f9      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b7e:	f7ff ffb7 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f002 f819 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff fae1 	bl	800014c <main>
  bx lr
 8000b8a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b8c:	08002c5c 	.word	0x08002c5c
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b94:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b98:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b9c:	20000184 	.word	0x20000184

08000ba0 <ADC1_2_IRQHandler>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
=======
 8000ba0:	e7fe      	b.n	8000ba0 <ADC1_2_IRQHandler>
	...

08000ba4 <HAL_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
=======
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
=======
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_Init+0x28>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x28>)
 8000bae:	f043 0310 	orr.w	r3, r3, #16
 8000bb2:	6013      	str	r3, [r2, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 fb33 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fd9c 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
=======
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 fb33 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f808 	bl	8000bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fdc0 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_InitTick>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fb3d 	bl	80012aa <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
=======
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x54>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x58>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 fb3d 	bl	800126e <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00e      	b.n	8000c1c <HAL_InitTick+0x4c>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 fb13 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
=======
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d80a      	bhi.n	8000c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f000 fb13 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c10:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <HAL_InitTick+0x5c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
=======
 8000c16:	2300      	movs	r3, #0
 8000c18:	e000      	b.n	8000c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000000 	.word	0x20000000
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000194 	.word	0x20000194

08000c90 <HAL_GetTick>:
=======
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <HAL_IncTick+0x20>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000180 	.word	0x20000180

08000c54 <HAL_GetTick>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000194 	.word	0x20000194

08000ca4 <HAL_Delay>:
=======
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <HAL_GetTick+0x10>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000180 	.word	0x20000180

08000c68 <HAL_Delay>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_Delay+0x40>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <HAL_ADC_Init>:
=======
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c70:	f7ff fff0 	bl	8000c54 <HAL_GetTick>
 8000c74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c80:	d005      	beq.n	8000c8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_Delay+0x40>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c8e:	bf00      	nop
 8000c90:	f7ff ffe0 	bl	8000c54 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d8f7      	bhi.n	8000c90 <HAL_Delay+0x28>
  {
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_ADC_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e0be      	b.n	8000e88 <HAL_ADC_Init+0x1a0>
=======
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0be      	b.n	8000e4c <HAL_ADC_Init+0x1a0>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
=======
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d109      	bne.n	8000d2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fd38 	bl	800079c <HAL_ADC_MspInit>
=======
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fd5c 	bl	80007a8 <HAL_ADC_MspInit>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
<<<<<<< HEAD
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f000 f9ab 	bl	8001088 <ADC_ConversionStop_Disable>
 8000d32:	4603      	mov	r3, r0
 8000d34:	75fb      	strb	r3, [r7, #23]
=======
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f9ab 	bl	800104c <ADC_ConversionStop_Disable>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
<<<<<<< HEAD
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8099 	bne.w	8000e76 <HAL_ADC_Init+0x18e>
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 8095 	bne.w	8000e76 <HAL_ADC_Init+0x18e>
=======
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8099 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8095 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d54:	f023 0302 	bic.w	r3, r3, #2
 8000d58:	f043 0202 	orr.w	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d18:	f023 0302 	bic.w	r3, r3, #2
 8000d1c:	f043 0202 	orr.w	r2, r3, #2
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
<<<<<<< HEAD
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7b1b      	ldrb	r3, [r3, #12]
 8000d6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
=======
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7b1b      	ldrb	r3, [r3, #12]
 8000d32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
<<<<<<< HEAD
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d80:	d003      	beq.n	8000d8a <HAL_ADC_Init+0xa2>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d102      	bne.n	8000d90 <HAL_ADC_Init+0xa8>
 8000d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8e:	e000      	b.n	8000d92 <HAL_ADC_Init+0xaa>
 8000d90:	2300      	movs	r3, #0
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
=======
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d44:	d003      	beq.n	8000d4e <HAL_ADC_Init+0xa2>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d102      	bne.n	8000d54 <HAL_ADC_Init+0xa8>
 8000d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d52:	e000      	b.n	8000d56 <HAL_ADC_Init+0xaa>
 8000d54:	2300      	movs	r3, #0
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
<<<<<<< HEAD
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7d1b      	ldrb	r3, [r3, #20]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d119      	bne.n	8000dd4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7b1b      	ldrb	r3, [r3, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d109      	bne.n	8000dbc <HAL_ADC_Init+0xd4>
=======
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7d1b      	ldrb	r3, [r3, #20]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d119      	bne.n	8000d98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7b1b      	ldrb	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_ADC_Init+0xd4>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
<<<<<<< HEAD
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	035a      	lsls	r2, r3, #13
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e00b      	b.n	8000dd4 <HAL_ADC_Init+0xec>
=======
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	035a      	lsls	r2, r3, #13
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e00b      	b.n	8000d98 <HAL_ADC_Init+0xec>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f043 0220 	orr.w	r2, r3, #32
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	f043 0201 	orr.w	r2, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f043 0220 	orr.w	r2, r3, #32
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
<<<<<<< HEAD
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	605a      	str	r2, [r3, #4]
=======
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	605a      	str	r2, [r3, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
<<<<<<< HEAD
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <HAL_ADC_Init+0x1a8>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6093      	str	r3, [r2, #8]
=======
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_ADC_Init+0x1a8>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6093      	str	r3, [r2, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e04:	d003      	beq.n	8000e0e <HAL_ADC_Init+0x126>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d104      	bne.n	8000e18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	051b      	lsls	r3, r3, #20
 8000e16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dc8:	d003      	beq.n	8000dd2 <HAL_ADC_Init+0x126>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	051b      	lsls	r3, r3, #20
 8000dda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
<<<<<<< HEAD
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_ADC_Init+0x1ac>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d10b      	bne.n	8000e54 <HAL_ADC_Init+0x16c>
=======
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_ADC_Init+0x1ac>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10b      	bne.n	8000e18 <HAL_ADC_Init+0x16c>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	f043 0201 	orr.w	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e52:	e018      	b.n	8000e86 <HAL_ADC_Init+0x19e>
=======
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e16:	e018      	b.n	8000e4a <HAL_ADC_Init+0x19e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	f023 0312 	bic.w	r3, r3, #18
 8000e5c:	f043 0210 	orr.w	r2, r3, #16
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
=======
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	f023 0312 	bic.w	r3, r3, #18
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
<<<<<<< HEAD
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e74:	e007      	b.n	8000e86 <HAL_ADC_Init+0x19e>
=======
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e38:	e007      	b.n	8000e4a <HAL_ADC_Init+0x19e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	f043 0210 	orr.w	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	75fb      	strb	r3, [r7, #23]
=======
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f043 0210 	orr.w	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3718      	adds	r7, #24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	ffe1f7fd 	.word	0xffe1f7fd
 8000e94:	ff1f0efe 	.word	0xff1f0efe

08000e98 <HAL_ADC_ConfigChannel>:
=======
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	ffe1f7fd 	.word	0xffe1f7fd
 8000e58:	ff1f0efe 	.word	0xff1f0efe

08000e5c <HAL_ADC_ConfigChannel>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
<<<<<<< HEAD
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
=======
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <HAL_ADC_ConfigChannel+0x20>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e0dc      	b.n	8001072 <HAL_ADC_ConfigChannel+0x1da>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d101      	bne.n	8000e7c <HAL_ADC_ConfigChannel+0x20>
 8000e78:	2302      	movs	r3, #2
 8000e7a:	e0dc      	b.n	8001036 <HAL_ADC_ConfigChannel+0x1da>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b06      	cmp	r3, #6
 8000ec6:	d81c      	bhi.n	8000f02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3b05      	subs	r3, #5
 8000eda:	221f      	movs	r2, #31
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4019      	ands	r1, r3
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3b05      	subs	r3, #5
 8000ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
 8000f00:	e03c      	b.n	8000f7c <HAL_ADC_ConfigChannel+0xe4>
=======
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b06      	cmp	r3, #6
 8000e8a:	d81c      	bhi.n	8000ec6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3b05      	subs	r3, #5
 8000e9e:	221f      	movs	r2, #31
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4019      	ands	r1, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3b05      	subs	r3, #5
 8000eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec4:	e03c      	b.n	8000f40 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
<<<<<<< HEAD
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b0c      	cmp	r3, #12
 8000f08:	d81c      	bhi.n	8000f44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	3b23      	subs	r3, #35	; 0x23
 8000f1c:	221f      	movs	r2, #31
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	4019      	ands	r1, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	3b23      	subs	r3, #35	; 0x23
 8000f36:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
 8000f42:	e01b      	b.n	8000f7c <HAL_ADC_ConfigChannel+0xe4>
=======
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b0c      	cmp	r3, #12
 8000ecc:	d81c      	bhi.n	8000f08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	3b23      	subs	r3, #35	; 0x23
 8000ee0:	221f      	movs	r2, #31
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	4019      	ands	r1, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3b23      	subs	r3, #35	; 0x23
 8000efa:	fa00 f203 	lsl.w	r2, r0, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
 8000f06:	e01b      	b.n	8000f40 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
<<<<<<< HEAD
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	3b41      	subs	r3, #65	; 0x41
 8000f56:	221f      	movs	r2, #31
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4019      	ands	r1, r3
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b41      	subs	r3, #65	; 0x41
 8000f70:	fa00 f203 	lsl.w	r2, r0, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	3b41      	subs	r3, #65	; 0x41
 8000f1a:	221f      	movs	r2, #31
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4019      	ands	r1, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	3b41      	subs	r3, #65	; 0x41
 8000f34:	fa00 f203 	lsl.w	r2, r0, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
<<<<<<< HEAD
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	d91c      	bls.n	8000fbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	68d9      	ldr	r1, [r3, #12]
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	3b1e      	subs	r3, #30
 8000f96:	2207      	movs	r2, #7
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	4019      	ands	r1, r3
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	6898      	ldr	r0, [r3, #8]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4413      	add	r3, r2
 8000fae:	3b1e      	subs	r3, #30
 8000fb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	e019      	b.n	8000ff2 <HAL_ADC_ConfigChannel+0x15a>
=======
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	d91c      	bls.n	8000f82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68d9      	ldr	r1, [r3, #12]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	3b1e      	subs	r3, #30
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4019      	ands	r1, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	6898      	ldr	r0, [r3, #8]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	3b1e      	subs	r3, #30
 8000f74:	fa00 f203 	lsl.w	r2, r0, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	e019      	b.n	8000fb6 <HAL_ADC_ConfigChannel+0x15a>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
<<<<<<< HEAD
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6919      	ldr	r1, [r3, #16]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	2207      	movs	r2, #7
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	6898      	ldr	r0, [r3, #8]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	611a      	str	r2, [r3, #16]
=======
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6919      	ldr	r1, [r3, #16]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	2207      	movs	r2, #7
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4019      	ands	r1, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6898      	ldr	r0, [r3, #8]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	fa00 f203 	lsl.w	r2, r0, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	611a      	str	r2, [r3, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
<<<<<<< HEAD
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b10      	cmp	r3, #16
 8000ff8:	d003      	beq.n	8001002 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ffe:	2b11      	cmp	r3, #17
 8001000:	d132      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
=======
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b10      	cmp	r3, #16
 8000fbc:	d003      	beq.n	8000fc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fc2:	2b11      	cmp	r3, #17
 8000fc4:	d132      	bne.n	800102c <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
<<<<<<< HEAD
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <HAL_ADC_ConfigChannel+0x1e4>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d125      	bne.n	8001058 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d126      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001028:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b10      	cmp	r3, #16
 8001030:	d11a      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
=======
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a1d      	ldr	r2, [pc, #116]	; (8001040 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d125      	bne.n	800101c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d126      	bne.n	800102c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fec:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d11a      	bne.n	800102c <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_ADC_ConfigChannel+0x1e8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <HAL_ADC_ConfigChannel+0x1ec>)
 8001038:	fba2 2303 	umull	r2, r3, r2, r3
 800103c:	0c9a      	lsrs	r2, r3, #18
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001048:	e002      	b.n	8001050 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	3b01      	subs	r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f9      	bne.n	800104a <HAL_ADC_ConfigChannel+0x1b2>
 8001056:	e007      	b.n	8001068 <HAL_ADC_ConfigChannel+0x1d0>
=======
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8001000:	0c9a      	lsrs	r2, r3, #18
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800100c:	e002      	b.n	8001014 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3b01      	subs	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_ConfigChannel+0x1b2>
 800101a:	e007      	b.n	800102c <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f043 0220 	orr.w	r2, r3, #32
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
=======
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	f043 0220 	orr.w	r2, r3, #32
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40012400 	.word	0x40012400
 8001080:	20000000 	.word	0x20000000
 8001084:	431bde83 	.word	0x431bde83

08001088 <ADC_ConversionStop_Disable>:
=======
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40012400 	.word	0x40012400
 8001044:	20000000 	.word	0x20000000
 8001048:	431bde83 	.word	0x431bde83

0800104c <ADC_ConversionStop_Disable>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d127      	bne.n	80010f2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010b2:	f7ff fded 	bl	8000c90 <HAL_GetTick>
 80010b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010b8:	e014      	b.n	80010e4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ba:	f7ff fde9 	bl	8000c90 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d90d      	bls.n	80010e4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	f043 0210 	orr.w	r2, r3, #16
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e007      	b.n	80010f4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d0e3      	beq.n	80010ba <ADC_ConversionStop_Disable+0x32>
=======
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d127      	bne.n	80010b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001076:	f7ff fded 	bl	8000c54 <HAL_GetTick>
 800107a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800107c:	e014      	b.n	80010a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800107e:	f7ff fde9 	bl	8000c54 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d90d      	bls.n	80010a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	f043 0210 	orr.w	r2, r3, #16
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109c:	f043 0201 	orr.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e007      	b.n	80010b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d0e3      	beq.n	800107e <ADC_ConversionStop_Disable+0x32>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <__NVIC_SetPriorityGrouping>:
=======
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <__NVIC_SetPriorityGrouping>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
=======
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_SetPriority>:
=======
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
=======
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
=======
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <SysTick_Config>:
=======
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SysTick_Config>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff90 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
=======
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff90 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
=======
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff49 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
=======
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff49 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
=======
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001284:	f7ff ff5e 	bl	8001144 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
=======
 8001248:	f7ff ff5e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff90 	bl	8001178 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5f 	bl	8001124 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb0 	bl	8001218 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
=======
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffb0 	bl	80011dc <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_GPIO_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80012c4:	b480      	push	{r7}
 80012c6:	b08b      	sub	sp, #44	; 0x2c
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	; 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
=======
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 80012d6:	e127      	b.n	8001528 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012d8:	2201      	movs	r2, #1
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 8116 	bne.w	8001522 <HAL_GPIO_Init+0x25e>
=======
 800129a:	e127      	b.n	80014ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800129c:	2201      	movs	r2, #1
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8116 	bne.w	80014e6 <HAL_GPIO_Init+0x25e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d034      	beq.n	8001368 <HAL_GPIO_Init+0xa4>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d80d      	bhi.n	800131e <HAL_GPIO_Init+0x5a>
 8001302:	2b02      	cmp	r3, #2
 8001304:	d02b      	beq.n	800135e <HAL_GPIO_Init+0x9a>
 8001306:	2b02      	cmp	r3, #2
 8001308:	d804      	bhi.n	8001314 <HAL_GPIO_Init+0x50>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d031      	beq.n	8001372 <HAL_GPIO_Init+0xae>
 800130e:	2b01      	cmp	r3, #1
 8001310:	d01c      	beq.n	800134c <HAL_GPIO_Init+0x88>
=======
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b12      	cmp	r3, #18
 80012c0:	d034      	beq.n	800132c <HAL_GPIO_Init+0xa4>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d80d      	bhi.n	80012e2 <HAL_GPIO_Init+0x5a>
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x9a>
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d804      	bhi.n	80012d8 <HAL_GPIO_Init+0x50>
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d031      	beq.n	8001336 <HAL_GPIO_Init+0xae>
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d01c      	beq.n	8001310 <HAL_GPIO_Init+0x88>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8001312:	e048      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001314:	2b03      	cmp	r3, #3
 8001316:	d043      	beq.n	80013a0 <HAL_GPIO_Init+0xdc>
 8001318:	2b11      	cmp	r3, #17
 800131a:	d01b      	beq.n	8001354 <HAL_GPIO_Init+0x90>
          break;
 800131c:	e043      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800131e:	4a89      	ldr	r2, [pc, #548]	; (8001544 <HAL_GPIO_Init+0x280>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d026      	beq.n	8001372 <HAL_GPIO_Init+0xae>
 8001324:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_GPIO_Init+0x280>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d806      	bhi.n	8001338 <HAL_GPIO_Init+0x74>
 800132a:	4a87      	ldr	r2, [pc, #540]	; (8001548 <HAL_GPIO_Init+0x284>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d020      	beq.n	8001372 <HAL_GPIO_Init+0xae>
 8001330:	4a86      	ldr	r2, [pc, #536]	; (800154c <HAL_GPIO_Init+0x288>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01d      	beq.n	8001372 <HAL_GPIO_Init+0xae>
          break;
 8001336:	e036      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001338:	4a85      	ldr	r2, [pc, #532]	; (8001550 <HAL_GPIO_Init+0x28c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0xae>
 800133e:	4a85      	ldr	r2, [pc, #532]	; (8001554 <HAL_GPIO_Init+0x290>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d016      	beq.n	8001372 <HAL_GPIO_Init+0xae>
 8001344:	4a84      	ldr	r2, [pc, #528]	; (8001558 <HAL_GPIO_Init+0x294>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0xae>
          break;
 800134a:	e02c      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e028      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	3304      	adds	r3, #4
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e023      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	3308      	adds	r3, #8
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e01e      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	330c      	adds	r3, #12
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e019      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137a:	2304      	movs	r3, #4
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e012      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	611a      	str	r2, [r3, #16]
          break;
 8001392:	e008      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001394:	2308      	movs	r3, #8
 8001396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	615a      	str	r2, [r3, #20]
          break;
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	bf00      	nop
=======
 80012d6:	e048      	b.n	800136a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d043      	beq.n	8001364 <HAL_GPIO_Init+0xdc>
 80012dc:	2b11      	cmp	r3, #17
 80012de:	d01b      	beq.n	8001318 <HAL_GPIO_Init+0x90>
          break;
 80012e0:	e043      	b.n	800136a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012e2:	4a89      	ldr	r2, [pc, #548]	; (8001508 <HAL_GPIO_Init+0x280>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d026      	beq.n	8001336 <HAL_GPIO_Init+0xae>
 80012e8:	4a87      	ldr	r2, [pc, #540]	; (8001508 <HAL_GPIO_Init+0x280>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d806      	bhi.n	80012fc <HAL_GPIO_Init+0x74>
 80012ee:	4a87      	ldr	r2, [pc, #540]	; (800150c <HAL_GPIO_Init+0x284>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d020      	beq.n	8001336 <HAL_GPIO_Init+0xae>
 80012f4:	4a86      	ldr	r2, [pc, #536]	; (8001510 <HAL_GPIO_Init+0x288>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01d      	beq.n	8001336 <HAL_GPIO_Init+0xae>
          break;
 80012fa:	e036      	b.n	800136a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012fc:	4a85      	ldr	r2, [pc, #532]	; (8001514 <HAL_GPIO_Init+0x28c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0xae>
 8001302:	4a85      	ldr	r2, [pc, #532]	; (8001518 <HAL_GPIO_Init+0x290>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d016      	beq.n	8001336 <HAL_GPIO_Init+0xae>
 8001308:	4a84      	ldr	r2, [pc, #528]	; (800151c <HAL_GPIO_Init+0x294>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0xae>
          break;
 800130e:	e02c      	b.n	800136a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e028      	b.n	800136a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	3304      	adds	r3, #4
 800131e:	623b      	str	r3, [r7, #32]
          break;
 8001320:	e023      	b.n	800136a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	3308      	adds	r3, #8
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e01e      	b.n	800136a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	330c      	adds	r3, #12
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e019      	b.n	800136a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133e:	2304      	movs	r3, #4
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e012      	b.n	800136a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800134c:	2308      	movs	r3, #8
 800134e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	611a      	str	r2, [r3, #16]
          break;
 8001356:	e008      	b.n	800136a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	615a      	str	r2, [r3, #20]
          break;
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	bf00      	nop
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2bff      	cmp	r3, #255	; 0xff
 80013aa:	d801      	bhi.n	80013b0 <HAL_GPIO_Init+0xec>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	e001      	b.n	80013b4 <HAL_GPIO_Init+0xf0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3304      	adds	r3, #4
 80013b4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	2bff      	cmp	r3, #255	; 0xff
 80013ba:	d802      	bhi.n	80013c2 <HAL_GPIO_Init+0xfe>
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x104>
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	3b08      	subs	r3, #8
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	210f      	movs	r1, #15
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	401a      	ands	r2, r3
 80013da:	6a39      	ldr	r1, [r7, #32]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	431a      	orrs	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	601a      	str	r2, [r3, #0]
=======
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2bff      	cmp	r3, #255	; 0xff
 800136e:	d801      	bhi.n	8001374 <HAL_GPIO_Init+0xec>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	e001      	b.n	8001378 <HAL_GPIO_Init+0xf0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3304      	adds	r3, #4
 8001378:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2bff      	cmp	r3, #255	; 0xff
 800137e:	d802      	bhi.n	8001386 <HAL_GPIO_Init+0xfe>
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x104>
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	3b08      	subs	r3, #8
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	210f      	movs	r1, #15
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	401a      	ands	r2, r3
 800139e:	6a39      	ldr	r1, [r7, #32]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	431a      	orrs	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	601a      	str	r2, [r3, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 8096 	beq.w	8001522 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f6:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_GPIO_Init+0x298>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_GPIO_Init+0x298>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b56      	ldr	r3, [pc, #344]	; (800155c <HAL_GPIO_Init+0x298>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800140e:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_GPIO_Init+0x29c>)
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <HAL_GPIO_Init+0x2a0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x19e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4a      	ldr	r2, [pc, #296]	; (8001568 <HAL_GPIO_Init+0x2a4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x19a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_GPIO_Init+0x2a8>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x196>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_GPIO_Init+0x2ac>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x192>
 8001452:	2303      	movs	r3, #3
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x1a0>
 8001456:	2304      	movs	r3, #4
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x1a0>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x1a0>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x1a0>
 8001462:	2300      	movs	r3, #0
 8001464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001474:	493a      	ldr	r1, [pc, #232]	; (8001560 <HAL_GPIO_Init+0x29c>)
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8096 	beq.w	80014e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b59      	ldr	r3, [pc, #356]	; (8001520 <HAL_GPIO_Init+0x298>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a58      	ldr	r2, [pc, #352]	; (8001520 <HAL_GPIO_Init+0x298>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x298>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d2:	4a54      	ldr	r2, [pc, #336]	; (8001524 <HAL_GPIO_Init+0x29c>)
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4b      	ldr	r2, [pc, #300]	; (8001528 <HAL_GPIO_Init+0x2a0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d013      	beq.n	8001426 <HAL_GPIO_Init+0x19e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4a      	ldr	r2, [pc, #296]	; (800152c <HAL_GPIO_Init+0x2a4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00d      	beq.n	8001422 <HAL_GPIO_Init+0x19a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a49      	ldr	r2, [pc, #292]	; (8001530 <HAL_GPIO_Init+0x2a8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_GPIO_Init+0x196>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2ac>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_GPIO_Init+0x192>
 8001416:	2303      	movs	r3, #3
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x1a0>
 800141a:	2304      	movs	r3, #4
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x1a0>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x1a0>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x1a0>
 8001426:	2300      	movs	r3, #0
 8001428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001438:	493a      	ldr	r1, [pc, #232]	; (8001524 <HAL_GPIO_Init+0x29c>)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4938      	ldr	r1, [pc, #224]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	600b      	str	r3, [r1, #0]
 800149a:	e006      	b.n	80014aa <HAL_GPIO_Init+0x1e6>
=======
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4938      	ldr	r1, [pc, #224]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x1e6>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4933      	ldr	r1, [pc, #204]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
=======
 8001460:	4b35      	ldr	r3, [pc, #212]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	43db      	mvns	r3, r3
 8001468:	4933      	ldr	r1, [pc, #204]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 800146a:	4013      	ands	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	492e      	ldr	r1, [pc, #184]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
 80014c2:	e006      	b.n	80014d2 <HAL_GPIO_Init+0x20e>
=======
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	492e      	ldr	r1, [pc, #184]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
 8001486:	e006      	b.n	8001496 <HAL_GPIO_Init+0x20e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	4929      	ldr	r1, [pc, #164]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
=======
 8001488:	4b2b      	ldr	r3, [pc, #172]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	43db      	mvns	r3, r3
 8001490:	4929      	ldr	r1, [pc, #164]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 8001492:	4013      	ands	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	4924      	ldr	r1, [pc, #144]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x236>
=======
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	4924      	ldr	r1, [pc, #144]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x236>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	491f      	ldr	r1, [pc, #124]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
=======
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	491f      	ldr	r1, [pc, #124]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	491a      	ldr	r1, [pc, #104]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	60cb      	str	r3, [r1, #12]
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x25e>
=======
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d006      	beq.n	80014d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	491a      	ldr	r1, [pc, #104]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	60cb      	str	r3, [r1, #12]
 80014d6:	e006      	b.n	80014e6 <HAL_GPIO_Init+0x25e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	43db      	mvns	r3, r3
 800151c:	4915      	ldr	r1, [pc, #84]	; (8001574 <HAL_GPIO_Init+0x2b0>)
 800151e:	4013      	ands	r3, r2
 8001520:	60cb      	str	r3, [r1, #12]
=======
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	43db      	mvns	r3, r3
 80014e0:	4915      	ldr	r1, [pc, #84]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	60cb      	str	r3, [r1, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }

	position++;
<<<<<<< HEAD
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	f47f aed0 	bne.w	80012d8 <HAL_GPIO_Init+0x14>
  }
}
 8001538:	bf00      	nop
 800153a:	372c      	adds	r7, #44	; 0x2c
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	10210000 	.word	0x10210000
 8001548:	10110000 	.word	0x10110000
 800154c:	10120000 	.word	0x10120000
 8001550:	10310000 	.word	0x10310000
 8001554:	10320000 	.word	0x10320000
 8001558:	10220000 	.word	0x10220000
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	40010800 	.word	0x40010800
 8001568:	40010c00 	.word	0x40010c00
 800156c:	40011000 	.word	0x40011000
 8001570:	40011400 	.word	0x40011400
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_WritePin>:
=======
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	3301      	adds	r3, #1
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f47f aed0 	bne.w	800129c <HAL_GPIO_Init+0x14>
  }
}
 80014fc:	bf00      	nop
 80014fe:	372c      	adds	r7, #44	; 0x2c
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	10210000 	.word	0x10210000
 800150c:	10110000 	.word	0x10110000
 8001510:	10120000 	.word	0x10120000
 8001514:	10310000 	.word	0x10310000
 8001518:	10320000 	.word	0x10320000
 800151c:	10220000 	.word	0x10220000
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000
 8001528:	40010800 	.word	0x40010800
 800152c:	40010c00 	.word	0x40010c00
 8001530:	40011000 	.word	0x40011000
 8001534:	40011400 	.word	0x40011400
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_WritePin>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
=======
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	611a      	str	r2, [r3, #16]
=======
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	611a      	str	r2, [r3, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	887b      	ldrh	r3, [r7, #2]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c8:	887a      	ldrh	r2, [r7, #2]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	611a      	str	r2, [r3, #16]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <HAL_I2C_Init>:
=======
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	611a      	str	r2, [r3, #16]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <HAL_I2C_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
=======
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e10f      	b.n	800180a <HAL_I2C_Init+0x232>
=======
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e10f      	b.n	800179e <HAL_I2C_Init+0x232>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d106      	bne.n	8001598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff f920 	bl	8000844 <HAL_I2C_MspInit>
=======
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff f95c 	bl	8000850 <HAL_I2C_MspInit>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2224      	movs	r2, #36	; 0x24
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800161c:	f000 fce6 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8001620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a7b      	ldr	r2, [pc, #492]	; (8001814 <HAL_I2C_Init+0x23c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d807      	bhi.n	800163c <HAL_I2C_Init+0x64>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a7a      	ldr	r2, [pc, #488]	; (8001818 <HAL_I2C_Init+0x240>)
 8001630:	4293      	cmp	r3, r2
 8001632:	bf94      	ite	ls
 8001634:	2301      	movls	r3, #1
 8001636:	2300      	movhi	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	e006      	b.n	800164a <HAL_I2C_Init+0x72>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4a77      	ldr	r2, [pc, #476]	; (800181c <HAL_I2C_Init+0x244>)
 8001640:	4293      	cmp	r3, r2
 8001642:	bf94      	ite	ls
 8001644:	2301      	movls	r3, #1
 8001646:	2300      	movhi	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0db      	b.n	800180a <HAL_I2C_Init+0x232>
=======
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2224      	movs	r2, #36	; 0x24
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b0:	f000 fcda 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80015b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4a7b      	ldr	r2, [pc, #492]	; (80017a8 <HAL_I2C_Init+0x23c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d807      	bhi.n	80015d0 <HAL_I2C_Init+0x64>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4a7a      	ldr	r2, [pc, #488]	; (80017ac <HAL_I2C_Init+0x240>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e006      	b.n	80015de <HAL_I2C_Init+0x72>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a77      	ldr	r2, [pc, #476]	; (80017b0 <HAL_I2C_Init+0x244>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0db      	b.n	800179e <HAL_I2C_Init+0x232>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4a72      	ldr	r2, [pc, #456]	; (8001820 <HAL_I2C_Init+0x248>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	0c9b      	lsrs	r3, r3, #18
 800165c:	60bb      	str	r3, [r7, #8]
=======
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a72      	ldr	r2, [pc, #456]	; (80017b4 <HAL_I2C_Init+0x248>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	60bb      	str	r3, [r7, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	430a      	orrs	r2, r1
 8001670:	605a      	str	r2, [r3, #4]
=======
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4a64      	ldr	r2, [pc, #400]	; (8001814 <HAL_I2C_Init+0x23c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d802      	bhi.n	800168c <HAL_I2C_Init+0xb4>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	3301      	adds	r3, #1
 800168a:	e009      	b.n	80016a0 <HAL_I2C_Init+0xc8>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001692:	fb02 f303 	mul.w	r3, r2, r3
 8001696:	4a63      	ldr	r2, [pc, #396]	; (8001824 <HAL_I2C_Init+0x24c>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	3301      	adds	r3, #1
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6213      	str	r3, [r2, #32]
=======
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a64      	ldr	r2, [pc, #400]	; (80017a8 <HAL_I2C_Init+0x23c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d802      	bhi.n	8001620 <HAL_I2C_Init+0xb4>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	e009      	b.n	8001634 <HAL_I2C_Init+0xc8>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001626:	fb02 f303 	mul.w	r3, r2, r3
 800162a:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <HAL_I2C_Init+0x24c>)
 800162c:	fba2 2303 	umull	r2, r3, r2, r3
 8001630:	099b      	lsrs	r3, r3, #6
 8001632:	3301      	adds	r3, #1
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	430b      	orrs	r3, r1
 800163a:	6213      	str	r3, [r2, #32]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4956      	ldr	r1, [pc, #344]	; (8001814 <HAL_I2C_Init+0x23c>)
 80016bc:	428b      	cmp	r3, r1
 80016be:	d80d      	bhi.n	80016dc <HAL_I2C_Init+0x104>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1e59      	subs	r1, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	bf38      	it	cc
 80016d8:	2304      	movcc	r3, #4
 80016da:	e04f      	b.n	800177c <HAL_I2C_Init+0x1a4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d111      	bne.n	8001708 <HAL_I2C_Init+0x130>
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1e58      	subs	r0, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6859      	ldr	r1, [r3, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	440b      	add	r3, r1
 80016f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	e012      	b.n	800172e <HAL_I2C_Init+0x156>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e58      	subs	r0, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6859      	ldr	r1, [r3, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	0099      	lsls	r1, r3, #2
 8001718:	440b      	add	r3, r1
 800171a:	fbb0 f3f3 	udiv	r3, r0, r3
 800171e:	3301      	adds	r3, #1
 8001720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Init+0x15e>
 8001732:	2301      	movs	r3, #1
 8001734:	e022      	b.n	800177c <HAL_I2C_Init+0x1a4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10e      	bne.n	800175c <HAL_I2C_Init+0x184>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1e58      	subs	r0, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6859      	ldr	r1, [r3, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	440b      	add	r3, r1
 800174c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001750:	3301      	adds	r3, #1
 8001752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175a:	e00f      	b.n	800177c <HAL_I2C_Init+0x1a4>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e58      	subs	r0, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	0099      	lsls	r1, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	6809      	ldr	r1, [r1, #0]
 8001780:	4313      	orrs	r3, r2
 8001782:	61cb      	str	r3, [r1, #28]
=======
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4956      	ldr	r1, [pc, #344]	; (80017a8 <HAL_I2C_Init+0x23c>)
 8001650:	428b      	cmp	r3, r1
 8001652:	d80d      	bhi.n	8001670 <HAL_I2C_Init+0x104>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1e59      	subs	r1, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001662:	3301      	adds	r3, #1
 8001664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001668:	2b04      	cmp	r3, #4
 800166a:	bf38      	it	cc
 800166c:	2304      	movcc	r3, #4
 800166e:	e04f      	b.n	8001710 <HAL_I2C_Init+0x1a4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d111      	bne.n	800169c <HAL_I2C_Init+0x130>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	440b      	add	r3, r1
 8001686:	fbb0 f3f3 	udiv	r3, r0, r3
 800168a:	3301      	adds	r3, #1
 800168c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf0c      	ite	eq
 8001694:	2301      	moveq	r3, #1
 8001696:	2300      	movne	r3, #0
 8001698:	b2db      	uxtb	r3, r3
 800169a:	e012      	b.n	80016c2 <HAL_I2C_Init+0x156>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	0099      	lsls	r1, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Init+0x15e>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e022      	b.n	8001710 <HAL_I2C_Init+0x1a4>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10e      	bne.n	80016f0 <HAL_I2C_Init+0x184>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1e58      	subs	r0, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6859      	ldr	r1, [r3, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	440b      	add	r3, r1
 80016e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ee:	e00f      	b.n	8001710 <HAL_I2C_Init+0x1a4>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	1e58      	subs	r0, r3, #1
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	440b      	add	r3, r1
 80016fe:	0099      	lsls	r1, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	fbb0 f3f3 	udiv	r3, r0, r3
 8001706:	3301      	adds	r3, #1
 8001708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	6809      	ldr	r1, [r1, #0]
 8001714:	4313      	orrs	r3, r2
 8001716:	61cb      	str	r3, [r1, #28]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69da      	ldr	r2, [r3, #28]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]
=======
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69da      	ldr	r2, [r3, #28]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6911      	ldr	r1, [r2, #16]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68d2      	ldr	r2, [r2, #12]
 80017b6:	4311      	orrs	r1, r2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	430b      	orrs	r3, r1
 80017be:	6093      	str	r3, [r2, #8]
=======
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800173e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6911      	ldr	r1, [r2, #16]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	4311      	orrs	r1, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	430b      	orrs	r3, r1
 8001752:	6093      	str	r3, [r2, #8]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	000186a0 	.word	0x000186a0
 8001818:	001e847f 	.word	0x001e847f
 800181c:	003d08ff 	.word	0x003d08ff
 8001820:	431bde83 	.word	0x431bde83
 8001824:	10624dd3 	.word	0x10624dd3

08001828 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_PWR_EnableBkUpAccess+0x14>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	420e0020 	.word	0x420e0020

08001840 <HAL_RCC_OscConfig>:
=======
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	000186a0 	.word	0x000186a0
 80017ac:	001e847f 	.word	0x001e847f
 80017b0:	003d08ff 	.word	0x003d08ff
 80017b4:	431bde83 	.word	0x431bde83
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <HAL_RCC_OscConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
=======
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e26c      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
=======
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e26c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8087 	beq.w	800196e <HAL_RCC_OscConfig+0x12e>
=======
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8087 	beq.w	80018ea <HAL_RCC_OscConfig+0x12e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00c      	beq.n	8001886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800186c:	4b8f      	ldr	r3, [pc, #572]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d112      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d10b      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06c      	beq.n	800196c <HAL_RCC_OscConfig+0x12c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d168      	bne.n	800196c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e246      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
=======
 80017dc:	4b92      	ldr	r3, [pc, #584]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d00c      	beq.n	8001802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017e8:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d112      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
 80017f4:	4b8c      	ldr	r3, [pc, #560]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d10b      	bne.n	800181a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d06c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x12c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d168      	bne.n	80018e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e246      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x76>
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a7f      	ldr	r2, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e02e      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7a      	ldr	r2, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a77      	ldr	r2, [pc, #476]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xbc>
 80018e2:	4b72      	ldr	r3, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a71      	ldr	r2, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018fc:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]
=======
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x76>
 8001824:	4b80      	ldr	r3, [pc, #512]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a7f      	ldr	r2, [pc, #508]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e02e      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x98>
 800183a:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7a      	ldr	r2, [pc, #488]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a77      	ldr	r2, [pc, #476]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xbc>
 800185e:	4b72      	ldr	r3, [pc, #456]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a71      	ldr	r2, [pc, #452]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a6e      	ldr	r2, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xd4>
 8001878:	4b6b      	ldr	r3, [pc, #428]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6a      	ldr	r2, [pc, #424]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a67      	ldr	r2, [pc, #412]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff f9b8 	bl	8000c90 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff f9b4 	bl	8000c90 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1fa      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe4>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
=======
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff f9dc 	bl	8000c54 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f9d8 	bl	8000c54 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1fa      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe4>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001944:	f7ff f9a4 	bl	8000c90 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff f9a0 	bl	8000c90 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1e6      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x10c>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
=======
 80018c0:	f7ff f9c8 	bl	8000c54 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f9c4 	bl	8000c54 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	; 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1e6      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x10c>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_OscConfig+0x202>
=======
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d063      	beq.n	80019be <HAL_RCC_OscConfig+0x202>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1ba      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
=======
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00b      	beq.n	800191a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001902:	4b49      	ldr	r3, [pc, #292]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b08      	cmp	r3, #8
 800190c:	d11c      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
 800190e:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d005      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e1ba      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4939      	ldr	r1, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
=======
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4939      	ldr	r1, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	e03a      	b.n	80019be <HAL_RCC_OscConfig+0x202>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff f959 	bl	8000c90 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f955 	bl	8000c90 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e19b      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1a2>
=======
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001950:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff f97d 	bl	8000c54 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff f979 	bl	8000c54 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e19b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0f0      	beq.n	800195e <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4927      	ldr	r1, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
=======
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x202>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f938 	bl	8000c90 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff f934 	bl	8000c90 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e17a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e4>
=======
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_RCC_OscConfig+0x270>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f95c 	bl	8000c54 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff f958 	bl	8000c54 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e17a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03a      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x284>
=======
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d03a      	beq.n	8001a40 <HAL_RCC_OscConfig+0x284>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f918 	bl	8000c90 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff f914 	bl	8000c90 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e15a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x224>
=======
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d019      	beq.n	8001a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff f93c 	bl	8000c54 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff f938 	bl	8000c54 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e15a      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x224>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fada 	bl	800203c <RCC_Delay>
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x284>
=======
 80019fe:	2001      	movs	r0, #1
 8001a00:	f000 fac6 	bl	8001f90 <RCC_Delay>
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x284>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff f8fe 	bl	8000c90 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f8fa 	bl	8000c90 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d908      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e140      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	42420000 	.word	0x42420000
 8001ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b9e      	ldr	r3, [pc, #632]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e9      	bne.n	8001a98 <HAL_RCC_OscConfig+0x258>
=======
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f922 	bl	8000c54 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a12:	e00f      	b.n	8001a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff f91e 	bl	8000c54 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d908      	bls.n	8001a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e140      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	42420000 	.word	0x42420000
 8001a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a34:	4b9e      	ldr	r3, [pc, #632]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e9      	bne.n	8001a14 <HAL_RCC_OscConfig+0x258>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a6 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
=======
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80a6 	beq.w	8001b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8001ad6:	4b97      	ldr	r3, [pc, #604]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a93      	ldr	r2, [pc, #588]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a8a      	ldr	r2, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff f8bb 	bl	8000c90 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff f8b7 	bl	8000c90 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0fd      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2de>
=======
 8001a52:	4b97      	ldr	r3, [pc, #604]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10d      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a93      	ldr	r2, [pc, #588]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b91      	ldr	r3, [pc, #580]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a76:	2301      	movs	r3, #1
 8001a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7a:	4b8e      	ldr	r3, [pc, #568]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a8a      	ldr	r2, [pc, #552]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f8df 	bl	8000c54 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a9a:	f7ff f8db 	bl	8000c54 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b64      	cmp	r3, #100	; 0x64
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e0fd      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	4b81      	ldr	r3, [pc, #516]	; (8001cb4 <HAL_RCC_OscConfig+0x4f8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x2de>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x312>
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e02d      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a72      	ldr	r2, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	e01c      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x356>
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a6c      	ldr	r2, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f86b 	bl	8000c90 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff f867 	bl	8000c90 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ab      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCC_OscConfig+0x37e>
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x3cc>
=======
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <HAL_RCC_OscConfig+0x312>
 8001ac0:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6213      	str	r3, [r2, #32]
 8001acc:	e02d      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x334>
 8001ad6:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a75      	ldr	r2, [pc, #468]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	6213      	str	r3, [r2, #32]
 8001aee:	e01c      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x356>
 8001af8:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e00b      	b.n	8001b2a <HAL_RCC_OscConfig+0x36e>
 8001b12:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a66      	ldr	r2, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b64      	ldr	r3, [pc, #400]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a63      	ldr	r2, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d015      	beq.n	8001b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f88f 	bl	8000c54 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff f88b 	bl	8000c54 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e0ab      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ee      	beq.n	8001b3a <HAL_RCC_OscConfig+0x37e>
 8001b5c:	e014      	b.n	8001b88 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001be2:	f7ff f855 	bl	8000c90 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f851 	bl	8000c90 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e095      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x3aa>
=======
 8001b5e:	f7ff f879 	bl	8000c54 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7ff f875 	bl	8000c54 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e095      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1ee      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]
=======
 8001b88:	7dfb      	ldrb	r3, [r7, #23]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8e:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b98:	61d3      	str	r3, [r2, #28]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8081 	beq.w	8001d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d061      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d146      	bne.n	8001cca <HAL_RCC_OscConfig+0x48a>
=======
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8081 	beq.w	8001ca6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d061      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d146      	bne.n	8001c46 <HAL_RCC_OscConfig+0x48a>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff f825 	bl	8000c90 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff f821 	bl	8000c90 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e067      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x40a>
=======
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f849 	bl	8000c54 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7ff f845 	bl	8000c54 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e067      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd8:	4b35      	ldr	r3, [pc, #212]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x40a>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
=======
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_OscConfig+0x444>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	492d      	ldr	r1, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
=======
 8001bee:	4b30      	ldr	r3, [pc, #192]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	492d      	ldr	r1, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a19      	ldr	r1, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	430b      	orrs	r3, r1
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fff5 	bl	8000c90 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fff1 	bl	8000c90 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e037      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x46a>
 8001cc8:	e02f      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
=======
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a19      	ldr	r1, [r3, #32]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	430b      	orrs	r3, r1
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f819 	bl	8000c54 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff f815 	bl	8000c54 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e037      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x46a>
 8001c44:	e02f      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe ffde 	bl	8000c90 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe ffda 	bl	8000c90 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e020      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x498>
 8001cf6:	e018      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
=======
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_RCC_OscConfig+0x4fc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f802 	bl	8000c54 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe fffe 	bl	8000c54 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e020      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x498>
 8001c72:	e018      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
=======
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e013      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
=======
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d106      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d001      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e000      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060

08001d40 <HAL_RCC_ClockConfig>:
=======
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42420060 	.word	0x42420060

08001cbc <HAL_RCC_ClockConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
=======
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0d0      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0d0      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0207 	bic.w	r2, r3, #7
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
=======
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4965      	ldr	r1, [pc, #404]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001cee:	4b63      	ldr	r3, [pc, #396]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b8      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x92>
=======
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d020      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x92>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dbe:	6053      	str	r3, [r2, #4]
=======
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a52      	ldr	r2, [pc, #328]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d3a:	6053      	str	r3, [r2, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
=======
 8001d3c:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	494d      	ldr	r1, [pc, #308]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d040      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
=======
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d040      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x120>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d115      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e07f      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e073      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e073      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4936      	ldr	r1, [pc, #216]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7fe ff2e 	bl	8000c90 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7fe ff2a 	bl	8000c90 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e053      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
=======
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06b      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f023 0203 	bic.w	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4936      	ldr	r1, [pc, #216]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dac:	f7fe ff52 	bl	8000c54 <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7fe ff4e 	bl	8000c54 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e053      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dca:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 020c 	and.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d1eb      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d210      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]
=======
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d210      	bcs.n	8001e0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	4922      	ldr	r1, [pc, #136]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e032      	b.n	8001e72 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
=======
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4916      	ldr	r1, [pc, #88]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
=======
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	490e      	ldr	r1, [pc, #56]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8001ece:	f000 f821 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fe8c 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08002ff0 	.word	0x08002ff0
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000004 	.word	0x20000004

08001f14 <HAL_RCC_GetSysClockFreq>:
=======
 8001e4a:	f000 f821 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e4e:	4601      	mov	r1, r0
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	091b      	lsrs	r3, r3, #4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <HAL_RCC_ClockConfig+0x1cc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_ClockConfig+0x1d0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe feb0 	bl	8000bd0 <HAL_InitTick>

  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40021000 	.word	0x40021000
 8001e84:	08002c3c 	.word	0x08002c3c
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8001f14:	b490      	push	{r4, r7}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
=======
 8001e90:	b490      	push	{r4, r7}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f1c:	1d3c      	adds	r4, r7, #4
 8001f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e98:	1d3c      	adds	r4, r7, #4
 8001e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	803b      	strh	r3, [r7, #0]
=======
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	803b      	strh	r3, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	623b      	str	r3, [r7, #32]
=======
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x40>
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_GetSysClockFreq+0x46>
 8001f52:	e02d      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8001eba:	4b23      	ldr	r3, [pc, #140]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d002      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ece:	e02d      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f56:	623b      	str	r3, [r7, #32]
      break;
 8001f58:	e02d      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed2:	623b      	str	r3, [r7, #32]
      break;
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f66:	4413      	add	r3, r2
 8001f68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d013      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x8c>
=======
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	0c9b      	lsrs	r3, r3, #18
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ee8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c5b      	lsrs	r3, r3, #17
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f86:	4413      	add	r3, r2
 8001f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f8c:	61bb      	str	r3, [r7, #24]
=======
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0c5b      	lsrs	r3, r3, #17
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f02:	4413      	add	r3, r2
 8001f04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f08:	61bb      	str	r3, [r7, #24]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f92:	fb02 f203 	mul.w	r2, r2, r3
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	e004      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x96>
=======
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	4a0f      	ldr	r2, [pc, #60]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0e:	fb02 f203 	mul.w	r2, r2, r3
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	e004      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	623b      	str	r3, [r7, #32]
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	623b      	str	r3, [r7, #32]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb2:	623b      	str	r3, [r7, #32]
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc90      	pop	{r4, r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	08002fc8 	.word	0x08002fc8
 8001fc8:	08002fd8 	.word	0x08002fd8
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	007a1200 	.word	0x007a1200
 8001fd4:	003d0900 	.word	0x003d0900

08001fd8 <HAL_RCC_GetHCLKFreq>:
=======
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2e:	623b      	str	r3, [r7, #32]
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc90      	pop	{r4, r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	08002c28 	.word	0x08002c28
 8001f44:	08002c38 	.word	0x08002c38
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	003d0900 	.word	0x003d0900

08001f54 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b02      	ldr	r3, [pc, #8]	; (8001fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000000 	.word	0x20000000

08001fec <HAL_RCC_GetPCLK1Freq>:
=======
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff0:	f7ff fff2 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4601      	mov	r1, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4a03      	ldr	r2, [pc, #12]	; (8002010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08003000 	.word	0x08003000

08002014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002018:	f7ff ffde 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 800201c:	4601      	mov	r1, r0
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	0adb      	lsrs	r3, r3, #11
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	4a03      	ldr	r2, [pc, #12]	; (8002038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800202a:	5cd3      	ldrb	r3, [r2, r3]
 800202c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	08003000 	.word	0x08003000

0800203c <RCC_Delay>:
=======
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	4601      	mov	r1, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08002c4c 	.word	0x08002c4c

08001f90 <RCC_Delay>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <RCC_Delay+0x34>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <RCC_Delay+0x38>)
 800204a:	fba2 2303 	umull	r2, r3, r2, r3
 800204e:	0a5b      	lsrs	r3, r3, #9
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002058:	bf00      	nop
  }
  while (Delay --);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e5a      	subs	r2, r3, #1
 800205e:	60fa      	str	r2, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f9      	bne.n	8002058 <RCC_Delay+0x1c>
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000
 8002074:	10624dd3 	.word	0x10624dd3

08002078 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <RCC_Delay+0x34>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <RCC_Delay+0x38>)
 8001f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa2:	0a5b      	lsrs	r3, r3, #9
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fac:	bf00      	nop
  }
  while (Delay --);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1e5a      	subs	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f9      	bne.n	8001fac <RCC_Delay+0x1c>
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	10624dd3 	.word	0x10624dd3

08001fcc <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
=======
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d07d      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x118>
=======
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d07d      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
<<<<<<< HEAD
 8002094:	2300      	movs	r3, #0
 8002096:	75fb      	strb	r3, [r7, #23]
=======
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75fb      	strb	r3, [r7, #23]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8002098:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10d      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ae:	61d3      	str	r3, [r2, #28]
 80020b0:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020bc:	2301      	movs	r3, #1
 80020be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d118      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020cc:	4b43      	ldr	r3, [pc, #268]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a42      	ldr	r2, [pc, #264]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d8:	f7fe fdda 	bl	8000c90 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	e008      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe fdd6 	bl	8000c90 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e06d      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
=======
 8001fec:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10d      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002002:	61d3      	str	r3, [r2, #28]
 8002004:	4b49      	ldr	r3, [pc, #292]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002010:	2301      	movs	r3, #1
 8002012:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d118      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202c:	f7fe fe12 	bl	8000c54 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	e008      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe fe0e 	bl	8000c54 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e06d      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002046:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x68>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 80020fe:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d02e      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d027      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800211c:	4b2e      	ldr	r3, [pc, #184]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002124:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002128:	2201      	movs	r2, #1
 800212a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002132:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d014      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe fda5 	bl	8000c90 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7fe fda1 	bl	8000c90 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e036      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0xd2>
=======
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d02e      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	429a      	cmp	r2, r3
 800206e:	d027      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002070:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002078:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002086:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d014      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe fddd 	bl	8000c54 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7fe fdd9 	bl	8000c54 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e036      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ee      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xd2>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4917      	ldr	r1, [pc, #92]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	4313      	orrs	r3, r2
 800217c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218e:	61d3      	str	r3, [r2, #28]
=======
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4917      	ldr	r1, [pc, #92]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e2:	61d3      	str	r3, [r2, #28]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	490b      	ldr	r1, [pc, #44]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
=======
 80020f0:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	490b      	ldr	r1, [pc, #44]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x154>
=======
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x154>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
<<<<<<< HEAD
 80021ba:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4904      	ldr	r1, [pc, #16]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
=======
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
<<<<<<< HEAD
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	42420440 	.word	0x42420440

080021e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b08d      	sub	sp, #52	; 0x34
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ec:	4b55      	ldr	r3, [pc, #340]	; (8002344 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80021ee:	f107 040c 	add.w	r4, r7, #12
 80021f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d07f      	beq.n	8002318 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002218:	2b10      	cmp	r3, #16
 800221a:	d002      	beq.n	8002222 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800221c:	2b01      	cmp	r3, #1
 800221e:	d048      	beq.n	80022b2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002220:	e08b      	b.n	800233a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002228:	4b48      	ldr	r3, [pc, #288]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d07f      	beq.n	8002334 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	0c9b      	lsrs	r3, r3, #18
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002240:	4413      	add	r3, r2
 8002242:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002246:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002252:	4b3e      	ldr	r3, [pc, #248]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0c5b      	lsrs	r3, r3, #17
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002260:	4413      	add	r3, r2
 8002262:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00d      	beq.n	800228e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002272:	4a37      	ldr	r2, [pc, #220]	; (8002350 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	fbb2 f2f3 	udiv	r2, r2, r3
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002282:	e004      	b.n	800228e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	4a33      	ldr	r2, [pc, #204]	; (8002354 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002288:	fb02 f303 	mul.w	r3, r2, r3
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800228e:	4b2f      	ldr	r3, [pc, #188]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229a:	d102      	bne.n	80022a2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022a0:	e048      	b.n	8002334 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80022a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	085b      	lsrs	r3, r3, #1
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80022b0:	e040      	b.n	8002334 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c2:	d108      	bne.n	80022d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80022ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022d4:	e01f      	b.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e0:	d109      	bne.n	80022f6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80022e2:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80022ee:	f649 4340 	movw	r3, #40000	; 0x9c40
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f4:	e00f      	b.n	8002316 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002300:	d11a      	bne.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d014      	beq.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800230e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002314:	e010      	b.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002316:	e00f      	b.n	8002338 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002318:	f7ff fe7c 	bl	8002014 <HAL_RCC_GetPCLK2Freq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0b9b      	lsrs	r3, r3, #14
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	3301      	adds	r3, #1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002332:	e002      	b.n	800233a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002334:	bf00      	nop
 8002336:	e000      	b.n	800233a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002338:	bf00      	nop
    }
  }
  return (frequency);
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800233c:	4618      	mov	r0, r3
 800233e:	3734      	adds	r7, #52	; 0x34
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	08002fdc 	.word	0x08002fdc
 8002348:	08002fec 	.word	0x08002fec
 800234c:	40021000 	.word	0x40021000
 8002350:	007a1200 	.word	0x007a1200
 8002354:	003d0900 	.word	0x003d0900
 8002358:	aaaaaaab 	.word	0xaaaaaaab

0800235c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e084      	b.n	800247c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7c5b      	ldrb	r3, [r3, #17]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe faca 	bl	800091c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f87a 	bl	8002488 <HAL_RTC_WaitForSynchro>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d004      	beq.n	80023a4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e06b      	b.n	800247c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f89c 	bl	80024e2 <RTC_EnterInitMode>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2204      	movs	r2, #4
 80023b4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e060      	b.n	800247c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0207 	bic.w	r2, r2, #7
 80023c8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80023d2:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <HAL_RTC_Init+0x128>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a2b      	ldr	r2, [pc, #172]	; (8002484 <HAL_RTC_Init+0x128>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80023de:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RTC_Init+0x128>)
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4926      	ldr	r1, [pc, #152]	; (8002484 <HAL_RTC_Init+0x128>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d003      	beq.n	8002402 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e00e      	b.n	8002420 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002402:	2001      	movs	r0, #1
 8002404:	f7ff feee 	bl	80021e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002408:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d104      	bne.n	800241a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2204      	movs	r2, #4
 8002414:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e030      	b.n	800247c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3b01      	subs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 010f 	bic.w	r1, r3, #15
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	0c1a      	lsrs	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	b291      	uxth	r1, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f870 	bl	8002532 <RTC_ExitInitMode>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2204      	movs	r2, #4
 800245c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00c      	b.n	800247c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800247a:	2300      	movs	r3, #0
  }
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40006c00 	.word	0x40006c00

08002488 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e01d      	b.n	80024da <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0208 	bic.w	r2, r2, #8
 80024ac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80024ae:	f7fe fbef 	bl	8000c90 <HAL_GetTick>
 80024b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80024b4:	e009      	b.n	80024ca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80024b6:	f7fe fbeb 	bl	8000c90 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c4:	d901      	bls.n	80024ca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e007      	b.n	80024da <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ee      	beq.n	80024b6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80024ee:	f7fe fbcf 	bl	8000c90 <HAL_GetTick>
 80024f2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80024f4:	e009      	b.n	800250a <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80024f6:	f7fe fbcb 	bl	8000c90 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002504:	d901      	bls.n	800250a <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e00f      	b.n	800252a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0210 	orr.w	r2, r2, #16
 8002526:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0210 	bic.w	r2, r2, #16
 800254c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800254e:	f7fe fb9f 	bl	8000c90 <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002554:	e009      	b.n	800256a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002556:	f7fe fb9b 	bl	8000c90 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002564:	d901      	bls.n	800256a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e007      	b.n	800257a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ee      	beq.n	8002556 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_TIM_Base_Init>:
=======
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	42420440 	.word	0x42420440

08002138 <HAL_TIM_Base_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e01d      	b.n	80025d0 <HAL_TIM_Base_Init+0x4e>
=======
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e01d      	b.n	8002186 <HAL_TIM_Base_Init+0x4e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d106      	bne.n	8002164 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fe f9db 	bl	8000964 <HAL_TIM_Base_MspInit>
=======
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fbe2 	bl	8000928 <HAL_TIM_Base_MspInit>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f000 f9b3 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_PWM_Init>:
=======
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3304      	adds	r3, #4
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f000 f9e4 	bl	8002544 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_TIM_PWM_Init>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e01d      	b.n	8002626 <HAL_TIM_PWM_Init+0x4e>
=======
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01d      	b.n	80021dc <HAL_TIM_PWM_Init+0x4e>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d106      	bne.n	80021ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe f9ce 	bl	80009a0 <HAL_TIM_PWM_MspInit>
=======
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7fe fbd5 	bl	8000964 <HAL_TIM_PWM_MspInit>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f000 f988 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_TIM_PWM_ConfigChannel>:
=======
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2202      	movs	r2, #2
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3304      	adds	r3, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4610      	mov	r0, r2
 80021ce:	f000 f9b9 	bl	8002544 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2201      	movs	r2, #1
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fc24 	bl	8002a44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_TIM_PWM_Start+0x60>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d107      	bne.n	8002216 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d007      	beq.n	8002238 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40012c00 	.word	0x40012c00

08002248 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
=======
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002646:	2302      	movs	r3, #2
 8002648:	e0b4      	b.n	80027b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0c      	cmp	r3, #12
 800265e:	f200 809f 	bhi.w	80027a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002662:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002668:	0800269d 	.word	0x0800269d
 800266c:	080027a1 	.word	0x080027a1
 8002670:	080027a1 	.word	0x080027a1
 8002674:	080027a1 	.word	0x080027a1
 8002678:	080026dd 	.word	0x080026dd
 800267c:	080027a1 	.word	0x080027a1
 8002680:	080027a1 	.word	0x080027a1
 8002684:	080027a1 	.word	0x080027a1
 8002688:	0800271f 	.word	0x0800271f
 800268c:	080027a1 	.word	0x080027a1
 8002690:	080027a1 	.word	0x080027a1
 8002694:	080027a1 	.word	0x080027a1
 8002698:	0800275f 	.word	0x0800275f
=======
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800225e:	2302      	movs	r3, #2
 8002260:	e0b4      	b.n	80023cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2202      	movs	r2, #2
 800226e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	f200 809f 	bhi.w	80023b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	080022b5 	.word	0x080022b5
 8002284:	080023b9 	.word	0x080023b9
 8002288:	080023b9 	.word	0x080023b9
 800228c:	080023b9 	.word	0x080023b9
 8002290:	080022f5 	.word	0x080022f5
 8002294:	080023b9 	.word	0x080023b9
 8002298:	080023b9 	.word	0x080023b9
 800229c:	080023b9 	.word	0x080023b9
 80022a0:	08002337 	.word	0x08002337
 80022a4:	080023b9 	.word	0x080023b9
 80022a8:	080023b9 	.word	0x080023b9
 80022ac:	080023b9 	.word	0x080023b9
 80022b0:	08002377 	.word	0x08002377
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f9a4 	bl	80029f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0208 	orr.w	r2, r2, #8
 80026b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6999      	ldr	r1, [r3, #24]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	619a      	str	r2, [r3, #24]
      break;
 80026da:	e062      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f9a4 	bl	8002608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0208 	orr.w	r2, r2, #8
 80022ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0204 	bic.w	r2, r2, #4
 80022de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6999      	ldr	r1, [r3, #24]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	619a      	str	r2, [r3, #24]
      break;
 80022f2:	e062      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f9ea 	bl	8002abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6999      	ldr	r1, [r3, #24]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	021a      	lsls	r2, r3, #8
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	619a      	str	r2, [r3, #24]
      break;
 800271c:	e041      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f9ea 	bl	80026d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800230e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6999      	ldr	r1, [r3, #24]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	021a      	lsls	r2, r3, #8
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	619a      	str	r2, [r3, #24]
      break;
 8002334:	e041      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fa33 	bl	8002b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0208 	orr.w	r2, r2, #8
 8002738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0204 	bic.w	r2, r2, #4
 8002748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69d9      	ldr	r1, [r3, #28]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	61da      	str	r2, [r3, #28]
      break;
 800275c:	e021      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fa33 	bl	80027a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0208 	orr.w	r2, r2, #8
 8002350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0204 	bic.w	r2, r2, #4
 8002360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	61da      	str	r2, [r3, #28]
      break;
 8002374:	e021      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa7d 	bl	8002c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	61da      	str	r2, [r3, #28]
      break;
 800279e:	e000      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fa7d 	bl	800287c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69d9      	ldr	r1, [r3, #28]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	61da      	str	r2, [r3, #28]
      break;
 80023b6:	e000      	b.n	80023ba <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    }

    default:
      break;
<<<<<<< HEAD
 80027a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_TIM_ConfigClockSource>:
=======
 80023b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_ConfigClockSource>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
=======
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIM_ConfigClockSource+0x18>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e0a6      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x166>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_TIM_ConfigClockSource+0x18>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0a6      	b.n	800253a <HAL_TIM_ConfigClockSource+0x166>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b40      	cmp	r3, #64	; 0x40
 800280a:	d067      	beq.n	80028dc <HAL_TIM_ConfigClockSource+0x120>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d80b      	bhi.n	8002828 <HAL_TIM_ConfigClockSource+0x6c>
 8002810:	2b10      	cmp	r3, #16
 8002812:	d073      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
 8002814:	2b10      	cmp	r3, #16
 8002816:	d802      	bhi.n	800281e <HAL_TIM_ConfigClockSource+0x62>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d06f      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
=======
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800240a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002412:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d067      	beq.n	80024f4 <HAL_TIM_ConfigClockSource+0x120>
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d80b      	bhi.n	8002440 <HAL_TIM_ConfigClockSource+0x6c>
 8002428:	2b10      	cmp	r3, #16
 800242a:	d073      	beq.n	8002514 <HAL_TIM_ConfigClockSource+0x140>
 800242c:	2b10      	cmp	r3, #16
 800242e:	d802      	bhi.n	8002436 <HAL_TIM_ConfigClockSource+0x62>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d06f      	beq.n	8002514 <HAL_TIM_ConfigClockSource+0x140>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
<<<<<<< HEAD
 800281c:	e078      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800281e:	2b20      	cmp	r3, #32
 8002820:	d06c      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
 8002822:	2b30      	cmp	r3, #48	; 0x30
 8002824:	d06a      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002826:	e073      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002828:	2b70      	cmp	r3, #112	; 0x70
 800282a:	d00d      	beq.n	8002848 <HAL_TIM_ConfigClockSource+0x8c>
 800282c:	2b70      	cmp	r3, #112	; 0x70
 800282e:	d804      	bhi.n	800283a <HAL_TIM_ConfigClockSource+0x7e>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d033      	beq.n	800289c <HAL_TIM_ConfigClockSource+0xe0>
 8002834:	2b60      	cmp	r3, #96	; 0x60
 8002836:	d041      	beq.n	80028bc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002838:	e06a      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d066      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x152>
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002844:	d017      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002846:	e063      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6899      	ldr	r1, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f000 fac9 	bl	8002dee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800286a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e04c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6899      	ldr	r1, [r3, #8]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 fab2 	bl	8002dee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002898:	609a      	str	r2, [r3, #8]
      break;
 800289a:	e039      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	461a      	mov	r2, r3
 80028aa:	f000 fa29 	bl	8002d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2150      	movs	r1, #80	; 0x50
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fa80 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028ba:	e029      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	461a      	mov	r2, r3
 80028ca:	f000 fa47 	bl	8002d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2160      	movs	r1, #96	; 0x60
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fa70 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028da:	e019      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	461a      	mov	r2, r3
 80028ea:	f000 fa09 	bl	8002d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2140      	movs	r1, #64	; 0x40
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fa60 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 80028fa:	e009      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f000 fa57 	bl	8002dba <TIM_ITRx_SetConfig>
      break;
 800290c:	e000      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800290e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <TIM_Base_SetConfig>:
=======
 8002434:	e078      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002436:	2b20      	cmp	r3, #32
 8002438:	d06c      	beq.n	8002514 <HAL_TIM_ConfigClockSource+0x140>
 800243a:	2b30      	cmp	r3, #48	; 0x30
 800243c:	d06a      	beq.n	8002514 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800243e:	e073      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d00d      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x8c>
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d804      	bhi.n	8002452 <HAL_TIM_ConfigClockSource+0x7e>
 8002448:	2b50      	cmp	r3, #80	; 0x50
 800244a:	d033      	beq.n	80024b4 <HAL_TIM_ConfigClockSource+0xe0>
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d041      	beq.n	80024d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002450:	e06a      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002456:	d066      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x152>
 8002458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245c:	d017      	beq.n	800248e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800245e:	e063      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f000 fac9 	bl	8002a06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002482:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]
      break;
 800248c:	e04c      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f000 fab2 	bl	8002a06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024b0:	609a      	str	r2, [r3, #8]
      break;
 80024b2:	e039      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6859      	ldr	r1, [r3, #4]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	461a      	mov	r2, r3
 80024c2:	f000 fa29 	bl	8002918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2150      	movs	r1, #80	; 0x50
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fa80 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 80024d2:	e029      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f000 fa47 	bl	8002974 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2160      	movs	r1, #96	; 0x60
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fa70 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 80024f2:	e019      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	461a      	mov	r2, r3
 8002502:	f000 fa09 	bl	8002918 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2140      	movs	r1, #64	; 0x40
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fa60 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 8002512:	e009      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	4610      	mov	r0, r2
 8002520:	f000 fa57 	bl	80029d2 <TIM_ITRx_SetConfig>
      break;
 8002524:	e000      	b.n	8002528 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <TIM_Base_SetConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00b      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d007      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <TIM_Base_SetConfig+0xbc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0x30>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a25      	ldr	r2, [pc, #148]	; (80029ec <TIM_Base_SetConfig+0xc0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d108      	bne.n	800296e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <TIM_Base_SetConfig+0xbc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <TIM_Base_SetConfig+0xc0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
=======
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <TIM_Base_SetConfig+0xb8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00b      	beq.n	8002574 <TIM_Base_SetConfig+0x30>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d007      	beq.n	8002574 <TIM_Base_SetConfig+0x30>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <TIM_Base_SetConfig+0xbc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <TIM_Base_SetConfig+0x30>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a25      	ldr	r2, [pc, #148]	; (8002604 <TIM_Base_SetConfig+0xc0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d108      	bne.n	8002586 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <TIM_Base_SetConfig+0xb8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <TIM_Base_SetConfig+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <TIM_Base_SetConfig+0xbc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <TIM_Base_SetConfig+0xc0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <TIM_Base_SetConfig+0xb8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <TIM_Base_SetConfig+0xb8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d103      	bne.n	80025ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	615a      	str	r2, [r3, #20]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800

080029f0 <TIM_OC1_SetConfig>:
=======
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	615a      	str	r2, [r3, #20]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800

08002608 <TIM_OC1_SetConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
=======
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f023 0201 	bic.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0302 	bic.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <TIM_OC1_SetConfig+0xc8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d10c      	bne.n	8002a66 <TIM_OC1_SetConfig+0x76>
=======
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0201 	bic.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <TIM_OC1_SetConfig+0xc8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10c      	bne.n	800267e <TIM_OC1_SetConfig+0x76>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0308 	bic.w	r3, r3, #8
 8002a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <TIM_OC1_SetConfig+0xc8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d111      	bne.n	8002a92 <TIM_OC1_SetConfig+0xa2>
=======
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0308 	bic.w	r3, r3, #8
 800266a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <TIM_OC1_SetConfig+0xc8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <TIM_OC1_SetConfig+0xa2>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
=======
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800268c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
}
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40012c00 	.word	0x40012c00

08002abc <TIM_OC2_SetConfig>:
=======
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	621a      	str	r2, [r3, #32]
}
 80026c4:	bf00      	nop
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40012c00 	.word	0x40012c00

080026d4 <TIM_OC2_SetConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
=======
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0210 	bic.w	r2, r3, #16
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0320 	bic.w	r3, r3, #32
 8002b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <TIM_OC2_SetConfig+0xd0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10d      	bne.n	8002b38 <TIM_OC2_SetConfig+0x7c>
=======
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0210 	bic.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 0320 	bic.w	r3, r3, #32
 800271e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <TIM_OC2_SetConfig+0xd0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10d      	bne.n	8002750 <TIM_OC2_SetConfig+0x7c>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b36:	617b      	str	r3, [r7, #20]
=======
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274e:	617b      	str	r3, [r7, #20]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <TIM_OC2_SetConfig+0xd0>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d113      	bne.n	8002b68 <TIM_OC2_SetConfig+0xac>
=======
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <TIM_OC2_SetConfig+0xd0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d113      	bne.n	8002780 <TIM_OC2_SetConfig+0xac>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
=======
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800275e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	40012c00 	.word	0x40012c00

08002b90 <TIM_OC3_SetConfig>:
=======
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00

080027a8 <TIM_OC3_SetConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
=======
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_OC3_SetConfig+0xd0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10d      	bne.n	8002c0a <TIM_OC3_SetConfig+0x7a>
=======
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <TIM_OC3_SetConfig+0xd0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10d      	bne.n	8002822 <TIM_OC3_SetConfig+0x7a>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <TIM_OC3_SetConfig+0xd0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d113      	bne.n	8002c3a <TIM_OC3_SetConfig+0xaa>
=======
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800280c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <TIM_OC3_SetConfig+0xd0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d113      	bne.n	8002852 <TIM_OC3_SetConfig+0xaa>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
=======
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	621a      	str	r2, [r3, #32]
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40012c00 	.word	0x40012c00

08002c64 <TIM_OC4_SetConfig>:
=======
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	621a      	str	r2, [r3, #32]
}
 800286c:	bf00      	nop
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40012c00 	.word	0x40012c00

0800287c <TIM_OC4_SetConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
=======
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <TIM_OC4_SetConfig+0x98>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d109      	bne.n	8002cd8 <TIM_OC4_SetConfig+0x74>
=======
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	031b      	lsls	r3, r3, #12
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <TIM_OC4_SetConfig+0x98>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d109      	bne.n	80028f0 <TIM_OC4_SetConfig+0x74>
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	019b      	lsls	r3, r3, #6
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
=======
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	621a      	str	r2, [r3, #32]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	40012c00 	.word	0x40012c00

08002d00 <TIM_TI1_ConfigInputStage>:
=======
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00

08002918 <TIM_TI1_ConfigInputStage>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
=======
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0201 	bic.w	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 030a 	bic.w	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <TIM_TI2_ConfigInputStage>:
=======
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	f023 0201 	bic.w	r2, r3, #1
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f023 030a 	bic.w	r3, r3, #10
 8002954:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <TIM_TI2_ConfigInputStage>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
=======
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f023 0210 	bic.w	r2, r3, #16
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	031b      	lsls	r3, r3, #12
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	621a      	str	r2, [r3, #32]
}
 8002db0:	bf00      	nop
 8002db2:	371c      	adds	r7, #28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <TIM_ITRx_SetConfig>:
=======
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f023 0210 	bic.w	r2, r3, #16
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800299e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	031b      	lsls	r3, r3, #12
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	621a      	str	r2, [r3, #32]
}
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <TIM_ITRx_SetConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
=======
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f043 0307 	orr.w	r3, r3, #7
 8002ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	609a      	str	r2, [r3, #8]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <TIM_ETR_SetConfig>:
=======
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f043 0307 	orr.w	r3, r3, #7
 80029f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ETR_SetConfig>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8002dee:	b480      	push	{r7}
 8002df0:	b087      	sub	sp, #28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	021a      	lsls	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8002a06:	b480      	push	{r7}
 8002a08:	b087      	sub	sp, #28
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	609a      	str	r2, [r3, #8]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2201      	movs	r2, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	f003 031f 	and.w	r3, r3, #31
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	621a      	str	r2, [r3, #32]
}
 8002a82:	bf00      	nop
 8002a84:	371c      	adds	r7, #28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
=======
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e032      	b.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e7c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e032      	b.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002adc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
=======
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e03d      	b.n	8002f4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e03d      	b.n	8002bac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
=======
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
	...

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	4e0c      	ldr	r6, [pc, #48]	; (8002f90 <__libc_init_array+0x38>)
 8002f5e:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f60:	1ba4      	subs	r4, r4, r6
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	42a5      	cmp	r5, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	f000 f822 	bl	8002fb0 <_init>
 8002f6c:	2500      	movs	r5, #0
 8002f6e:	4e0a      	ldr	r6, [pc, #40]	; (8002f98 <__libc_init_array+0x40>)
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <__libc_init_array+0x44>)
 8002f72:	1ba4      	subs	r4, r4, r6
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	42a5      	cmp	r5, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f80:	4798      	blx	r3
 8002f82:	3501      	adds	r5, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f8a:	4798      	blx	r3
 8002f8c:	3501      	adds	r5, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	08003008 	.word	0x08003008
 8002f94:	08003008 	.word	0x08003008
 8002f98:	08003008 	.word	0x08003008
 8002f9c:	0800300c 	.word	0x0800300c

08002fa0 <memset>:
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4402      	add	r2, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	f803 1b01 	strb.w	r1, [r3], #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <_init>:
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	bf00      	nop
 8002fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb6:	bc08      	pop	{r3}
 8002fb8:	469e      	mov	lr, r3
 8002fba:	4770      	bx	lr

08002fbc <_fini>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr
=======
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
	...

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2500      	movs	r5, #0
 8002bbc:	4e0c      	ldr	r6, [pc, #48]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbe:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bc0:	1ba4      	subs	r4, r4, r6
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	42a5      	cmp	r5, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	f000 f822 	bl	8002c10 <_init>
 8002bcc:	2500      	movs	r5, #0
 8002bce:	4e0a      	ldr	r6, [pc, #40]	; (8002bf8 <__libc_init_array+0x40>)
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <__libc_init_array+0x44>)
 8002bd2:	1ba4      	subs	r4, r4, r6
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	42a5      	cmp	r5, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002be0:	4798      	blx	r3
 8002be2:	3501      	adds	r5, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bea:	4798      	blx	r3
 8002bec:	3501      	adds	r5, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	08002c54 	.word	0x08002c54
 8002bf4:	08002c54 	.word	0x08002c54
 8002bf8:	08002c54 	.word	0x08002c54
 8002bfc:	08002c58 	.word	0x08002c58

08002c00 <memset>:
 8002c00:	4603      	mov	r3, r0
 8002c02:	4402      	add	r2, r0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d100      	bne.n	8002c0a <memset+0xa>
 8002c08:	4770      	bx	lr
 8002c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0e:	e7f9      	b.n	8002c04 <memset+0x4>

08002c10 <_init>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr

08002c1c <_fini>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr
>>>>>>> 761755c3f7fc40dfde3015023c0b1ea1629d60ff
