
BLINK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004200  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004398  08004398  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004398  08004398  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004398  08004398  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08004410  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004410  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150ea  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a78  00000000  00000000  00035183  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  00038da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017580  00000000  00000000  00039dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ebc0  00000000  00000000  00051358  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007bbdc  00000000  00000000  0005ff18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbaf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b94  00000000  00000000  000dbb70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080042f4 	.word	0x080042f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080042f4 	.word	0x080042f4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Error_Handler>:

#include "Error.h"


void Error_Handler(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr

08000168 <MX_TIM1_Init>:
#include "Initialization.h"
#include "Error.h"


 void MX_TIM1_Init(void)
{
 8000168:	b580      	push	{r7, lr}
 800016a:	b096      	sub	sp, #88	; 0x58
 800016c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800016e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000172:	2200      	movs	r2, #0
 8000174:	601a      	str	r2, [r3, #0]
 8000176:	605a      	str	r2, [r3, #4]
 8000178:	609a      	str	r2, [r3, #8]
 800017a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800017c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]
 8000196:	615a      	str	r2, [r3, #20]
 8000198:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2220      	movs	r2, #32
 800019e:	2100      	movs	r1, #0
 80001a0:	4618      	mov	r0, r3
 80001a2:	f003 fc8d 	bl	8003ac0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80001a6:	4b50      	ldr	r3, [pc, #320]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001a8:	4a50      	ldr	r2, [pc, #320]	; (80002ec <MX_TIM1_Init+0x184>)
 80001aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80001ac:	4b4e      	ldr	r3, [pc, #312]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80001b2:	4b4d      	ldr	r3, [pc, #308]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80001b8:	4b4b      	ldr	r3, [pc, #300]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80001be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80001c0:	4b49      	ldr	r3, [pc, #292]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80001c6:	4b48      	ldr	r3, [pc, #288]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80001cc:	4b46      	ldr	r3, [pc, #280]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80001d2:	4845      	ldr	r0, [pc, #276]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001d4:	f002 fcff 	bl	8002bd6 <HAL_TIM_Base_Init>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80001de:	f7ff ffbd 	bl	800015c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80001e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80001e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80001ec:	4619      	mov	r1, r3
 80001ee:	483e      	ldr	r0, [pc, #248]	; (80002e8 <MX_TIM1_Init+0x180>)
 80001f0:	f002 fe40 	bl	8002e74 <HAL_TIM_ConfigClockSource>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80001fa:	f7ff ffaf 	bl	800015c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80001fe:	483a      	ldr	r0, [pc, #232]	; (80002e8 <MX_TIM1_Init+0x180>)
 8000200:	f002 fd14 	bl	8002c2c <HAL_TIM_PWM_Init>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800020a:	f7ff ffa7 	bl	800015c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800020e:	2300      	movs	r3, #0
 8000210:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000212:	2300      	movs	r3, #0
 8000214:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800021a:	4619      	mov	r1, r3
 800021c:	4832      	ldr	r0, [pc, #200]	; (80002e8 <MX_TIM1_Init+0x180>)
 800021e:	f003 f985 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000228:	f7ff ff98 	bl	800015c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800022c:	2360      	movs	r3, #96	; 0x60
 800022e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000230:	2300      	movs	r3, #0
 8000232:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000234:	2300      	movs	r3, #0
 8000236:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000238:	2300      	movs	r3, #0
 800023a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800023c:	2300      	movs	r3, #0
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000240:	2300      	movs	r3, #0
 8000242:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000244:	2300      	movs	r3, #0
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800024c:	2200      	movs	r2, #0
 800024e:	4619      	mov	r1, r3
 8000250:	4825      	ldr	r0, [pc, #148]	; (80002e8 <MX_TIM1_Init+0x180>)
 8000252:	f002 fd49 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800025c:	f7ff ff7e 	bl	800015c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000264:	2204      	movs	r2, #4
 8000266:	4619      	mov	r1, r3
 8000268:	481f      	ldr	r0, [pc, #124]	; (80002e8 <MX_TIM1_Init+0x180>)
 800026a:	f002 fd3d 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000274:	f7ff ff72 	bl	800015c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800027c:	2208      	movs	r2, #8
 800027e:	4619      	mov	r1, r3
 8000280:	4819      	ldr	r0, [pc, #100]	; (80002e8 <MX_TIM1_Init+0x180>)
 8000282:	f002 fd31 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800028c:	f7ff ff66 	bl	800015c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000294:	220c      	movs	r2, #12
 8000296:	4619      	mov	r1, r3
 8000298:	4813      	ldr	r0, [pc, #76]	; (80002e8 <MX_TIM1_Init+0x180>)
 800029a:	f002 fd25 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80002a4:	f7ff ff5a 	bl	800015c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80002bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4807      	ldr	r0, [pc, #28]	; (80002e8 <MX_TIM1_Init+0x180>)
 80002cc:	f003 f972 	bl	80035b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80002d6:	f7ff ff41 	bl	800015c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80002da:	4803      	ldr	r0, [pc, #12]	; (80002e8 <MX_TIM1_Init+0x180>)
 80002dc:	f000 fc88 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 80002e0:	bf00      	nop
 80002e2:	3758      	adds	r7, #88	; 0x58
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000184 	.word	0x20000184
 80002ec:	40012c00 	.word	0x40012c00

080002f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
 void MX_TIM2_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	; 0x28
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f6:	f107 0320 	add.w	r3, r7, #32
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]
 800030e:	615a      	str	r2, [r3, #20]
 8000310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000312:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <MX_TIM2_Init+0xc0>)
 8000314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000318:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800031a:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <MX_TIM2_Init+0xc0>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000320:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <MX_TIM2_Init+0xc0>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MX_TIM2_Init+0xc0>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <MX_TIM2_Init+0xc0>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <MX_TIM2_Init+0xc0>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000338:	481d      	ldr	r0, [pc, #116]	; (80003b0 <MX_TIM2_Init+0xc0>)
 800033a:	f002 fc77 	bl	8002c2c <HAL_TIM_PWM_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000344:	f7ff ff0a 	bl	800015c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034c:	2300      	movs	r3, #0
 800034e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000350:	f107 0320 	add.w	r3, r7, #32
 8000354:	4619      	mov	r1, r3
 8000356:	4816      	ldr	r0, [pc, #88]	; (80003b0 <MX_TIM2_Init+0xc0>)
 8000358:	f003 f8e8 	bl	800352c <HAL_TIMEx_MasterConfigSynchronization>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000362:	f7ff fefb 	bl	800015c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000366:	2360      	movs	r3, #96	; 0x60
 8000368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2200      	movs	r2, #0
 800037a:	4619      	mov	r1, r3
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <MX_TIM2_Init+0xc0>)
 800037e:	f002 fcb3 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000388:	f7ff fee8 	bl	800015c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2204      	movs	r2, #4
 8000390:	4619      	mov	r1, r3
 8000392:	4807      	ldr	r0, [pc, #28]	; (80003b0 <MX_TIM2_Init+0xc0>)
 8000394:	f002 fca8 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800039e:	f7ff fedd 	bl	800015c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <MX_TIM2_Init+0xc0>)
 80003a4:	f000 fc24 	bl	8000bf0 <HAL_TIM_MspPostInit>

}
 80003a8:	bf00      	nop
 80003aa:	3728      	adds	r7, #40	; 0x28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200001c4 	.word	0x200001c4

080003b4 <MX_ADC1_Init>:
 void MX_ADC1_Init(void)
 {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN ADC1_Init 0 */

   /* USER CODE END ADC1_Init 0 */

   ADC_ChannelConfTypeDef sConfig = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
   /* USER CODE BEGIN ADC1_Init 1 */

   /* USER CODE END ADC1_Init 1 */
   /** Common config
   */
   hadc1.Instance = ADC1;
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_ADC1_Init+0x74>)
 80003c6:	4a19      	ldr	r2, [pc, #100]	; (800042c <MX_ADC1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_ADC1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
   hadc1.Init.ContinuousConvMode = DISABLE;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_ADC1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	731a      	strb	r2, [r3, #12]
   hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003d6:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_ADC1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	751a      	strb	r2, [r3, #20]
   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <MX_ADC1_Init+0x74>)
 80003de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003e2:	61da      	str	r2, [r3, #28]
   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e4:	4b10      	ldr	r3, [pc, #64]	; (8000428 <MX_ADC1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
   hadc1.Init.NbrOfConversion = 1;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_ADC1_Init+0x74>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	611a      	str	r2, [r3, #16]
   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <MX_ADC1_Init+0x74>)
 80003f2:	f000 fde5 	bl	8000fc0 <HAL_ADC_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC1_Init+0x4c>
   {
     Error_Handler();
 80003fc:	f7ff feae 	bl	800015c <Error_Handler>
   }
   /** Configure Regular Channel
   */
   sConfig.Channel = ADC_CHANNEL_0;
 8000400:	2300      	movs	r3, #0
 8000402:	607b      	str	r3, [r7, #4]
   sConfig.Rank = ADC_REGULAR_RANK_1;
 8000404:	2301      	movs	r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	4619      	mov	r1, r3
 8000410:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_ADC1_Init+0x74>)
 8000412:	f001 f861 	bl	80014d8 <HAL_ADC_ConfigChannel>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_ADC1_Init+0x6c>
   {
     Error_Handler();
 800041c:	f7ff fe9e 	bl	800015c <Error_Handler>
   }
   /* USER CODE BEGIN ADC1_Init 2 */

   /* USER CODE END ADC1_Init 2 */

 }
 8000420:	bf00      	nop
 8000422:	3710      	adds	r7, #16
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000140 	.word	0x20000140
 800042c:	40012400 	.word	0x40012400

08000430 <MX_I2C1_Init>:
   * @brief I2C1 Initialization Function
   * @param None
   * @retval None
   * */
  void MX_I2C1_Init(void)
 {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
   /* USER CODE END I2C1_Init 0 */

   /* USER CODE BEGIN I2C1_Init 1 */

   /* USER CODE END I2C1_Init 1 */
   hi2c1.Instance = I2C1;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_I2C1_Init+0x50>)
 8000436:	4a13      	ldr	r2, [pc, #76]	; (8000484 <MX_I2C1_Init+0x54>)
 8000438:	601a      	str	r2, [r3, #0]
   hi2c1.Init.ClockSpeed = 100000;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <MX_I2C1_Init+0x50>)
 800043c:	4a12      	ldr	r2, [pc, #72]	; (8000488 <MX_I2C1_Init+0x58>)
 800043e:	605a      	str	r2, [r3, #4]
   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <MX_I2C1_Init+0x50>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
   hi2c1.Init.OwnAddress1 = 0;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_I2C1_Init+0x50>)
 8000448:	2200      	movs	r2, #0
 800044a:	60da      	str	r2, [r3, #12]
   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <MX_I2C1_Init+0x50>)
 800044e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000452:	611a      	str	r2, [r3, #16]
   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000454:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MX_I2C1_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
   hi2c1.Init.OwnAddress2 = 0;
 800045a:	4b09      	ldr	r3, [pc, #36]	; (8000480 <MX_I2C1_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <MX_I2C1_Init+0x50>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <MX_I2C1_Init+0x50>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800046c:	4804      	ldr	r0, [pc, #16]	; (8000480 <MX_I2C1_Init+0x50>)
 800046e:	f001 fbdd 	bl	8001c2c <HAL_I2C_Init>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_I2C1_Init+0x4c>
   {
     Error_Handler();
 8000478:	f7ff fe70 	bl	800015c <Error_Handler>
   }
   /* USER CODE BEGIN I2C1_Init 2 */

   /* USER CODE END I2C1_Init 2 */

 }
 800047c:	bf00      	nop
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20000098 	.word	0x20000098
 8000484:	40005400 	.word	0x40005400
 8000488:	000186a0 	.word	0x000186a0

0800048c <MX_I2C2_Init>:
   * @brief I2C2 Initialization Function
   * @param None
   * @retval None
   */
  void MX_I2C2_Init(void)
 {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
   /* USER CODE END I2C2_Init 0 */

   /* USER CODE BEGIN I2C2_Init 1 */

   /* USER CODE END I2C2_Init 1 */
   hi2c2.Instance = I2C2;
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <MX_I2C2_Init+0x50>)
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <MX_I2C2_Init+0x54>)
 8000494:	601a      	str	r2, [r3, #0]
   hi2c2.Init.ClockSpeed = 100000;
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <MX_I2C2_Init+0x50>)
 8000498:	4a12      	ldr	r2, [pc, #72]	; (80004e4 <MX_I2C2_Init+0x58>)
 800049a:	605a      	str	r2, [r3, #4]
   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <MX_I2C2_Init+0x50>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
   hi2c2.Init.OwnAddress1 = 0;
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <MX_I2C2_Init+0x50>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	60da      	str	r2, [r3, #12]
   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <MX_I2C2_Init+0x50>)
 80004aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ae:	611a      	str	r2, [r3, #16]
   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <MX_I2C2_Init+0x50>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	615a      	str	r2, [r3, #20]
   hi2c2.Init.OwnAddress2 = 0;
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <MX_I2C2_Init+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <MX_I2C2_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MX_I2C2_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
   if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <MX_I2C2_Init+0x50>)
 80004ca:	f001 fbaf 	bl	8001c2c <HAL_I2C_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_I2C2_Init+0x4c>
   {
     Error_Handler();
 80004d4:	f7ff fe42 	bl	800015c <Error_Handler>
   }
   /* USER CODE BEGIN I2C2_Init 2 */

   /* USER CODE END I2C2_Init 2 */

 }
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000ec 	.word	0x200000ec
 80004e0:	40005800 	.word	0x40005800
 80004e4:	000186a0 	.word	0x000186a0

080004e8 <MX_USART2_UART_Init>:
   * @param None
   * @retval None
   */

   void MX_USART2_UART_Init(void)
  {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 80004ee:	4a12      	ldr	r2, [pc, #72]	; (8000538 <MX_USART2_UART_Init+0x50>)
 80004f0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 80004f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 800050e:	220c      	movs	r2, #12
 8000510:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&huart2) != HAL_OK)
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <MX_USART2_UART_Init+0x4c>)
 8000520:	f003 f899 	bl	8003656 <HAL_UART_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_USART2_UART_Init+0x46>
    {
      Error_Handler();
 800052a:	f7ff fe17 	bl	800015c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

  }
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000204 	.word	0x20000204
 8000538:	40004400 	.word	0x40004400

0800053c <MX_RTC_Init>:
    * @param None
    * @retval None
    */

  void MX_RTC_Init(void)
 {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN RTC_Init 1 */

   /* USER CODE END RTC_Init 1 */
   /** Initialize RTC Only
   */
   hrtc.Instance = RTC;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_RTC_Init+0x30>)
 8000542:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <MX_RTC_Init+0x34>)
 8000544:	601a      	str	r2, [r3, #0]
   hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_RTC_Init+0x30>)
 8000548:	f04f 32ff 	mov.w	r2, #4294967295
 800054c:	605a      	str	r2, [r3, #4]
   hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_RTC_Init+0x30>)
 8000550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000554:	609a      	str	r2, [r3, #8]
   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_RTC_Init+0x30>)
 8000558:	f002 fa2a 	bl	80029b0 <HAL_RTC_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_RTC_Init+0x2a>
   {
     Error_Handler();
 8000562:	f7ff fdfb 	bl	800015c <Error_Handler>
   }
   /* USER CODE BEGIN RTC_Init 2 */

   /* USER CODE END RTC_Init 2 */

 }
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000170 	.word	0x20000170
 8000570:	40002800 	.word	0x40002800

08000574 <MX_GPIO_Init>:
   * @brief GPIO Initialization Function
   * @param None
   * @retval None
   */
  void MX_GPIO_Init(void)
 {
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

   /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b3b      	ldr	r3, [pc, #236]	; (8000678 <MX_GPIO_Init+0x104>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a3a      	ldr	r2, [pc, #232]	; (8000678 <MX_GPIO_Init+0x104>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b38      	ldr	r3, [pc, #224]	; (8000678 <MX_GPIO_Init+0x104>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b35      	ldr	r3, [pc, #212]	; (8000678 <MX_GPIO_Init+0x104>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a34      	ldr	r2, [pc, #208]	; (8000678 <MX_GPIO_Init+0x104>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b32      	ldr	r3, [pc, #200]	; (8000678 <MX_GPIO_Init+0x104>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b2f      	ldr	r3, [pc, #188]	; (8000678 <MX_GPIO_Init+0x104>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a2e      	ldr	r2, [pc, #184]	; (8000678 <MX_GPIO_Init+0x104>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <MX_GPIO_Init+0x104>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <MX_GPIO_Init+0x104>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <MX_GPIO_Init+0x104>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <MX_GPIO_Init+0x104>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(GPIOB, Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin
 80005e8:	2200      	movs	r2, #0
 80005ea:	f24f 3130 	movw	r1, #62256	; 0xf330
 80005ee:	4823      	ldr	r0, [pc, #140]	; (800067c <MX_GPIO_Init+0x108>)
 80005f0:	f001 fb04 	bl	8001bfc <HAL_GPIO_WritePin>
                           |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin, GPIO_PIN_RESET);

   /*Configure GPIO pin Output Level */
   HAL_GPIO_WritePin(Output_5_GPIO_Port, Output_5_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	4821      	ldr	r0, [pc, #132]	; (8000680 <MX_GPIO_Init+0x10c>)
 80005fc:	f001 fafe 	bl	8001bfc <HAL_GPIO_WritePin>

   /*Configure GPIO pin : Input_0_Pin */
   GPIO_InitStruct.Pin = Input_0_Pin;
 8000600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000604:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(Input_0_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	481b      	ldr	r0, [pc, #108]	; (8000684 <MX_GPIO_Init+0x110>)
 8000616:	f001 f997 	bl	8001948 <HAL_GPIO_Init>

   /*Configure GPIO pins : Input_3_Pin Input_4_Pin */
   GPIO_InitStruct.Pin = Input_3_Pin|Input_4_Pin;
 800061a:	2306      	movs	r3, #6
 800061c:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <MX_GPIO_Init+0x108>)
 800062e:	f001 f98b 	bl	8001948 <HAL_GPIO_Init>

   /*Configure GPIO pins : Output_9_Pin Output_8_Pin Output_7_Pin Output_6_Pin
                            Output_4_Pin Output_3_Pin Output_2_Pin Output_1_Pin */
   GPIO_InitStruct.Pin = Output_9_Pin|Output_8_Pin|Output_7_Pin|Output_6_Pin
 8000632:	f24f 3330 	movw	r3, #62256	; 0xf330
 8000636:	613b      	str	r3, [r7, #16]
                           |Output_4_Pin|Output_3_Pin|Output_2_Pin|Output_1_Pin;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2302      	movs	r3, #2
 8000642:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_GPIO_Init+0x108>)
 800064c:	f001 f97c 	bl	8001948 <HAL_GPIO_Init>

   /*Configure GPIO pin : Output_5_Pin */
   GPIO_InitStruct.Pin = Output_5_Pin;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2302      	movs	r3, #2
 8000660:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(Output_5_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_GPIO_Init+0x10c>)
 800066a:	f001 f96d 	bl	8001948 <HAL_GPIO_Init>

 }
 800066e:	bf00      	nop
 8000670:	3720      	adds	r7, #32
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40010800 	.word	0x40010800
 8000684:	40011000 	.word	0x40011000

08000688 <map>:
 *      Author: Jan de Brandweerman
 */


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	69b9      	ldr	r1, [r7, #24]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	1a8a      	subs	r2, r1, r2
 80006a2:	fb02 f203 	mul.w	r2, r2, r3
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	1acb      	subs	r3, r1, r3
 80006ac:	fb92 f2f3 	sdiv	r2, r2, r3
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	4413      	add	r3, r2
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
	...

080006c0 <PWM_Init>:
#include "main.h"
#include "Math.h"
#include "Initialization.h"


void PWM_Init(void){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

	MX_TIM1_Init();
 80006c4:	f7ff fd50 	bl	8000168 <MX_TIM1_Init>
    MX_TIM2_Init();
 80006c8:	f7ff fe12 	bl	80002f0 <MX_TIM2_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <PWM_Init+0x40>)
 80006d0:	f002 fad8 	bl	8002c84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006d4:	2104      	movs	r1, #4
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <PWM_Init+0x40>)
 80006d8:	f002 fad4 	bl	8002c84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006dc:	2108      	movs	r1, #8
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <PWM_Init+0x40>)
 80006e0:	f002 fad0 	bl	8002c84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006e4:	210c      	movs	r1, #12
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <PWM_Init+0x40>)
 80006e8:	f002 facc 	bl	8002c84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006ec:	2100      	movs	r1, #0
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <PWM_Init+0x44>)
 80006f0:	f002 fac8 	bl	8002c84 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006f4:	2104      	movs	r1, #4
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <PWM_Init+0x44>)
 80006f8:	f002 fac4 	bl	8002c84 <HAL_TIM_PWM_Start>

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000184 	.word	0x20000184
 8000704:	200001c4 	.word	0x200001c4

08000708 <PWM_Set>:

void PWM_Set(uint8_t Pinnr, uint16_t PWM_value){
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af02      	add	r7, sp, #8
 800070e:	4603      	mov	r3, r0
 8000710:	460a      	mov	r2, r1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	80bb      	strh	r3, [r7, #4]


if (PWM_value > 100){
 8000718:	88bb      	ldrh	r3, [r7, #4]
 800071a:	2b64      	cmp	r3, #100	; 0x64
 800071c:	d901      	bls.n	8000722 <PWM_Set+0x1a>
	PWM_value = 100;
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	80bb      	strh	r3, [r7, #4]
} else if (PWM_value < 0){
		PWM_value = 0;
}

PWM_value = map(PWM_value, 0, 100, 0, 65535);
 8000722:	88b8      	ldrh	r0, [r7, #4]
 8000724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	2300      	movs	r3, #0
 800072c:	2264      	movs	r2, #100	; 0x64
 800072e:	2100      	movs	r1, #0
 8000730:	f7ff ffaa 	bl	8000688 <map>
 8000734:	4603      	mov	r3, r0
 8000736:	80bb      	strh	r3, [r7, #4]

	if (Pinnr == 1){
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d103      	bne.n	8000746 <PWM_Set+0x3e>
		TIM1->CCR1 = PWM_value;
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <PWM_Set+0x90>)
 8000740:	88bb      	ldrh	r3, [r7, #4]
 8000742:	6353      	str	r3, [r2, #52]	; 0x34
		TIM2->CCR1 = PWM_value;
	}else if (Pinnr == 6){
		TIM2->CCR2 = PWM_value;
	}

}
 8000744:	e023      	b.n	800078e <PWM_Set+0x86>
	}else if (Pinnr == 2){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d103      	bne.n	8000754 <PWM_Set+0x4c>
		TIM1->CCR2 = PWM_value;
 800074c:	4a12      	ldr	r2, [pc, #72]	; (8000798 <PWM_Set+0x90>)
 800074e:	88bb      	ldrh	r3, [r7, #4]
 8000750:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000752:	e01c      	b.n	800078e <PWM_Set+0x86>
	}else if (Pinnr == 3){
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d103      	bne.n	8000762 <PWM_Set+0x5a>
		TIM1->CCR3 = PWM_value;
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <PWM_Set+0x90>)
 800075c:	88bb      	ldrh	r3, [r7, #4]
 800075e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000760:	e015      	b.n	800078e <PWM_Set+0x86>
	}else if (Pinnr == 4){
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b04      	cmp	r3, #4
 8000766:	d103      	bne.n	8000770 <PWM_Set+0x68>
		TIM1->CCR4 = PWM_value;
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <PWM_Set+0x90>)
 800076a:	88bb      	ldrh	r3, [r7, #4]
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800076e:	e00e      	b.n	800078e <PWM_Set+0x86>
	}else if (Pinnr == 5){
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	2b05      	cmp	r3, #5
 8000774:	d104      	bne.n	8000780 <PWM_Set+0x78>
		TIM2->CCR1 = PWM_value;
 8000776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077a:	88bb      	ldrh	r3, [r7, #4]
 800077c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800077e:	e006      	b.n	800078e <PWM_Set+0x86>
	}else if (Pinnr == 6){
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b06      	cmp	r3, #6
 8000784:	d103      	bne.n	800078e <PWM_Set+0x86>
		TIM2->CCR2 = PWM_value;
 8000786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40012c00 	.word	0x40012c00

0800079c <Debugprintvar>:
	 sprintf(data2, "%s\r\n", data);
	HAL_UART_Transmit(&huart2, (uint8_t*)data2, strlen(data2) ,HAL_MAX_DELAY);

}
void Debugprintvar(char data[])
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	char data2[10];

		 sprintf(data2, "%hu\r\n", data);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	490b      	ldr	r1, [pc, #44]	; (80007d8 <Debugprintvar+0x3c>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 f98f 	bl	8003ad0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data2, strlen(data2) ,HAL_MAX_DELAY);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fcc8 	bl	800014c <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f107 010c 	add.w	r1, r7, #12
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <Debugprintvar+0x40>)
 80007ca:	f002 ff91 	bl	80036f0 <HAL_UART_Transmit>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	08004314 	.word	0x08004314
 80007dc:	20000204 	.word	0x20000204

080007e0 <Application>:
#include "stm32f1xx_hal_uart.h"



void Application(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0

	 uint16_t raw;
	  char msg[10];

	GPIO_Write(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ec:	4829      	ldr	r0, [pc, #164]	; (8000894 <Application+0xb4>)
 80007ee:	f000 f859 	bl	80008a4 <GPIO_Write>

	for (uint8_t i = 0; i<100; i++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
 80007f6:	e00b      	b.n	8000810 <Application+0x30>
		PWM_Set(PWM_1, i);
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff82 	bl	8000708 <PWM_Set>
		HAL_Delay(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f000 fbb9 	bl	8000f7c <HAL_Delay>
	for (uint8_t i = 0; i<100; i++){
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	3301      	adds	r3, #1
 800080e:	73fb      	strb	r3, [r7, #15]
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	2b63      	cmp	r3, #99	; 0x63
 8000814:	d9f0      	bls.n	80007f8 <Application+0x18>
	}

	GPIO_Write(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081c:	481d      	ldr	r0, [pc, #116]	; (8000894 <Application+0xb4>)
 800081e:	f000 f841 	bl	80008a4 <GPIO_Write>

	for (uint8_t i = 100; i>0; i--){
 8000822:	2364      	movs	r3, #100	; 0x64
 8000824:	73bb      	strb	r3, [r7, #14]
 8000826:	e00b      	b.n	8000840 <Application+0x60>
		PWM_Set(PWM_1, i);
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	b29b      	uxth	r3, r3
 800082c:	4619      	mov	r1, r3
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff6a 	bl	8000708 <PWM_Set>
		HAL_Delay(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fba1 	bl	8000f7c <HAL_Delay>
	for (uint8_t i = 100; i>0; i--){
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	3b01      	subs	r3, #1
 800083e:	73bb      	strb	r3, [r7, #14]
 8000840:	7bbb      	ldrb	r3, [r7, #14]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f0      	bne.n	8000828 <Application+0x48>
	}


	//uint8_t Test[] = "Hello World laalaa !!!\r\n";
		Debugprintvar(233);
 8000846:	20e9      	movs	r0, #233	; 0xe9
 8000848:	f7ff ffa8 	bl	800079c <Debugprintvar>

	//HAL_UART_Transmit(&huart2,Test,sizeof(Test),10);
	// HAL_Delay(1000);

	HAL_ADC_Start(&hadc1);
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <Application+0xb8>)
 800084e:	f000 fc8f 	bl	8001170 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000852:	f04f 31ff 	mov.w	r1, #4294967295
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <Application+0xb8>)
 8000858:	f000 fd38 	bl	80012cc <HAL_ADC_PollForConversion>

	    raw = HAL_ADC_GetValue(&hadc1);
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <Application+0xb8>)
 800085e:	f000 fe2f 	bl	80014c0 <HAL_ADC_GetValue>
 8000862:	4603      	mov	r3, r0
 8000864:	81bb      	strh	r3, [r7, #12]

	    sprintf(msg, "%hu\r\n", raw);
 8000866:	89ba      	ldrh	r2, [r7, #12]
 8000868:	463b      	mov	r3, r7
 800086a:	490c      	ldr	r1, [pc, #48]	; (800089c <Application+0xbc>)
 800086c:	4618      	mov	r0, r3
 800086e:	f003 f92f 	bl	8003ad0 <siprintf>
	       HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000872:	463b      	mov	r3, r7
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fc69 	bl	800014c <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b29a      	uxth	r2, r3
 800087e:	4639      	mov	r1, r7
 8000880:	f04f 33ff 	mov.w	r3, #4294967295
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <Application+0xc0>)
 8000886:	f002 ff33 	bl	80036f0 <HAL_UART_Transmit>

}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40010c00 	.word	0x40010c00
 8000898:	20000140 	.word	0x20000140
 800089c:	0800431c 	.word	0x0800431c
 80008a0:	20000204 	.word	0x20000204

080008a4 <GPIO_Write>:
// GPIOx port 	with x as A B C D...
// GPIOx pin 	0..15
// PinSate   	GPIO_PIN_RESET or GPIO_PIN_SET

void GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	460b      	mov	r3, r1
 80008ae:	807b      	strh	r3, [r7, #2]
 80008b0:	4613      	mov	r3, r2
 80008b2:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80008b4:	787a      	ldrb	r2, [r7, #1]
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	4619      	mov	r1, r3
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f001 f99e 	bl	8001bfc <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <main>:


void SystemClock_Config(void);


int main(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0


	MX_GPIO_Init();
 80008cc:	f7ff fe52 	bl	8000574 <MX_GPIO_Init>
	PWM_Init();
 80008d0:	f7ff fef6 	bl	80006c0 <PWM_Init>
	SystemClock_Config();
 80008d4:	f000 f80d 	bl	80008f2 <SystemClock_Config>
	MX_ADC1_Init();
 80008d8:	f7ff fd6c 	bl	80003b4 <MX_ADC1_Init>
	MX_I2C1_Init();
 80008dc:	f7ff fda8 	bl	8000430 <MX_I2C1_Init>
	MX_I2C2_Init();
 80008e0:	f7ff fdd4 	bl	800048c <MX_I2C2_Init>
	MX_RTC_Init();
 80008e4:	f7ff fe2a 	bl	800053c <MX_RTC_Init>
	MX_USART2_UART_Init();
 80008e8:	f7ff fdfe 	bl	80004e8 <MX_USART2_UART_Init>


	while (1) {

		Application();
 80008ec:	f7ff ff78 	bl	80007e0 <Application>
	while (1) {
 80008f0:	e7fc      	b.n	80008ec <main+0x24>

080008f2 <SystemClock_Config>:

	}

}

void SystemClock_Config(void) {
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b094      	sub	sp, #80	; 0x50
 80008f6:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fc:	2228      	movs	r2, #40	; 0x28
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 f8dd 	bl	8003ac0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000922:	2309      	movs	r3, #9
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	2302      	movs	r3, #2
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000942:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094c:	4618      	mov	r0, r3
 800094e:	f001 faa1 	bl	8001e94 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x6a>
		Error_Handler();
 8000958:	f7ff fc00 	bl	800015c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fd0b 	bl	8002394 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x96>
		Error_Handler();
 8000984:	f7ff fbea 	bl	800015c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 8000988:	2303      	movs	r3, #3
 800098a:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800098c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000990:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000996:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fe96 	bl	80026cc <HAL_RCCEx_PeriphCLKConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xb8>
		Error_Handler();
 80009a6:	f7ff fbd9 	bl	800015c <Error_Handler>
	}
}
 80009aa:	bf00      	nop
 80009ac:	3750      	adds	r7, #80	; 0x50
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_ADC_MspInit+0x98>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d137      	bne.n	8000a44 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_ADC_MspInit+0x9c>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8000a1c:	23f3      	movs	r3, #243	; 0xf3
 8000a1e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a20:	2303      	movs	r3, #3
 8000a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0318 	add.w	r3, r7, #24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480a      	ldr	r0, [pc, #40]	; (8000a54 <HAL_ADC_MspInit+0xa0>)
 8000a2c:	f000 ff8c 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a34:	2303      	movs	r3, #3
 8000a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <HAL_ADC_MspInit+0xa4>)
 8000a40:	f000 ff82 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40012400 	.word	0x40012400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40010c00 	.word	0x40010c00

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a2b      	ldr	r2, [pc, #172]	; (8000b24 <HAL_I2C_MspInit+0xc8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d124      	bne.n	8000ac6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a94:	23c0      	movs	r3, #192	; 0xc0
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	2312      	movs	r3, #18
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4821      	ldr	r0, [pc, #132]	; (8000b2c <HAL_I2C_MspInit+0xd0>)
 8000aa8:	f000 ff4e 	bl	8001948 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000aae:	69db      	ldr	r3, [r3, #28]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab6:	61d3      	str	r3, [r2, #28]
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ac4:	e029      	b.n	8000b1a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_I2C_MspInit+0xd4>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d124      	bne.n	8000b1a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a14      	ldr	r2, [pc, #80]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ae8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aee:	2312      	movs	r3, #18
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	4619      	mov	r1, r3
 8000afc:	480b      	ldr	r0, [pc, #44]	; (8000b2c <HAL_I2C_MspInit+0xd0>)
 8000afe:	f000 ff23 	bl	8001948 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b0c:	61d3      	str	r3, [r2, #28]
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_I2C_MspInit+0xcc>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40005400 	.word	0x40005400
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010c00 	.word	0x40010c00
 8000b30:	40005800 	.word	0x40005800

08000b34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <HAL_RTC_MspInit+0x3c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d110      	bne.n	8000b68 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000b46:	f001 f999 	bl	8001e7c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_RTC_MspInit+0x40>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <HAL_RTC_MspInit+0x40>)
 8000b50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b54:	61d3      	str	r3, [r2, #28]
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <HAL_RTC_MspInit+0x40>)
 8000b58:	69db      	ldr	r3, [r3, #28]
 8000b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b62:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_RTC_MspInit+0x44>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40002800 	.word	0x40002800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	4242043c 	.word	0x4242043c

08000b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_TIM_Base_MspInit+0x34>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10b      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b98:	6193      	str	r3, [r2, #24]
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_TIM_Base_MspInit+0x38>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc8:	d10b      	bne.n	8000be2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_TIM_PWM_MspInit+0x34>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_TIM_PWM_MspInit+0x34>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	61d3      	str	r3, [r2, #28]
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_TIM_PWM_MspInit+0x34>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a34      	ldr	r2, [pc, #208]	; (8000cdc <HAL_TIM_MspPostInit+0xec>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d119      	bne.n	8000c44 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c28:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4829      	ldr	r0, [pc, #164]	; (8000ce4 <HAL_TIM_MspPostInit+0xf4>)
 8000c3e:	f000 fe83 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c42:	e047      	b.n	8000cd4 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c4c:	d142      	bne.n	8000cd4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_TIM_MspPostInit+0xf0>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0308 	and.w	r3, r3, #8
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <HAL_TIM_MspPostInit+0xf4>)
 8000c94:	f000 fe58 	bl	8001948 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <HAL_TIM_MspPostInit+0xf8>)
 8000cac:	f000 fe4c 	bl	8001948 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_TIM_MspPostInit+0xfc>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_TIM_MspPostInit+0xfc>)
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	6053      	str	r3, [r2, #4]
}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40012c00 	.word	0x40012c00
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40010000 	.word	0x40010000

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <HAL_UART_MspInit+0x88>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d12f      	bne.n	8000d70 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1a:	61d3      	str	r3, [r2, #28]
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d40:	2304      	movs	r3, #4
 8000d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d54:	f000 fdf8 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d6c:	f000 fdec 	bl	8001948 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010800 	.word	0x40010800

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <HardFault_Handler+0x4>

08000d96 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <BusFault_Handler+0x4>

08000da2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <UsageFault_Handler+0x4>

08000da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8b8 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x50>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x16>
		heap_end = &end;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <_sbrk+0x50>)
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <_sbrk+0x54>)
 8000dec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <_sbrk+0x50>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <_sbrk+0x50>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	466a      	mov	r2, sp
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d907      	bls.n	8000e12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e02:	f002 fe33 	bl	8003a6c <__errno>
 8000e06:	4602      	mov	r2, r0
 8000e08:	230c      	movs	r3, #12
 8000e0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	e006      	b.n	8000e20 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <_sbrk+0x50>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <_sbrk+0x50>)
 8000e1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000008c 	.word	0x2000008c
 8000e2c:	20000250 	.word	0x20000250

08000e30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <SystemInit+0x5c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <SystemInit+0x5c>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <SystemInit+0x5c>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	4911      	ldr	r1, [pc, #68]	; (8000e8c <SystemInit+0x5c>)
 8000e46:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <SystemInit+0x60>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <SystemInit+0x5c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <SystemInit+0x5c>)
 8000e52:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <SystemInit+0x5c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SystemInit+0x5c>)
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <SystemInit+0x5c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <SystemInit+0x5c>)
 8000e6e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e72:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SystemInit+0x5c>)
 8000e76:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e7a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SystemInit+0x64>)
 8000e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e82:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	f8ff0000 	.word	0xf8ff0000
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e9a:	e003      	b.n	8000ea4 <LoopCopyDataInit>

08000e9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ea0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ea2:	3104      	adds	r1, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ea4:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ea8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eac:	d3f6      	bcc.n	8000e9c <CopyDataInit>
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000eb0:	e002      	b.n	8000eb8 <LoopFillZerobss>

08000eb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000eb4:	f842 3b04 	str.w	r3, [r2], #4

08000eb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ebc:	d3f9      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ebe:	f7ff ffb7 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f002 fdd9 	bl	8003a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec6:	f7ff fcff 	bl	80008c8 <main>
  bx lr
 8000eca:	4770      	bx	lr
  ldr r3, =_sidata
 8000ecc:	080043a0 	.word	0x080043a0
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ed4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ed8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000edc:	2000024c 	.word	0x2000024c

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>
	...

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fd14 	bl	8001930 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 fcea 	bl	80018f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000004 	.word	0x20000004

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000244 	.word	0x20000244

08000f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	20000244 	.word	0x20000244

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff0 	bl	8000f68 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_Delay+0x40>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffe0 	bl	8000f68 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0be      	b.n	8001160 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d109      	bne.n	8001004 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fcd8 	bl	80009b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fbb1 	bl	800176c <ADC_ConversionStop_Disable>
 800100a:	4603      	mov	r3, r0
 800100c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 8099 	bne.w	800114e <HAL_ADC_Init+0x18e>
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 8095 	bne.w	800114e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001028:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800102c:	f023 0302 	bic.w	r3, r3, #2
 8001030:	f043 0202 	orr.w	r2, r3, #2
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001040:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7b1b      	ldrb	r3, [r3, #12]
 8001046:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001048:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	4313      	orrs	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001058:	d003      	beq.n	8001062 <HAL_ADC_Init+0xa2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <HAL_ADC_Init+0xa8>
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	e000      	b.n	800106a <HAL_ADC_Init+0xaa>
 8001068:	2300      	movs	r3, #0
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7d1b      	ldrb	r3, [r3, #20]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d119      	bne.n	80010ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d109      	bne.n	8001094 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	3b01      	subs	r3, #1
 8001086:	035a      	lsls	r2, r3, #13
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e00b      	b.n	80010ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	f043 0220 	orr.w	r2, r3, #32
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a4:	f043 0201 	orr.w	r2, r3, #1
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	430a      	orrs	r2, r1
 80010be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_ADC_Init+0x1a8>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010dc:	d003      	beq.n	80010e6 <HAL_ADC_Init+0x126>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d104      	bne.n	80010f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	051b      	lsls	r3, r3, #20
 80010ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	430a      	orrs	r2, r1
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_ADC_Init+0x1ac>)
 800110c:	4013      	ands	r3, r2
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	429a      	cmp	r2, r3
 8001112:	d10b      	bne.n	800112c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	f023 0303 	bic.w	r3, r3, #3
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800112a:	e018      	b.n	800115e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f023 0312 	bic.w	r3, r3, #18
 8001134:	f043 0210 	orr.w	r2, r3, #16
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800114c:	e007      	b.n	800115e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	f043 0210 	orr.w	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800115e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	ffe1f7fd 	.word	0xffe1f7fd
 800116c:	ff1f0efe 	.word	0xff1f0efe

08001170 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_ADC_Start+0x1a>
 8001186:	2302      	movs	r3, #2
 8001188:	e098      	b.n	80012bc <HAL_ADC_Start+0x14c>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fa98 	bl	80016c8 <ADC_Enable>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 8087 	bne.w	80012b2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a41      	ldr	r2, [pc, #260]	; (80012c4 <HAL_ADC_Start+0x154>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d105      	bne.n	80011ce <HAL_ADC_Start+0x5e>
 80011c2:	4b41      	ldr	r3, [pc, #260]	; (80012c8 <HAL_ADC_Start+0x158>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d115      	bne.n	80011fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d026      	beq.n	8001236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011f8:	e01d      	b.n	8001236 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a2f      	ldr	r2, [pc, #188]	; (80012c8 <HAL_ADC_Start+0x158>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d004      	beq.n	800121a <HAL_ADC_Start+0xaa>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <HAL_ADC_Start+0x154>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10d      	bne.n	8001236 <HAL_ADC_Start+0xc6>
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_ADC_Start+0x158>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800122e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	f023 0206 	bic.w	r2, r3, #6
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	62da      	str	r2, [r3, #44]	; 0x2c
 800124e:	e002      	b.n	8001256 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f06f 0202 	mvn.w	r2, #2
 8001266:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001272:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001276:	d113      	bne.n	80012a0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800127c:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_ADC_Start+0x154>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d105      	bne.n	800128e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_ADC_Start+0x158>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e00c      	b.n	80012ba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e003      	b.n	80012ba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40012800 	.word	0x40012800
 80012c8:	40012400 	.word	0x40012400

080012cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80012e2:	f7ff fe41 	bl	8000f68 <HAL_GetTick>
 80012e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	f043 0220 	orr.w	r2, r3, #32
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e0c8      	b.n	80014a0 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d12a      	bne.n	8001372 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d123      	bne.n	8001372 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800132a:	e01a      	b.n	8001362 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001332:	d016      	beq.n	8001362 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <HAL_ADC_PollForConversion+0x7e>
 800133a:	f7ff fe15 	bl	8000f68 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d20b      	bcs.n	8001362 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f043 0204 	orr.w	r2, r3, #4
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e09e      	b.n	80014a0 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0dd      	beq.n	800132c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001370:	e06c      	b.n	800144c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <HAL_ADC_PollForConversion+0x1dc>)
 8001374:	681c      	ldr	r4, [r3, #0]
 8001376:	2002      	movs	r0, #2
 8001378:	f001 fa5e 	bl	8002838 <HAL_RCCEx_GetPeriphCLKFreq>
 800137c:	4603      	mov	r3, r0
 800137e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6919      	ldr	r1, [r3, #16]
 8001388:	4b48      	ldr	r3, [pc, #288]	; (80014ac <HAL_ADC_PollForConversion+0x1e0>)
 800138a:	400b      	ands	r3, r1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d118      	bne.n	80013c2 <HAL_ADC_PollForConversion+0xf6>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68d9      	ldr	r1, [r3, #12]
 8001396:	4b46      	ldr	r3, [pc, #280]	; (80014b0 <HAL_ADC_PollForConversion+0x1e4>)
 8001398:	400b      	ands	r3, r1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d111      	bne.n	80013c2 <HAL_ADC_PollForConversion+0xf6>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6919      	ldr	r1, [r3, #16]
 80013a4:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_ADC_PollForConversion+0x1e8>)
 80013a6:	400b      	ands	r3, r1
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d108      	bne.n	80013be <HAL_ADC_PollForConversion+0xf2>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68d9      	ldr	r1, [r3, #12]
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_ADC_PollForConversion+0x1ec>)
 80013b4:	400b      	ands	r3, r1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_PollForConversion+0xf2>
 80013ba:	2314      	movs	r3, #20
 80013bc:	e020      	b.n	8001400 <HAL_ADC_PollForConversion+0x134>
 80013be:	2329      	movs	r3, #41	; 0x29
 80013c0:	e01e      	b.n	8001400 <HAL_ADC_PollForConversion+0x134>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6919      	ldr	r1, [r3, #16]
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <HAL_ADC_PollForConversion+0x1e8>)
 80013ca:	400b      	ands	r3, r1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d106      	bne.n	80013de <HAL_ADC_PollForConversion+0x112>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68d9      	ldr	r1, [r3, #12]
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <HAL_ADC_PollForConversion+0x1ec>)
 80013d8:	400b      	ands	r3, r1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00d      	beq.n	80013fa <HAL_ADC_PollForConversion+0x12e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6919      	ldr	r1, [r3, #16]
 80013e4:	4b35      	ldr	r3, [pc, #212]	; (80014bc <HAL_ADC_PollForConversion+0x1f0>)
 80013e6:	400b      	ands	r3, r1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d108      	bne.n	80013fe <HAL_ADC_PollForConversion+0x132>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	68d9      	ldr	r1, [r3, #12]
 80013f2:	4b32      	ldr	r3, [pc, #200]	; (80014bc <HAL_ADC_PollForConversion+0x1f0>)
 80013f4:	400b      	ands	r3, r1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_PollForConversion+0x132>
 80013fa:	2354      	movs	r3, #84	; 0x54
 80013fc:	e000      	b.n	8001400 <HAL_ADC_PollForConversion+0x134>
 80013fe:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001406:	e01d      	b.n	8001444 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140e:	d016      	beq.n	800143e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <HAL_ADC_PollForConversion+0x15a>
 8001416:	f7ff fda7 	bl	8000f68 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d20b      	bcs.n	800143e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f043 0204 	orr.w	r2, r3, #4
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e030      	b.n	80014a0 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3301      	adds	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8dd      	bhi.n	8001408 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f06f 0212 	mvn.w	r2, #18
 8001454:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800146c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001470:	d115      	bne.n	800149e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001476:	2b00      	cmp	r3, #0
 8001478:	d111      	bne.n	800149e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d105      	bne.n	800149e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	20000000 	.word	0x20000000
 80014ac:	24924924 	.word	0x24924924
 80014b0:	00924924 	.word	0x00924924
 80014b4:	12492492 	.word	0x12492492
 80014b8:	00492492 	.word	0x00492492
 80014bc:	00249249 	.word	0x00249249

080014c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_ADC_ConfigChannel+0x20>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e0dc      	b.n	80016b2 <HAL_ADC_ConfigChannel+0x1da>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b06      	cmp	r3, #6
 8001506:	d81c      	bhi.n	8001542 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	3b05      	subs	r3, #5
 800151a:	221f      	movs	r2, #31
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	4019      	ands	r1, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	3b05      	subs	r3, #5
 8001534:	fa00 f203 	lsl.w	r2, r0, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	635a      	str	r2, [r3, #52]	; 0x34
 8001540:	e03c      	b.n	80015bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b0c      	cmp	r3, #12
 8001548:	d81c      	bhi.n	8001584 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b23      	subs	r3, #35	; 0x23
 800155c:	221f      	movs	r2, #31
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	4019      	ands	r1, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	3b23      	subs	r3, #35	; 0x23
 8001576:	fa00 f203 	lsl.w	r2, r0, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	631a      	str	r2, [r3, #48]	; 0x30
 8001582:	e01b      	b.n	80015bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b41      	subs	r3, #65	; 0x41
 8001596:	221f      	movs	r2, #31
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4019      	ands	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b41      	subs	r3, #65	; 0x41
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d91c      	bls.n	80015fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68d9      	ldr	r1, [r3, #12]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4613      	mov	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	3b1e      	subs	r3, #30
 80015d6:	2207      	movs	r2, #7
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	4019      	ands	r1, r3
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	6898      	ldr	r0, [r3, #8]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	3b1e      	subs	r3, #30
 80015f0:	fa00 f203 	lsl.w	r2, r0, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	e019      	b.n	8001632 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6919      	ldr	r1, [r3, #16]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	2207      	movs	r2, #7
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	4019      	ands	r1, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	6898      	ldr	r0, [r3, #8]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	fa00 f203 	lsl.w	r2, r0, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b10      	cmp	r3, #16
 8001638:	d003      	beq.n	8001642 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800163e:	2b11      	cmp	r3, #17
 8001640:	d132      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_ADC_ConfigChannel+0x1e4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d125      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d126      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001668:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d11a      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9a      	lsrs	r2, r3, #18
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001688:	e002      	b.n	8001690 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3b01      	subs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_ADC_ConfigChannel+0x1b2>
 8001696:	e007      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f043 0220 	orr.w	r2, r3, #32
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40012400 	.word	0x40012400
 80016c0:	20000000 	.word	0x20000000
 80016c4:	431bde83 	.word	0x431bde83

080016c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d039      	beq.n	800175a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0201 	orr.w	r2, r2, #1
 80016f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <ADC_Enable+0x9c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <ADC_Enable+0xa0>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	0c9b      	lsrs	r3, r3, #18
 8001702:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001704:	e002      	b.n	800170c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3b01      	subs	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001712:	f7ff fc29 	bl	8000f68 <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001718:	e018      	b.n	800174c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800171a:	f7ff fc25 	bl	8000f68 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d911      	bls.n	800174c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f043 0210 	orr.w	r2, r3, #16
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e007      	b.n	800175c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d1df      	bne.n	800171a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000000 	.word	0x20000000
 8001768:	431bde83 	.word	0x431bde83

0800176c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b01      	cmp	r3, #1
 8001784:	d127      	bne.n	80017d6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001796:	f7ff fbe7 	bl	8000f68 <HAL_GetTick>
 800179a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800179c:	e014      	b.n	80017c8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800179e:	f7ff fbe3 	bl	8000f68 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d90d      	bls.n	80017c8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e007      	b.n	80017d8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d0e3      	beq.n	800179e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff90 	bl	80017fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800190a:	f7ff ff69 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 800190e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f7ff ff9b 	bl	8001850 <NVIC_EncodePriority>
 800191a:	4602      	mov	r2, r0
 800191c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ff6a 	bl	80017fc <__NVIC_SetPriority>
}
 8001928:	bf00      	nop
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffbb 	bl	80018b4 <SysTick_Config>
 800193e:	4603      	mov	r3, r0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b08b      	sub	sp, #44	; 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e127      	b.n	8001bac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800195c:	2201      	movs	r2, #1
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8116 	bne.w	8001ba6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b12      	cmp	r3, #18
 8001980:	d034      	beq.n	80019ec <HAL_GPIO_Init+0xa4>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d80d      	bhi.n	80019a2 <HAL_GPIO_Init+0x5a>
 8001986:	2b02      	cmp	r3, #2
 8001988:	d02b      	beq.n	80019e2 <HAL_GPIO_Init+0x9a>
 800198a:	2b02      	cmp	r3, #2
 800198c:	d804      	bhi.n	8001998 <HAL_GPIO_Init+0x50>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d031      	beq.n	80019f6 <HAL_GPIO_Init+0xae>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d01c      	beq.n	80019d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001996:	e048      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001998:	2b03      	cmp	r3, #3
 800199a:	d043      	beq.n	8001a24 <HAL_GPIO_Init+0xdc>
 800199c:	2b11      	cmp	r3, #17
 800199e:	d01b      	beq.n	80019d8 <HAL_GPIO_Init+0x90>
          break;
 80019a0:	e043      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019a2:	4a89      	ldr	r2, [pc, #548]	; (8001bc8 <HAL_GPIO_Init+0x280>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d026      	beq.n	80019f6 <HAL_GPIO_Init+0xae>
 80019a8:	4a87      	ldr	r2, [pc, #540]	; (8001bc8 <HAL_GPIO_Init+0x280>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d806      	bhi.n	80019bc <HAL_GPIO_Init+0x74>
 80019ae:	4a87      	ldr	r2, [pc, #540]	; (8001bcc <HAL_GPIO_Init+0x284>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d020      	beq.n	80019f6 <HAL_GPIO_Init+0xae>
 80019b4:	4a86      	ldr	r2, [pc, #536]	; (8001bd0 <HAL_GPIO_Init+0x288>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01d      	beq.n	80019f6 <HAL_GPIO_Init+0xae>
          break;
 80019ba:	e036      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019bc:	4a85      	ldr	r2, [pc, #532]	; (8001bd4 <HAL_GPIO_Init+0x28c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0xae>
 80019c2:	4a85      	ldr	r2, [pc, #532]	; (8001bd8 <HAL_GPIO_Init+0x290>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d016      	beq.n	80019f6 <HAL_GPIO_Init+0xae>
 80019c8:	4a84      	ldr	r2, [pc, #528]	; (8001bdc <HAL_GPIO_Init+0x294>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0xae>
          break;
 80019ce:	e02c      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	623b      	str	r3, [r7, #32]
          break;
 80019d6:	e028      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	3304      	adds	r3, #4
 80019de:	623b      	str	r3, [r7, #32]
          break;
 80019e0:	e023      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	3308      	adds	r3, #8
 80019e8:	623b      	str	r3, [r7, #32]
          break;
 80019ea:	e01e      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	623b      	str	r3, [r7, #32]
          break;
 80019f4:	e019      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fe:	2304      	movs	r3, #4
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e012      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	611a      	str	r2, [r3, #16]
          break;
 8001a16:	e008      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a18:	2308      	movs	r3, #8
 8001a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	615a      	str	r2, [r3, #20]
          break;
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d801      	bhi.n	8001a34 <HAL_GPIO_Init+0xec>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	e001      	b.n	8001a38 <HAL_GPIO_Init+0xf0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2bff      	cmp	r3, #255	; 0xff
 8001a3e:	d802      	bhi.n	8001a46 <HAL_GPIO_Init+0xfe>
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x104>
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	3b08      	subs	r3, #8
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	210f      	movs	r1, #15
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	6a39      	ldr	r1, [r7, #32]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8096 	beq.w	8001ba6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7a:	4b59      	ldr	r3, [pc, #356]	; (8001be0 <HAL_GPIO_Init+0x298>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <HAL_GPIO_Init+0x298>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6193      	str	r3, [r2, #24]
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <HAL_GPIO_Init+0x298>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a92:	4a54      	ldr	r2, [pc, #336]	; (8001be4 <HAL_GPIO_Init+0x29c>)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	089b      	lsrs	r3, r3, #2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	; (8001be8 <HAL_GPIO_Init+0x2a0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d013      	beq.n	8001ae6 <HAL_GPIO_Init+0x19e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <HAL_GPIO_Init+0x2a4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d00d      	beq.n	8001ae2 <HAL_GPIO_Init+0x19a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_GPIO_Init+0x2a8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d007      	beq.n	8001ade <HAL_GPIO_Init+0x196>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_GPIO_Init+0x2ac>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_GPIO_Init+0x192>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x1a0>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x1a0>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x1a0>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x1a0>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af8:	493a      	ldr	r1, [pc, #232]	; (8001be4 <HAL_GPIO_Init+0x29c>)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4938      	ldr	r1, [pc, #224]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
 8001b1e:	e006      	b.n	8001b2e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4933      	ldr	r1, [pc, #204]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d006      	beq.n	8001b48 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	492e      	ldr	r1, [pc, #184]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
 8001b46:	e006      	b.n	8001b56 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4929      	ldr	r1, [pc, #164]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d006      	beq.n	8001b70 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4924      	ldr	r1, [pc, #144]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
 8001b6e:	e006      	b.n	8001b7e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	491f      	ldr	r1, [pc, #124]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	491a      	ldr	r1, [pc, #104]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60cb      	str	r3, [r1, #12]
 8001b96:	e006      	b.n	8001ba6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	4915      	ldr	r1, [pc, #84]	; (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	3301      	adds	r3, #1
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f aed0 	bne.w	800195c <HAL_GPIO_Init+0x14>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	372c      	adds	r7, #44	; 0x2c
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	10210000 	.word	0x10210000
 8001bcc:	10110000 	.word	0x10110000
 8001bd0:	10120000 	.word	0x10120000
 8001bd4:	10310000 	.word	0x10310000
 8001bd8:	10320000 	.word	0x10320000
 8001bdc:	10220000 	.word	0x10220000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40010000 	.word	0x40010000
 8001be8:	40010800 	.word	0x40010800
 8001bec:	40010c00 	.word	0x40010c00
 8001bf0:	40011000 	.word	0x40011000
 8001bf4:	40011400 	.word	0x40011400
 8001bf8:	40010400 	.word	0x40010400

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	611a      	str	r2, [r3, #16]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e10f      	b.n	8001e5e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe ff02 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2224      	movs	r2, #36	; 0x24
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c70:	f000 fce6 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a7b      	ldr	r2, [pc, #492]	; (8001e68 <HAL_I2C_Init+0x23c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d807      	bhi.n	8001c90 <HAL_I2C_Init+0x64>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <HAL_I2C_Init+0x240>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	bf94      	ite	ls
 8001c88:	2301      	movls	r3, #1
 8001c8a:	2300      	movhi	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	e006      	b.n	8001c9e <HAL_I2C_Init+0x72>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4a77      	ldr	r2, [pc, #476]	; (8001e70 <HAL_I2C_Init+0x244>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf94      	ite	ls
 8001c98:	2301      	movls	r3, #1
 8001c9a:	2300      	movhi	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e0db      	b.n	8001e5e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4a72      	ldr	r2, [pc, #456]	; (8001e74 <HAL_I2C_Init+0x248>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	0c9b      	lsrs	r3, r3, #18
 8001cb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a64      	ldr	r2, [pc, #400]	; (8001e68 <HAL_I2C_Init+0x23c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d802      	bhi.n	8001ce0 <HAL_I2C_Init+0xb4>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	e009      	b.n	8001cf4 <HAL_I2C_Init+0xc8>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	4a63      	ldr	r2, [pc, #396]	; (8001e78 <HAL_I2C_Init+0x24c>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4956      	ldr	r1, [pc, #344]	; (8001e68 <HAL_I2C_Init+0x23c>)
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d80d      	bhi.n	8001d30 <HAL_I2C_Init+0x104>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1e59      	subs	r1, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d22:	3301      	adds	r3, #1
 8001d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	bf38      	it	cc
 8001d2c:	2304      	movcc	r3, #4
 8001d2e:	e04f      	b.n	8001dd0 <HAL_I2C_Init+0x1a4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d111      	bne.n	8001d5c <HAL_I2C_Init+0x130>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e58      	subs	r0, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6859      	ldr	r1, [r3, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	440b      	add	r3, r1
 8001d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	e012      	b.n	8001d82 <HAL_I2C_Init+0x156>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	0099      	lsls	r1, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d72:	3301      	adds	r3, #1
 8001d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Init+0x15e>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e022      	b.n	8001dd0 <HAL_I2C_Init+0x1a4>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10e      	bne.n	8001db0 <HAL_I2C_Init+0x184>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1e58      	subs	r0, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	440b      	add	r3, r1
 8001da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da4:	3301      	adds	r3, #1
 8001da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dae:	e00f      	b.n	8001dd0 <HAL_I2C_Init+0x1a4>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	0099      	lsls	r1, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	6809      	ldr	r1, [r1, #0]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001dfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6911      	ldr	r1, [r2, #16]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68d2      	ldr	r2, [r2, #12]
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	000186a0 	.word	0x000186a0
 8001e6c:	001e847f 	.word	0x001e847f
 8001e70:	003d08ff 	.word	0x003d08ff
 8001e74:	431bde83 	.word	0x431bde83
 8001e78:	10624dd3 	.word	0x10624dd3

08001e7c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	420e0020 	.word	0x420e0020

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e26c      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8087 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb4:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d00c      	beq.n	8001eda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec0:	4b8f      	ldr	r3, [pc, #572]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d112      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
 8001ecc:	4b8c      	ldr	r3, [pc, #560]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eda:	4b89      	ldr	r3, [pc, #548]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d06c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d168      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e246      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x76>
 8001efc:	4b80      	ldr	r3, [pc, #512]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a7f      	ldr	r2, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	e02e      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x98>
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7a      	ldr	r2, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b78      	ldr	r3, [pc, #480]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a77      	ldr	r2, [pc, #476]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e01d      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0xbc>
 8001f36:	4b72      	ldr	r3, [pc, #456]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a71      	ldr	r2, [pc, #452]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f50:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6a      	ldr	r2, [pc, #424]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b68      	ldr	r3, [pc, #416]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a67      	ldr	r2, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d013      	beq.n	8001f98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7fe fffa 	bl	8000f68 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f78:	f7fe fff6 	bl	8000f68 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b64      	cmp	r3, #100	; 0x64
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1fa      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f0      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe4>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe ffe6 	bl	8000f68 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7fe ffe2 	bl	8000f68 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1e6      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x10c>
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d063      	beq.n	8002096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fce:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b08      	cmp	r3, #8
 8001fe4:	d11c      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
 8001fe6:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	4b43      	ldr	r3, [pc, #268]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e1ba      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4939      	ldr	r1, [pc, #228]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	e03a      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <HAL_RCC_OscConfig+0x270>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202e:	f7fe ff9b 	bl	8000f68 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002036:	f7fe ff97 	bl	8000f68 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e19b      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4927      	ldr	r1, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]
 8002068:	e015      	b.n	8002096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206a:	4b26      	ldr	r3, [pc, #152]	; (8002104 <HAL_RCC_OscConfig+0x270>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe ff7a 	bl	8000f68 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7fe ff76 	bl	8000f68 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e17a      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d03a      	beq.n	8002118 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d019      	beq.n	80020de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_RCC_OscConfig+0x274>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7fe ff5a 	bl	8000f68 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7fe ff56 	bl	8000f68 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e15a      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020d6:	2001      	movs	r0, #1
 80020d8:	f000 fada 	bl	8002690 <RCC_Delay>
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_RCC_OscConfig+0x274>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe ff40 	bl	8000f68 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ea:	e00f      	b.n	800210c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe ff3c 	bl	8000f68 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d908      	bls.n	800210c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e140      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	42420000 	.word	0x42420000
 8002108:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800210c:	4b9e      	ldr	r3, [pc, #632]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1e9      	bne.n	80020ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80a6 	beq.w	8002272 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212a:	4b97      	ldr	r3, [pc, #604]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10d      	bne.n	8002152 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002136:	4b94      	ldr	r3, [pc, #592]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a93      	ldr	r2, [pc, #588]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b91      	ldr	r3, [pc, #580]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b8e      	ldr	r3, [pc, #568]	; (800238c <HAL_RCC_OscConfig+0x4f8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d118      	bne.n	8002190 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b8b      	ldr	r3, [pc, #556]	; (800238c <HAL_RCC_OscConfig+0x4f8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a8a      	ldr	r2, [pc, #552]	; (800238c <HAL_RCC_OscConfig+0x4f8>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7fe fefd 	bl	8000f68 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7fe fef9 	bl	8000f68 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b64      	cmp	r3, #100	; 0x64
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0fd      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b81      	ldr	r3, [pc, #516]	; (800238c <HAL_RCC_OscConfig+0x4f8>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x312>
 8002198:	4b7b      	ldr	r3, [pc, #492]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a7a      	ldr	r2, [pc, #488]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e02d      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x334>
 80021ae:	4b76      	ldr	r3, [pc, #472]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a75      	ldr	r2, [pc, #468]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a72      	ldr	r2, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
 80021c6:	e01c      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x356>
 80021d0:	4b6d      	ldr	r3, [pc, #436]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a6c      	ldr	r2, [pc, #432]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4a69      	ldr	r2, [pc, #420]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6213      	str	r3, [r2, #32]
 80021e8:	e00b      	b.n	8002202 <HAL_RCC_OscConfig+0x36e>
 80021ea:	4b67      	ldr	r3, [pc, #412]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a66      	ldr	r2, [pc, #408]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	4b64      	ldr	r3, [pc, #400]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4a63      	ldr	r2, [pc, #396]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7fe fead 	bl	8000f68 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe fea9 	bl	8000f68 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0ab      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002228:	4b57      	ldr	r3, [pc, #348]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ee      	beq.n	8002212 <HAL_RCC_OscConfig+0x37e>
 8002234:	e014      	b.n	8002260 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7fe fe97 	bl	8000f68 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7fe fe93 	bl	8000f68 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e095      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ee      	bne.n	800223e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d105      	bne.n	8002272 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002266:	4b48      	ldr	r3, [pc, #288]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a47      	ldr	r2, [pc, #284]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8081 	beq.w	800237e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227c:	4b42      	ldr	r3, [pc, #264]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d061      	beq.n	800234c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d146      	bne.n	800231e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <HAL_RCC_OscConfig+0x4fc>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fe67 	bl	8000f68 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fe63 	bl	8000f68 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e067      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b0:	4b35      	ldr	r3, [pc, #212]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022c6:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	492d      	ldr	r1, [pc, #180]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a19      	ldr	r1, [r3, #32]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	430b      	orrs	r3, r1
 80022ea:	4927      	ldr	r1, [pc, #156]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCC_OscConfig+0x4fc>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe fe37 	bl	8000f68 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe fe33 	bl	8000f68 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e037      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x46a>
 800231c:	e02f      	b.n	800237e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <HAL_RCC_OscConfig+0x4fc>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe fe20 	bl	8000f68 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe fe1c 	bl	8000f68 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e020      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x498>
 800234a:	e018      	b.n	800237e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e013      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	429a      	cmp	r2, r3
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	42420060 	.word	0x42420060

08002394 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0d0      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d910      	bls.n	80023d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	4965      	ldr	r1, [pc, #404]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c6:	4b63      	ldr	r3, [pc, #396]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d001      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0b8      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	4b59      	ldr	r3, [pc, #356]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002408:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002412:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	494d      	ldr	r1, [pc, #308]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d040      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e07f      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	4b41      	ldr	r3, [pc, #260]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e073      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002462:	4b3d      	ldr	r3, [pc, #244]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06b      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4936      	ldr	r1, [pc, #216]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fd70 	bl	8000f68 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248c:	f7fe fd6c 	bl	8000f68 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e053      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 020c 	and.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d1eb      	bne.n	800248c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d210      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0207 	bic.w	r2, r3, #7
 80024ca:	4922      	ldr	r1, [pc, #136]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e032      	b.n	800254a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4916      	ldr	r1, [pc, #88]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	490e      	ldr	r1, [pc, #56]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002522:	f000 f821 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	5cd3      	ldrb	r3, [r2, r3]
 8002536:	fa21 f303 	lsr.w	r3, r1, r3
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1cc>)
 800253c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1d0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fcce 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40022000 	.word	0x40022000
 8002558:	40021000 	.word	0x40021000
 800255c:	0800434c 	.word	0x0800434c
 8002560:	20000000 	.word	0x20000000
 8002564:	20000004 	.word	0x20000004

08002568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	b490      	push	{r4, r7}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002570:	1d3c      	adds	r4, r7, #4
 8002572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002578:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_RCC_GetSysClockFreq+0xb4>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	2300      	movs	r3, #0
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d002      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x40>
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x46>
 80025a6:	e02d      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025aa:	623b      	str	r3, [r7, #32]
      break;
 80025ac:	e02d      	b.n	800260a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	0c9b      	lsrs	r3, r3, #18
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025ba:	4413      	add	r3, r2
 80025bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c5b      	lsrs	r3, r3, #17
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025da:	4413      	add	r3, r2
 80025dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	4a0f      	ldr	r2, [pc, #60]	; (8002624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e6:	fb02 f203 	mul.w	r2, r2, r3
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
 80025f2:	e004      	b.n	80025fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	623b      	str	r3, [r7, #32]
      break;
 8002602:	e002      	b.n	800260a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002606:	623b      	str	r3, [r7, #32]
      break;
 8002608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260a:	6a3b      	ldr	r3, [r7, #32]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bc90      	pop	{r4, r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	08004324 	.word	0x08004324
 800261c:	08004334 	.word	0x08004334
 8002620:	40021000 	.word	0x40021000
 8002624:	007a1200 	.word	0x007a1200
 8002628:	003d0900 	.word	0x003d0900

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b02      	ldr	r3, [pc, #8]	; (800263c <HAL_RCC_GetHCLKFreq+0x10>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000000 	.word	0x20000000

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002644:	f7ff fff2 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002648:	4601      	mov	r1, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	fa21 f303 	lsr.w	r3, r1, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	0800435c 	.word	0x0800435c

08002668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800266c:	f7ff ffde 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002670:	4601      	mov	r1, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	0adb      	lsrs	r3, r3, #11
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4a03      	ldr	r2, [pc, #12]	; (800268c <HAL_RCC_GetPCLK2Freq+0x24>)
 800267e:	5cd3      	ldrb	r3, [r2, r3]
 8002680:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	0800435c 	.word	0x0800435c

08002690 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <RCC_Delay+0x34>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <RCC_Delay+0x38>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0a5b      	lsrs	r3, r3, #9
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026ac:	bf00      	nop
  }
  while (Delay --);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1e5a      	subs	r2, r3, #1
 80026b2:	60fa      	str	r2, [r7, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f9      	bne.n	80026ac <RCC_Delay+0x1c>
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000000 	.word	0x20000000
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d07d      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b4f      	ldr	r3, [pc, #316]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b4c      	ldr	r3, [pc, #304]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	4a4b      	ldr	r2, [pc, #300]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002702:	61d3      	str	r3, [r2, #28]
 8002704:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002710:	2301      	movs	r3, #1
 8002712:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	4b46      	ldr	r3, [pc, #280]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d118      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002720:	4b43      	ldr	r3, [pc, #268]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a42      	ldr	r2, [pc, #264]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272c:	f7fe fc1c 	bl	8000f68 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	e008      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7fe fc18 	bl	8000f68 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e06d      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002746:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002752:	4b36      	ldr	r3, [pc, #216]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d02e      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	429a      	cmp	r2, r3
 800276e:	d027      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002770:	4b2e      	ldr	r3, [pc, #184]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002778:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002780:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fbe7 	bl	8000f68 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fbe3 	bl	8000f68 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e036      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ee      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4917      	ldr	r1, [pc, #92]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d008      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	490b      	ldr	r1, [pc, #44]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4904      	ldr	r1, [pc, #16]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
 8002834:	42420440 	.word	0x42420440

08002838 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b08d      	sub	sp, #52	; 0x34
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002840:	4b55      	ldr	r3, [pc, #340]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002842:	f107 040c 	add.w	r4, r7, #12
 8002846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	2300      	movs	r3, #0
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	2300      	movs	r3, #0
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d07f      	beq.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800286c:	2b10      	cmp	r3, #16
 800286e:	d002      	beq.n	8002876 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002870:	2b01      	cmp	r3, #1
 8002872:	d048      	beq.n	8002906 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002874:	e08b      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002876:	4b4a      	ldr	r3, [pc, #296]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800287c:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d07f      	beq.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002894:	4413      	add	r3, r2
 8002896:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800289a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a6:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0c5b      	lsrs	r3, r3, #17
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80028b4:	4413      	add	r3, r2
 80028b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00d      	beq.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80028c6:	4a37      	ldr	r2, [pc, #220]	; (80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d6:	e004      	b.n	80028e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ee:	d102      	bne.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80028f4:	e048      	b.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4a2c      	ldr	r2, [pc, #176]	; (80029ac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002904:	e040      	b.n	8002988 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002906:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	d108      	bne.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
 8002928:	e01f      	b.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002934:	d109      	bne.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002942:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
 8002948:	e00f      	b.n	800296a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002954:	d11a      	bne.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d014      	beq.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002962:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002968:	e010      	b.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800296a:	e00f      	b.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800296c:	f7ff fe7c 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0b9b      	lsrs	r3, r3, #14
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	3301      	adds	r3, #1
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002986:	e002      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002988:	bf00      	nop
 800298a:	e000      	b.n	800298e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800298c:	bf00      	nop
    }
  }
  return (frequency);
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002990:	4618      	mov	r0, r3
 8002992:	3734      	adds	r7, #52	; 0x34
 8002994:	46bd      	mov	sp, r7
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	08004338 	.word	0x08004338
 800299c:	08004348 	.word	0x08004348
 80029a0:	40021000 	.word	0x40021000
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	003d0900 	.word	0x003d0900
 80029ac:	aaaaaaab 	.word	0xaaaaaaab

080029b0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e084      	b.n	8002ad0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7c5b      	ldrb	r3, [r3, #17]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe f8ac 	bl	8000b34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f87a 	bl	8002adc <HAL_RTC_WaitForSynchro>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d004      	beq.n	80029f8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2204      	movs	r2, #4
 80029f2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e06b      	b.n	8002ad0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f89c 	bl	8002b36 <RTC_EnterInitMode>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2204      	movs	r2, #4
 8002a08:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e060      	b.n	8002ad0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0207 	bic.w	r2, r2, #7
 8002a1c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002a26:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_RTC_Init+0x128>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a2b      	ldr	r2, [pc, #172]	; (8002ad8 <HAL_RTC_Init+0x128>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_RTC_Init+0x128>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	4926      	ldr	r1, [pc, #152]	; (8002ad8 <HAL_RTC_Init+0x128>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d003      	beq.n	8002a56 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	e00e      	b.n	8002a74 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7ff feee 	bl	8002838 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a5c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d104      	bne.n	8002a6e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2204      	movs	r2, #4
 8002a68:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e030      	b.n	8002ad0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 010f 	bic.w	r1, r3, #15
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	0c1a      	lsrs	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	b291      	uxth	r1, r2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f870 	bl	8002b86 <RTC_ExitInitMode>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00c      	b.n	8002ad0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40006c00 	.word	0x40006c00

08002adc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e01d      	b.n	8002b2e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0208 	bic.w	r2, r2, #8
 8002b00:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002b02:	f7fe fa31 	bl	8000f68 <HAL_GetTick>
 8002b06:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b08:	e009      	b.n	8002b1e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b0a:	f7fe fa2d 	bl	8000f68 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b18:	d901      	bls.n	8002b1e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e007      	b.n	8002b2e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ee      	beq.n	8002b0a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002b42:	f7fe fa11 	bl	8000f68 <HAL_GetTick>
 8002b46:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b48:	e009      	b.n	8002b5e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b4a:	f7fe fa0d 	bl	8000f68 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b58:	d901      	bls.n	8002b5e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e00f      	b.n	8002b7e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ee      	beq.n	8002b4a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0210 	orr.w	r2, r2, #16
 8002b7a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0210 	bic.w	r2, r2, #16
 8002ba0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002ba2:	f7fe f9e1 	bl	8000f68 <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ba8:	e009      	b.n	8002bbe <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002baa:	f7fe f9dd 	bl	8000f68 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb8:	d901      	bls.n	8002bbe <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e007      	b.n	8002bce <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e01d      	b.n	8002c24 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fd ffbd 	bl	8000b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f000 f9e5 	bl	8002fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e01d      	b.n	8002c7a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd ffb0 	bl	8000bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f000 f9ba 	bl	8002fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2201      	movs	r2, #1
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fc24 	bl	80034e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <HAL_TIM_PWM_Start+0x60>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b06      	cmp	r3, #6
 8002cc6:	d007      	beq.n	8002cd8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40012c00 	.word	0x40012c00

08002ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e0b4      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	f200 809f 	bhi.w	8002e58 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002e59 	.word	0x08002e59
 8002d28:	08002e59 	.word	0x08002e59
 8002d2c:	08002e59 	.word	0x08002e59
 8002d30:	08002d95 	.word	0x08002d95
 8002d34:	08002e59 	.word	0x08002e59
 8002d38:	08002e59 	.word	0x08002e59
 8002d3c:	08002e59 	.word	0x08002e59
 8002d40:	08002dd7 	.word	0x08002dd7
 8002d44:	08002e59 	.word	0x08002e59
 8002d48:	08002e59 	.word	0x08002e59
 8002d4c:	08002e59 	.word	0x08002e59
 8002d50:	08002e17 	.word	0x08002e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68b9      	ldr	r1, [r7, #8]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f9a4 	bl	80030a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0208 	orr.w	r2, r2, #8
 8002d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6999      	ldr	r1, [r3, #24]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	619a      	str	r2, [r3, #24]
      break;
 8002d92:	e062      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f9ea 	bl	8003174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6999      	ldr	r1, [r3, #24]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	021a      	lsls	r2, r3, #8
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]
      break;
 8002dd4:	e041      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fa33 	bl	8003248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69da      	ldr	r2, [r3, #28]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0208 	orr.w	r2, r2, #8
 8002df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0204 	bic.w	r2, r2, #4
 8002e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69d9      	ldr	r1, [r3, #28]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	61da      	str	r2, [r3, #28]
      break;
 8002e14:	e021      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fa7d 	bl	800331c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69d9      	ldr	r1, [r3, #28]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	021a      	lsls	r2, r3, #8
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	61da      	str	r2, [r3, #28]
      break;
 8002e56:	e000      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002e58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x18>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0a6      	b.n	8002fda <HAL_TIM_ConfigClockSource+0x166>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b40      	cmp	r3, #64	; 0x40
 8002ec2:	d067      	beq.n	8002f94 <HAL_TIM_ConfigClockSource+0x120>
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	d80b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x6c>
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d073      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0x140>
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d802      	bhi.n	8002ed6 <HAL_TIM_ConfigClockSource+0x62>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d06f      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002ed4:	e078      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d06c      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0x140>
 8002eda:	2b30      	cmp	r3, #48	; 0x30
 8002edc:	d06a      	beq.n	8002fb4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002ede:	e073      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d00d      	beq.n	8002f00 <HAL_TIM_ConfigClockSource+0x8c>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d804      	bhi.n	8002ef2 <HAL_TIM_ConfigClockSource+0x7e>
 8002ee8:	2b50      	cmp	r3, #80	; 0x50
 8002eea:	d033      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0xe0>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d041      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ef0:	e06a      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	d066      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x152>
 8002ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efc:	d017      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002efe:	e063      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6899      	ldr	r1, [r3, #8]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f000 fac9 	bl	80034a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f22:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	609a      	str	r2, [r3, #8]
      break;
 8002f2c:	e04c      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6899      	ldr	r1, [r3, #8]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f000 fab2 	bl	80034a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f50:	609a      	str	r2, [r3, #8]
      break;
 8002f52:	e039      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	461a      	mov	r2, r3
 8002f62:	f000 fa29 	bl	80033b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2150      	movs	r1, #80	; 0x50
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fa80 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002f72:	e029      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	461a      	mov	r2, r3
 8002f82:	f000 fa47 	bl	8003414 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2160      	movs	r1, #96	; 0x60
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fa70 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002f92:	e019      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f000 fa09 	bl	80033b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2140      	movs	r1, #64	; 0x40
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fa60 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002fb2:	e009      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f000 fa57 	bl	8003472 <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e000      	b.n	8002fc8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a29      	ldr	r2, [pc, #164]	; (800309c <TIM_Base_SetConfig+0xb8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00b      	beq.n	8003014 <TIM_Base_SetConfig+0x30>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003002:	d007      	beq.n	8003014 <TIM_Base_SetConfig+0x30>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <TIM_Base_SetConfig+0xbc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d003      	beq.n	8003014 <TIM_Base_SetConfig+0x30>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <TIM_Base_SetConfig+0xc0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d108      	bne.n	8003026 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a1c      	ldr	r2, [pc, #112]	; (800309c <TIM_Base_SetConfig+0xb8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00b      	beq.n	8003046 <TIM_Base_SetConfig+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003034:	d007      	beq.n	8003046 <TIM_Base_SetConfig+0x62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <TIM_Base_SetConfig+0xbc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_Base_SetConfig+0x62>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <TIM_Base_SetConfig+0xc0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d108      	bne.n	8003058 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a07      	ldr	r2, [pc, #28]	; (800309c <TIM_Base_SetConfig+0xb8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d103      	bne.n	800308c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	615a      	str	r2, [r3, #20]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800

080030a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0201 	bic.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 0302 	bic.w	r3, r3, #2
 80030f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <TIM_OC1_SetConfig+0xc8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10c      	bne.n	800311e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0308 	bic.w	r3, r3, #8
 800310a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <TIM_OC1_SetConfig+0xc8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d111      	bne.n	800314a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800312c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40012c00 	.word	0x40012c00

08003174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0210 	bic.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	021b      	lsls	r3, r3, #8
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0320 	bic.w	r3, r3, #32
 80031be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <TIM_OC2_SetConfig+0xd0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10d      	bne.n	80031f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a14      	ldr	r2, [pc, #80]	; (8003244 <TIM_OC2_SetConfig+0xd0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d113      	bne.n	8003220 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	40012c00 	.word	0x40012c00

08003248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0303 	bic.w	r3, r3, #3
 800327e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <TIM_OC3_SetConfig+0xd0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10d      	bne.n	80032c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <TIM_OC3_SetConfig+0xd0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d113      	bne.n	80032f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	621a      	str	r2, [r3, #32]
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00

0800331c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	031b      	lsls	r3, r3, #12
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <TIM_OC4_SetConfig+0x98>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d109      	bne.n	8003390 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	019b      	lsls	r3, r3, #6
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	40012c00 	.word	0x40012c00

080033b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0201 	bic.w	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 030a 	bic.w	r3, r3, #10
 80033f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 0210 	bic.w	r2, r3, #16
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800343e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	031b      	lsls	r3, r3, #12
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	f043 0307 	orr.w	r3, r3, #7
 8003494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
}
 800349c:	bf00      	nop
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr

080034a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b087      	sub	sp, #28
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
 80034b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	609a      	str	r2, [r3, #8]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr

080034e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2201      	movs	r2, #1
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1a      	ldr	r2, [r3, #32]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	43db      	mvns	r3, r3
 8003506:	401a      	ands	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	431a      	orrs	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003540:	2302      	movs	r3, #2
 8003542:	e032      	b.n	80035aa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800357c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e03d      	b.n	800364c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e03f      	b.n	80036e8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fd fb37 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2224      	movs	r2, #36	; 0x24
 8003686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003698:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f90c 	bl	80038b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b20      	cmp	r3, #32
 800370e:	f040 8083 	bne.w	8003818 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_UART_Transmit+0x2e>
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e07b      	b.n	800381a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x40>
 800372c:	2302      	movs	r3, #2
 800372e:	e074      	b.n	800381a <HAL_UART_Transmit+0x12a>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2221      	movs	r2, #33	; 0x21
 8003742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003746:	f7fd fc0f 	bl	8000f68 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003758:	e042      	b.n	80037e0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d122      	bne.n	80037b8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2200      	movs	r2, #0
 800377a:	2180      	movs	r1, #128	; 0x80
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f850 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e046      	b.n	800381a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	3302      	adds	r3, #2
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	e017      	b.n	80037e0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	3301      	adds	r3, #1
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	e013      	b.n	80037e0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	2200      	movs	r2, #0
 80037c0:	2180      	movs	r1, #128	; 0x80
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f82d 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e023      	b.n	800381a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	60ba      	str	r2, [r7, #8]
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1b7      	bne.n	800375a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	2140      	movs	r1, #64	; 0x40
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f814 	bl	8003822 <UART_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e00a      	b.n	800381a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	e000      	b.n	800381a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
  }
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003832:	e02c      	b.n	800388e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d028      	beq.n	800388e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0x30>
 8003842:	f7fd fb91 	bl	8000f68 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	429a      	cmp	r2, r3
 8003850:	d21d      	bcs.n	800388e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003860:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e00f      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4013      	ands	r3, r2
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d0c3      	beq.n	8003834 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038f2:	f023 030c 	bic.w	r3, r3, #12
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	430b      	orrs	r3, r1
 80038fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <UART_SetConfig+0x1ac>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d14e      	bne.n	80039be <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003920:	f7fe fea2 	bl	8002668 <HAL_RCC_GetPCLK2Freq>
 8003924:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009a      	lsls	r2, r3, #2
 8003930:	441a      	add	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <UART_SetConfig+0x1b0>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	0119      	lsls	r1, r3, #4
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	4613      	mov	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	009a      	lsls	r2, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fbb2 f2f3 	udiv	r2, r2, r3
 800395c:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <UART_SetConfig+0x1b0>)
 800395e:	fba3 0302 	umull	r0, r3, r3, r2
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	fb00 f303 	mul.w	r3, r0, r3
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	3332      	adds	r3, #50	; 0x32
 8003970:	4a3d      	ldr	r2, [pc, #244]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397c:	4419      	add	r1, r3
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	fbb2 f2f3 	udiv	r2, r2, r3
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003996:	fba3 0302 	umull	r0, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	2064      	movs	r0, #100	; 0x64
 800399e:	fb00 f303 	mul.w	r3, r0, r3
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	3332      	adds	r3, #50	; 0x32
 80039a8:	4a2f      	ldr	r2, [pc, #188]	; (8003a68 <UART_SetConfig+0x1b0>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	440a      	add	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80039bc:	e04d      	b.n	8003a5a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80039be:	f7fe fe3f 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 80039c2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	009a      	lsls	r2, r3, #2
 80039ce:	441a      	add	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	4a23      	ldr	r2, [pc, #140]	; (8003a68 <UART_SetConfig+0x1b0>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	0119      	lsls	r1, r3, #4
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009a      	lsls	r2, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <UART_SetConfig+0x1b0>)
 80039fc:	fba3 0302 	umull	r0, r3, r3, r2
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	2064      	movs	r0, #100	; 0x64
 8003a04:	fb00 f303 	mul.w	r3, r0, r3
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	3332      	adds	r3, #50	; 0x32
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1a:	4419      	add	r1, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009a      	lsls	r2, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003a34:	fba3 0302 	umull	r0, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2064      	movs	r0, #100	; 0x64
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a08      	ldr	r2, [pc, #32]	; (8003a68 <UART_SetConfig+0x1b0>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	440a      	add	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40013800 	.word	0x40013800
 8003a68:	51eb851f 	.word	0x51eb851f

08003a6c <__errno>:
 8003a6c:	4b01      	ldr	r3, [pc, #4]	; (8003a74 <__errno+0x8>)
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	2000000c 	.word	0x2000000c

08003a78 <__libc_init_array>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	2500      	movs	r5, #0
 8003a7c:	4e0c      	ldr	r6, [pc, #48]	; (8003ab0 <__libc_init_array+0x38>)
 8003a7e:	4c0d      	ldr	r4, [pc, #52]	; (8003ab4 <__libc_init_array+0x3c>)
 8003a80:	1ba4      	subs	r4, r4, r6
 8003a82:	10a4      	asrs	r4, r4, #2
 8003a84:	42a5      	cmp	r5, r4
 8003a86:	d109      	bne.n	8003a9c <__libc_init_array+0x24>
 8003a88:	f000 fc34 	bl	80042f4 <_init>
 8003a8c:	2500      	movs	r5, #0
 8003a8e:	4e0a      	ldr	r6, [pc, #40]	; (8003ab8 <__libc_init_array+0x40>)
 8003a90:	4c0a      	ldr	r4, [pc, #40]	; (8003abc <__libc_init_array+0x44>)
 8003a92:	1ba4      	subs	r4, r4, r6
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	42a5      	cmp	r5, r4
 8003a98:	d105      	bne.n	8003aa6 <__libc_init_array+0x2e>
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aa0:	4798      	blx	r3
 8003aa2:	3501      	adds	r5, #1
 8003aa4:	e7ee      	b.n	8003a84 <__libc_init_array+0xc>
 8003aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aaa:	4798      	blx	r3
 8003aac:	3501      	adds	r5, #1
 8003aae:	e7f2      	b.n	8003a96 <__libc_init_array+0x1e>
 8003ab0:	08004398 	.word	0x08004398
 8003ab4:	08004398 	.word	0x08004398
 8003ab8:	08004398 	.word	0x08004398
 8003abc:	0800439c 	.word	0x0800439c

08003ac0 <memset>:
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4402      	add	r2, r0
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d100      	bne.n	8003aca <memset+0xa>
 8003ac8:	4770      	bx	lr
 8003aca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ace:	e7f9      	b.n	8003ac4 <memset+0x4>

08003ad0 <siprintf>:
 8003ad0:	b40e      	push	{r1, r2, r3}
 8003ad2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ad6:	b500      	push	{lr}
 8003ad8:	b09c      	sub	sp, #112	; 0x70
 8003ada:	ab1d      	add	r3, sp, #116	; 0x74
 8003adc:	9002      	str	r0, [sp, #8]
 8003ade:	9006      	str	r0, [sp, #24]
 8003ae0:	9107      	str	r1, [sp, #28]
 8003ae2:	9104      	str	r1, [sp, #16]
 8003ae4:	4808      	ldr	r0, [pc, #32]	; (8003b08 <siprintf+0x38>)
 8003ae6:	4909      	ldr	r1, [pc, #36]	; (8003b0c <siprintf+0x3c>)
 8003ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aec:	9105      	str	r1, [sp, #20]
 8003aee:	6800      	ldr	r0, [r0, #0]
 8003af0:	a902      	add	r1, sp, #8
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	f000 f866 	bl	8003bc4 <_svfiprintf_r>
 8003af8:	2200      	movs	r2, #0
 8003afa:	9b02      	ldr	r3, [sp, #8]
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	b01c      	add	sp, #112	; 0x70
 8003b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b04:	b003      	add	sp, #12
 8003b06:	4770      	bx	lr
 8003b08:	2000000c 	.word	0x2000000c
 8003b0c:	ffff0208 	.word	0xffff0208

08003b10 <__ssputs_r>:
 8003b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b14:	688e      	ldr	r6, [r1, #8]
 8003b16:	4682      	mov	sl, r0
 8003b18:	429e      	cmp	r6, r3
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	4690      	mov	r8, r2
 8003b1e:	4699      	mov	r9, r3
 8003b20:	d837      	bhi.n	8003b92 <__ssputs_r+0x82>
 8003b22:	898a      	ldrh	r2, [r1, #12]
 8003b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b28:	d031      	beq.n	8003b8e <__ssputs_r+0x7e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	6825      	ldr	r5, [r4, #0]
 8003b2e:	6909      	ldr	r1, [r1, #16]
 8003b30:	1a6f      	subs	r7, r5, r1
 8003b32:	6965      	ldr	r5, [r4, #20]
 8003b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b38:	fb95 f5f3 	sdiv	r5, r5, r3
 8003b3c:	f109 0301 	add.w	r3, r9, #1
 8003b40:	443b      	add	r3, r7
 8003b42:	429d      	cmp	r5, r3
 8003b44:	bf38      	it	cc
 8003b46:	461d      	movcc	r5, r3
 8003b48:	0553      	lsls	r3, r2, #21
 8003b4a:	d530      	bpl.n	8003bae <__ssputs_r+0x9e>
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f000 fb37 	bl	80041c0 <_malloc_r>
 8003b52:	4606      	mov	r6, r0
 8003b54:	b950      	cbnz	r0, 8003b6c <__ssputs_r+0x5c>
 8003b56:	230c      	movs	r3, #12
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	f8ca 3000 	str.w	r3, [sl]
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b66:	81a3      	strh	r3, [r4, #12]
 8003b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6c:	463a      	mov	r2, r7
 8003b6e:	6921      	ldr	r1, [r4, #16]
 8003b70:	f000 fab6 	bl	80040e0 <memcpy>
 8003b74:	89a3      	ldrh	r3, [r4, #12]
 8003b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7e:	81a3      	strh	r3, [r4, #12]
 8003b80:	6126      	str	r6, [r4, #16]
 8003b82:	443e      	add	r6, r7
 8003b84:	6026      	str	r6, [r4, #0]
 8003b86:	464e      	mov	r6, r9
 8003b88:	6165      	str	r5, [r4, #20]
 8003b8a:	1bed      	subs	r5, r5, r7
 8003b8c:	60a5      	str	r5, [r4, #8]
 8003b8e:	454e      	cmp	r6, r9
 8003b90:	d900      	bls.n	8003b94 <__ssputs_r+0x84>
 8003b92:	464e      	mov	r6, r9
 8003b94:	4632      	mov	r2, r6
 8003b96:	4641      	mov	r1, r8
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	f000 faac 	bl	80040f6 <memmove>
 8003b9e:	68a3      	ldr	r3, [r4, #8]
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	1b9b      	subs	r3, r3, r6
 8003ba4:	60a3      	str	r3, [r4, #8]
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	441e      	add	r6, r3
 8003baa:	6026      	str	r6, [r4, #0]
 8003bac:	e7dc      	b.n	8003b68 <__ssputs_r+0x58>
 8003bae:	462a      	mov	r2, r5
 8003bb0:	f000 fb60 	bl	8004274 <_realloc_r>
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d1e2      	bne.n	8003b80 <__ssputs_r+0x70>
 8003bba:	6921      	ldr	r1, [r4, #16]
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	f000 fab3 	bl	8004128 <_free_r>
 8003bc2:	e7c8      	b.n	8003b56 <__ssputs_r+0x46>

08003bc4 <_svfiprintf_r>:
 8003bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc8:	461d      	mov	r5, r3
 8003bca:	898b      	ldrh	r3, [r1, #12]
 8003bcc:	b09d      	sub	sp, #116	; 0x74
 8003bce:	061f      	lsls	r7, r3, #24
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	4616      	mov	r6, r2
 8003bd6:	d50f      	bpl.n	8003bf8 <_svfiprintf_r+0x34>
 8003bd8:	690b      	ldr	r3, [r1, #16]
 8003bda:	b96b      	cbnz	r3, 8003bf8 <_svfiprintf_r+0x34>
 8003bdc:	2140      	movs	r1, #64	; 0x40
 8003bde:	f000 faef 	bl	80041c0 <_malloc_r>
 8003be2:	6020      	str	r0, [r4, #0]
 8003be4:	6120      	str	r0, [r4, #16]
 8003be6:	b928      	cbnz	r0, 8003bf4 <_svfiprintf_r+0x30>
 8003be8:	230c      	movs	r3, #12
 8003bea:	f8c8 3000 	str.w	r3, [r8]
 8003bee:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf2:	e0c8      	b.n	8003d86 <_svfiprintf_r+0x1c2>
 8003bf4:	2340      	movs	r3, #64	; 0x40
 8003bf6:	6163      	str	r3, [r4, #20]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003bfc:	2320      	movs	r3, #32
 8003bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c02:	2330      	movs	r3, #48	; 0x30
 8003c04:	f04f 0b01 	mov.w	fp, #1
 8003c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c0c:	9503      	str	r5, [sp, #12]
 8003c0e:	4637      	mov	r7, r6
 8003c10:	463d      	mov	r5, r7
 8003c12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c16:	b10b      	cbz	r3, 8003c1c <_svfiprintf_r+0x58>
 8003c18:	2b25      	cmp	r3, #37	; 0x25
 8003c1a:	d13e      	bne.n	8003c9a <_svfiprintf_r+0xd6>
 8003c1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003c20:	d00b      	beq.n	8003c3a <_svfiprintf_r+0x76>
 8003c22:	4653      	mov	r3, sl
 8003c24:	4632      	mov	r2, r6
 8003c26:	4621      	mov	r1, r4
 8003c28:	4640      	mov	r0, r8
 8003c2a:	f7ff ff71 	bl	8003b10 <__ssputs_r>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	f000 80a4 	beq.w	8003d7c <_svfiprintf_r+0x1b8>
 8003c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c36:	4453      	add	r3, sl
 8003c38:	9309      	str	r3, [sp, #36]	; 0x24
 8003c3a:	783b      	ldrb	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 809d 	beq.w	8003d7c <_svfiprintf_r+0x1b8>
 8003c42:	2300      	movs	r3, #0
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	9307      	str	r3, [sp, #28]
 8003c50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c54:	931a      	str	r3, [sp, #104]	; 0x68
 8003c56:	462f      	mov	r7, r5
 8003c58:	2205      	movs	r2, #5
 8003c5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003c5e:	4850      	ldr	r0, [pc, #320]	; (8003da0 <_svfiprintf_r+0x1dc>)
 8003c60:	f000 fa30 	bl	80040c4 <memchr>
 8003c64:	9b04      	ldr	r3, [sp, #16]
 8003c66:	b9d0      	cbnz	r0, 8003c9e <_svfiprintf_r+0xda>
 8003c68:	06d9      	lsls	r1, r3, #27
 8003c6a:	bf44      	itt	mi
 8003c6c:	2220      	movmi	r2, #32
 8003c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c72:	071a      	lsls	r2, r3, #28
 8003c74:	bf44      	itt	mi
 8003c76:	222b      	movmi	r2, #43	; 0x2b
 8003c78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c7c:	782a      	ldrb	r2, [r5, #0]
 8003c7e:	2a2a      	cmp	r2, #42	; 0x2a
 8003c80:	d015      	beq.n	8003cae <_svfiprintf_r+0xea>
 8003c82:	462f      	mov	r7, r5
 8003c84:	2000      	movs	r0, #0
 8003c86:	250a      	movs	r5, #10
 8003c88:	9a07      	ldr	r2, [sp, #28]
 8003c8a:	4639      	mov	r1, r7
 8003c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c90:	3b30      	subs	r3, #48	; 0x30
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d94d      	bls.n	8003d32 <_svfiprintf_r+0x16e>
 8003c96:	b1b8      	cbz	r0, 8003cc8 <_svfiprintf_r+0x104>
 8003c98:	e00f      	b.n	8003cba <_svfiprintf_r+0xf6>
 8003c9a:	462f      	mov	r7, r5
 8003c9c:	e7b8      	b.n	8003c10 <_svfiprintf_r+0x4c>
 8003c9e:	4a40      	ldr	r2, [pc, #256]	; (8003da0 <_svfiprintf_r+0x1dc>)
 8003ca0:	463d      	mov	r5, r7
 8003ca2:	1a80      	subs	r0, r0, r2
 8003ca4:	fa0b f000 	lsl.w	r0, fp, r0
 8003ca8:	4318      	orrs	r0, r3
 8003caa:	9004      	str	r0, [sp, #16]
 8003cac:	e7d3      	b.n	8003c56 <_svfiprintf_r+0x92>
 8003cae:	9a03      	ldr	r2, [sp, #12]
 8003cb0:	1d11      	adds	r1, r2, #4
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	9103      	str	r1, [sp, #12]
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	db01      	blt.n	8003cbe <_svfiprintf_r+0xfa>
 8003cba:	9207      	str	r2, [sp, #28]
 8003cbc:	e004      	b.n	8003cc8 <_svfiprintf_r+0x104>
 8003cbe:	4252      	negs	r2, r2
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	9207      	str	r2, [sp, #28]
 8003cc6:	9304      	str	r3, [sp, #16]
 8003cc8:	783b      	ldrb	r3, [r7, #0]
 8003cca:	2b2e      	cmp	r3, #46	; 0x2e
 8003ccc:	d10c      	bne.n	8003ce8 <_svfiprintf_r+0x124>
 8003cce:	787b      	ldrb	r3, [r7, #1]
 8003cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd2:	d133      	bne.n	8003d3c <_svfiprintf_r+0x178>
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	3702      	adds	r7, #2
 8003cd8:	1d1a      	adds	r2, r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	9203      	str	r2, [sp, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bfb8      	it	lt
 8003ce2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ce6:	9305      	str	r3, [sp, #20]
 8003ce8:	4d2e      	ldr	r5, [pc, #184]	; (8003da4 <_svfiprintf_r+0x1e0>)
 8003cea:	2203      	movs	r2, #3
 8003cec:	7839      	ldrb	r1, [r7, #0]
 8003cee:	4628      	mov	r0, r5
 8003cf0:	f000 f9e8 	bl	80040c4 <memchr>
 8003cf4:	b138      	cbz	r0, 8003d06 <_svfiprintf_r+0x142>
 8003cf6:	2340      	movs	r3, #64	; 0x40
 8003cf8:	1b40      	subs	r0, r0, r5
 8003cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8003cfe:	9b04      	ldr	r3, [sp, #16]
 8003d00:	3701      	adds	r7, #1
 8003d02:	4303      	orrs	r3, r0
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	7839      	ldrb	r1, [r7, #0]
 8003d08:	2206      	movs	r2, #6
 8003d0a:	4827      	ldr	r0, [pc, #156]	; (8003da8 <_svfiprintf_r+0x1e4>)
 8003d0c:	1c7e      	adds	r6, r7, #1
 8003d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d12:	f000 f9d7 	bl	80040c4 <memchr>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d038      	beq.n	8003d8c <_svfiprintf_r+0x1c8>
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <_svfiprintf_r+0x1e8>)
 8003d1c:	bb13      	cbnz	r3, 8003d64 <_svfiprintf_r+0x1a0>
 8003d1e:	9b03      	ldr	r3, [sp, #12]
 8003d20:	3307      	adds	r3, #7
 8003d22:	f023 0307 	bic.w	r3, r3, #7
 8003d26:	3308      	adds	r3, #8
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d2c:	444b      	add	r3, r9
 8003d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d30:	e76d      	b.n	8003c0e <_svfiprintf_r+0x4a>
 8003d32:	fb05 3202 	mla	r2, r5, r2, r3
 8003d36:	2001      	movs	r0, #1
 8003d38:	460f      	mov	r7, r1
 8003d3a:	e7a6      	b.n	8003c8a <_svfiprintf_r+0xc6>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	250a      	movs	r5, #10
 8003d40:	4619      	mov	r1, r3
 8003d42:	3701      	adds	r7, #1
 8003d44:	9305      	str	r3, [sp, #20]
 8003d46:	4638      	mov	r0, r7
 8003d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d4c:	3a30      	subs	r2, #48	; 0x30
 8003d4e:	2a09      	cmp	r2, #9
 8003d50:	d903      	bls.n	8003d5a <_svfiprintf_r+0x196>
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0c8      	beq.n	8003ce8 <_svfiprintf_r+0x124>
 8003d56:	9105      	str	r1, [sp, #20]
 8003d58:	e7c6      	b.n	8003ce8 <_svfiprintf_r+0x124>
 8003d5a:	fb05 2101 	mla	r1, r5, r1, r2
 8003d5e:	2301      	movs	r3, #1
 8003d60:	4607      	mov	r7, r0
 8003d62:	e7f0      	b.n	8003d46 <_svfiprintf_r+0x182>
 8003d64:	ab03      	add	r3, sp, #12
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4622      	mov	r2, r4
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <_svfiprintf_r+0x1ec>)
 8003d6c:	a904      	add	r1, sp, #16
 8003d6e:	4640      	mov	r0, r8
 8003d70:	f3af 8000 	nop.w
 8003d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d78:	4681      	mov	r9, r0
 8003d7a:	d1d6      	bne.n	8003d2a <_svfiprintf_r+0x166>
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	065b      	lsls	r3, r3, #25
 8003d80:	f53f af35 	bmi.w	8003bee <_svfiprintf_r+0x2a>
 8003d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d86:	b01d      	add	sp, #116	; 0x74
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8c:	ab03      	add	r3, sp, #12
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	4622      	mov	r2, r4
 8003d92:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <_svfiprintf_r+0x1ec>)
 8003d94:	a904      	add	r1, sp, #16
 8003d96:	4640      	mov	r0, r8
 8003d98:	f000 f882 	bl	8003ea0 <_printf_i>
 8003d9c:	e7ea      	b.n	8003d74 <_svfiprintf_r+0x1b0>
 8003d9e:	bf00      	nop
 8003da0:	08004364 	.word	0x08004364
 8003da4:	0800436a 	.word	0x0800436a
 8003da8:	0800436e 	.word	0x0800436e
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b11 	.word	0x08003b11

08003db4 <_printf_common>:
 8003db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	4691      	mov	r9, r2
 8003dba:	461f      	mov	r7, r3
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	bfb8      	it	lt
 8003dc6:	4613      	movlt	r3, r2
 8003dc8:	f8c9 3000 	str.w	r3, [r9]
 8003dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd6:	b112      	cbz	r2, 8003dde <_printf_common+0x2a>
 8003dd8:	3301      	adds	r3, #1
 8003dda:	f8c9 3000 	str.w	r3, [r9]
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	0699      	lsls	r1, r3, #26
 8003de2:	bf42      	ittt	mi
 8003de4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003de8:	3302      	addmi	r3, #2
 8003dea:	f8c9 3000 	strmi.w	r3, [r9]
 8003dee:	6825      	ldr	r5, [r4, #0]
 8003df0:	f015 0506 	ands.w	r5, r5, #6
 8003df4:	d107      	bne.n	8003e06 <_printf_common+0x52>
 8003df6:	f104 0a19 	add.w	sl, r4, #25
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	42ab      	cmp	r3, r5
 8003e04:	dc29      	bgt.n	8003e5a <_printf_common+0xa6>
 8003e06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e0a:	6822      	ldr	r2, [r4, #0]
 8003e0c:	3300      	adds	r3, #0
 8003e0e:	bf18      	it	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	0692      	lsls	r2, r2, #26
 8003e14:	d42e      	bmi.n	8003e74 <_printf_common+0xc0>
 8003e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e1a:	4639      	mov	r1, r7
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	47c0      	blx	r8
 8003e20:	3001      	adds	r0, #1
 8003e22:	d021      	beq.n	8003e68 <_printf_common+0xb4>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	68e5      	ldr	r5, [r4, #12]
 8003e28:	f003 0306 	and.w	r3, r3, #6
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	bf18      	it	ne
 8003e30:	2500      	movne	r5, #0
 8003e32:	f8d9 2000 	ldr.w	r2, [r9]
 8003e36:	f04f 0900 	mov.w	r9, #0
 8003e3a:	bf08      	it	eq
 8003e3c:	1aad      	subeq	r5, r5, r2
 8003e3e:	68a3      	ldr	r3, [r4, #8]
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	bf08      	it	eq
 8003e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	bfc4      	itt	gt
 8003e4c:	1a9b      	subgt	r3, r3, r2
 8003e4e:	18ed      	addgt	r5, r5, r3
 8003e50:	341a      	adds	r4, #26
 8003e52:	454d      	cmp	r5, r9
 8003e54:	d11a      	bne.n	8003e8c <_printf_common+0xd8>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e008      	b.n	8003e6c <_printf_common+0xb8>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	4639      	mov	r1, r7
 8003e60:	4630      	mov	r0, r6
 8003e62:	47c0      	blx	r8
 8003e64:	3001      	adds	r0, #1
 8003e66:	d103      	bne.n	8003e70 <_printf_common+0xbc>
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	3501      	adds	r5, #1
 8003e72:	e7c2      	b.n	8003dfa <_printf_common+0x46>
 8003e74:	2030      	movs	r0, #48	; 0x30
 8003e76:	18e1      	adds	r1, r4, r3
 8003e78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e82:	4422      	add	r2, r4
 8003e84:	3302      	adds	r3, #2
 8003e86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e8a:	e7c4      	b.n	8003e16 <_printf_common+0x62>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4639      	mov	r1, r7
 8003e92:	4630      	mov	r0, r6
 8003e94:	47c0      	blx	r8
 8003e96:	3001      	adds	r0, #1
 8003e98:	d0e6      	beq.n	8003e68 <_printf_common+0xb4>
 8003e9a:	f109 0901 	add.w	r9, r9, #1
 8003e9e:	e7d8      	b.n	8003e52 <_printf_common+0x9e>

08003ea0 <_printf_i>:
 8003ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	7e09      	ldrb	r1, [r1, #24]
 8003eac:	b085      	sub	sp, #20
 8003eae:	296e      	cmp	r1, #110	; 0x6e
 8003eb0:	4617      	mov	r7, r2
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	4698      	mov	r8, r3
 8003eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eb8:	f000 80b3 	beq.w	8004022 <_printf_i+0x182>
 8003ebc:	d822      	bhi.n	8003f04 <_printf_i+0x64>
 8003ebe:	2963      	cmp	r1, #99	; 0x63
 8003ec0:	d036      	beq.n	8003f30 <_printf_i+0x90>
 8003ec2:	d80a      	bhi.n	8003eda <_printf_i+0x3a>
 8003ec4:	2900      	cmp	r1, #0
 8003ec6:	f000 80b9 	beq.w	800403c <_printf_i+0x19c>
 8003eca:	2958      	cmp	r1, #88	; 0x58
 8003ecc:	f000 8083 	beq.w	8003fd6 <_printf_i+0x136>
 8003ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ed4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ed8:	e032      	b.n	8003f40 <_printf_i+0xa0>
 8003eda:	2964      	cmp	r1, #100	; 0x64
 8003edc:	d001      	beq.n	8003ee2 <_printf_i+0x42>
 8003ede:	2969      	cmp	r1, #105	; 0x69
 8003ee0:	d1f6      	bne.n	8003ed0 <_printf_i+0x30>
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	6813      	ldr	r3, [r2, #0]
 8003ee6:	0605      	lsls	r5, r0, #24
 8003ee8:	f103 0104 	add.w	r1, r3, #4
 8003eec:	d52a      	bpl.n	8003f44 <_printf_i+0xa4>
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6011      	str	r1, [r2, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da03      	bge.n	8003efe <_printf_i+0x5e>
 8003ef6:	222d      	movs	r2, #45	; 0x2d
 8003ef8:	425b      	negs	r3, r3
 8003efa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003efe:	486f      	ldr	r0, [pc, #444]	; (80040bc <_printf_i+0x21c>)
 8003f00:	220a      	movs	r2, #10
 8003f02:	e039      	b.n	8003f78 <_printf_i+0xd8>
 8003f04:	2973      	cmp	r1, #115	; 0x73
 8003f06:	f000 809d 	beq.w	8004044 <_printf_i+0x1a4>
 8003f0a:	d808      	bhi.n	8003f1e <_printf_i+0x7e>
 8003f0c:	296f      	cmp	r1, #111	; 0x6f
 8003f0e:	d020      	beq.n	8003f52 <_printf_i+0xb2>
 8003f10:	2970      	cmp	r1, #112	; 0x70
 8003f12:	d1dd      	bne.n	8003ed0 <_printf_i+0x30>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f043 0320 	orr.w	r3, r3, #32
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	e003      	b.n	8003f26 <_printf_i+0x86>
 8003f1e:	2975      	cmp	r1, #117	; 0x75
 8003f20:	d017      	beq.n	8003f52 <_printf_i+0xb2>
 8003f22:	2978      	cmp	r1, #120	; 0x78
 8003f24:	d1d4      	bne.n	8003ed0 <_printf_i+0x30>
 8003f26:	2378      	movs	r3, #120	; 0x78
 8003f28:	4865      	ldr	r0, [pc, #404]	; (80040c0 <_printf_i+0x220>)
 8003f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f2e:	e055      	b.n	8003fdc <_printf_i+0x13c>
 8003f30:	6813      	ldr	r3, [r2, #0]
 8003f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f36:	1d19      	adds	r1, r3, #4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6011      	str	r1, [r2, #0]
 8003f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f40:	2301      	movs	r3, #1
 8003f42:	e08c      	b.n	800405e <_printf_i+0x1be>
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f4a:	6011      	str	r1, [r2, #0]
 8003f4c:	bf18      	it	ne
 8003f4e:	b21b      	sxthne	r3, r3
 8003f50:	e7cf      	b.n	8003ef2 <_printf_i+0x52>
 8003f52:	6813      	ldr	r3, [r2, #0]
 8003f54:	6825      	ldr	r5, [r4, #0]
 8003f56:	1d18      	adds	r0, r3, #4
 8003f58:	6010      	str	r0, [r2, #0]
 8003f5a:	0628      	lsls	r0, r5, #24
 8003f5c:	d501      	bpl.n	8003f62 <_printf_i+0xc2>
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	e002      	b.n	8003f68 <_printf_i+0xc8>
 8003f62:	0668      	lsls	r0, r5, #25
 8003f64:	d5fb      	bpl.n	8003f5e <_printf_i+0xbe>
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	296f      	cmp	r1, #111	; 0x6f
 8003f6a:	bf14      	ite	ne
 8003f6c:	220a      	movne	r2, #10
 8003f6e:	2208      	moveq	r2, #8
 8003f70:	4852      	ldr	r0, [pc, #328]	; (80040bc <_printf_i+0x21c>)
 8003f72:	2100      	movs	r1, #0
 8003f74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f78:	6865      	ldr	r5, [r4, #4]
 8003f7a:	2d00      	cmp	r5, #0
 8003f7c:	60a5      	str	r5, [r4, #8]
 8003f7e:	f2c0 8095 	blt.w	80040ac <_printf_i+0x20c>
 8003f82:	6821      	ldr	r1, [r4, #0]
 8003f84:	f021 0104 	bic.w	r1, r1, #4
 8003f88:	6021      	str	r1, [r4, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d13d      	bne.n	800400a <_printf_i+0x16a>
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	f040 808e 	bne.w	80040b0 <_printf_i+0x210>
 8003f94:	4665      	mov	r5, ip
 8003f96:	2a08      	cmp	r2, #8
 8003f98:	d10b      	bne.n	8003fb2 <_printf_i+0x112>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	07db      	lsls	r3, r3, #31
 8003f9e:	d508      	bpl.n	8003fb2 <_printf_i+0x112>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	6862      	ldr	r2, [r4, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	bfde      	ittt	le
 8003fa8:	2330      	movle	r3, #48	; 0x30
 8003faa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fb2:	ebac 0305 	sub.w	r3, ip, r5
 8003fb6:	6123      	str	r3, [r4, #16]
 8003fb8:	f8cd 8000 	str.w	r8, [sp]
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	aa03      	add	r2, sp, #12
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff fef6 	bl	8003db4 <_printf_common>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d14d      	bne.n	8004068 <_printf_i+0x1c8>
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd0:	b005      	add	sp, #20
 8003fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fd6:	4839      	ldr	r0, [pc, #228]	; (80040bc <_printf_i+0x21c>)
 8003fd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fdc:	6813      	ldr	r3, [r2, #0]
 8003fde:	6821      	ldr	r1, [r4, #0]
 8003fe0:	1d1d      	adds	r5, r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6015      	str	r5, [r2, #0]
 8003fe6:	060a      	lsls	r2, r1, #24
 8003fe8:	d50b      	bpl.n	8004002 <_printf_i+0x162>
 8003fea:	07ca      	lsls	r2, r1, #31
 8003fec:	bf44      	itt	mi
 8003fee:	f041 0120 	orrmi.w	r1, r1, #32
 8003ff2:	6021      	strmi	r1, [r4, #0]
 8003ff4:	b91b      	cbnz	r3, 8003ffe <_printf_i+0x15e>
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	f022 0220 	bic.w	r2, r2, #32
 8003ffc:	6022      	str	r2, [r4, #0]
 8003ffe:	2210      	movs	r2, #16
 8004000:	e7b7      	b.n	8003f72 <_printf_i+0xd2>
 8004002:	064d      	lsls	r5, r1, #25
 8004004:	bf48      	it	mi
 8004006:	b29b      	uxthmi	r3, r3
 8004008:	e7ef      	b.n	8003fea <_printf_i+0x14a>
 800400a:	4665      	mov	r5, ip
 800400c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004010:	fb02 3311 	mls	r3, r2, r1, r3
 8004014:	5cc3      	ldrb	r3, [r0, r3]
 8004016:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800401a:	460b      	mov	r3, r1
 800401c:	2900      	cmp	r1, #0
 800401e:	d1f5      	bne.n	800400c <_printf_i+0x16c>
 8004020:	e7b9      	b.n	8003f96 <_printf_i+0xf6>
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	6825      	ldr	r5, [r4, #0]
 8004026:	1d18      	adds	r0, r3, #4
 8004028:	6961      	ldr	r1, [r4, #20]
 800402a:	6010      	str	r0, [r2, #0]
 800402c:	0628      	lsls	r0, r5, #24
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	d501      	bpl.n	8004036 <_printf_i+0x196>
 8004032:	6019      	str	r1, [r3, #0]
 8004034:	e002      	b.n	800403c <_printf_i+0x19c>
 8004036:	066a      	lsls	r2, r5, #25
 8004038:	d5fb      	bpl.n	8004032 <_printf_i+0x192>
 800403a:	8019      	strh	r1, [r3, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	4665      	mov	r5, ip
 8004040:	6123      	str	r3, [r4, #16]
 8004042:	e7b9      	b.n	8003fb8 <_printf_i+0x118>
 8004044:	6813      	ldr	r3, [r2, #0]
 8004046:	1d19      	adds	r1, r3, #4
 8004048:	6011      	str	r1, [r2, #0]
 800404a:	681d      	ldr	r5, [r3, #0]
 800404c:	6862      	ldr	r2, [r4, #4]
 800404e:	2100      	movs	r1, #0
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f837 	bl	80040c4 <memchr>
 8004056:	b108      	cbz	r0, 800405c <_printf_i+0x1bc>
 8004058:	1b40      	subs	r0, r0, r5
 800405a:	6060      	str	r0, [r4, #4]
 800405c:	6863      	ldr	r3, [r4, #4]
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	2300      	movs	r3, #0
 8004062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004066:	e7a7      	b.n	8003fb8 <_printf_i+0x118>
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	462a      	mov	r2, r5
 800406c:	4639      	mov	r1, r7
 800406e:	4630      	mov	r0, r6
 8004070:	47c0      	blx	r8
 8004072:	3001      	adds	r0, #1
 8004074:	d0aa      	beq.n	8003fcc <_printf_i+0x12c>
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	079b      	lsls	r3, r3, #30
 800407a:	d413      	bmi.n	80040a4 <_printf_i+0x204>
 800407c:	68e0      	ldr	r0, [r4, #12]
 800407e:	9b03      	ldr	r3, [sp, #12]
 8004080:	4298      	cmp	r0, r3
 8004082:	bfb8      	it	lt
 8004084:	4618      	movlt	r0, r3
 8004086:	e7a3      	b.n	8003fd0 <_printf_i+0x130>
 8004088:	2301      	movs	r3, #1
 800408a:	464a      	mov	r2, r9
 800408c:	4639      	mov	r1, r7
 800408e:	4630      	mov	r0, r6
 8004090:	47c0      	blx	r8
 8004092:	3001      	adds	r0, #1
 8004094:	d09a      	beq.n	8003fcc <_printf_i+0x12c>
 8004096:	3501      	adds	r5, #1
 8004098:	68e3      	ldr	r3, [r4, #12]
 800409a:	9a03      	ldr	r2, [sp, #12]
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	42ab      	cmp	r3, r5
 80040a0:	dcf2      	bgt.n	8004088 <_printf_i+0x1e8>
 80040a2:	e7eb      	b.n	800407c <_printf_i+0x1dc>
 80040a4:	2500      	movs	r5, #0
 80040a6:	f104 0919 	add.w	r9, r4, #25
 80040aa:	e7f5      	b.n	8004098 <_printf_i+0x1f8>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ac      	bne.n	800400a <_printf_i+0x16a>
 80040b0:	7803      	ldrb	r3, [r0, #0]
 80040b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ba:	e76c      	b.n	8003f96 <_printf_i+0xf6>
 80040bc:	08004375 	.word	0x08004375
 80040c0:	08004386 	.word	0x08004386

080040c4 <memchr>:
 80040c4:	b510      	push	{r4, lr}
 80040c6:	b2c9      	uxtb	r1, r1
 80040c8:	4402      	add	r2, r0
 80040ca:	4290      	cmp	r0, r2
 80040cc:	4603      	mov	r3, r0
 80040ce:	d101      	bne.n	80040d4 <memchr+0x10>
 80040d0:	2300      	movs	r3, #0
 80040d2:	e003      	b.n	80040dc <memchr+0x18>
 80040d4:	781c      	ldrb	r4, [r3, #0]
 80040d6:	3001      	adds	r0, #1
 80040d8:	428c      	cmp	r4, r1
 80040da:	d1f6      	bne.n	80040ca <memchr+0x6>
 80040dc:	4618      	mov	r0, r3
 80040de:	bd10      	pop	{r4, pc}

080040e0 <memcpy>:
 80040e0:	b510      	push	{r4, lr}
 80040e2:	1e43      	subs	r3, r0, #1
 80040e4:	440a      	add	r2, r1
 80040e6:	4291      	cmp	r1, r2
 80040e8:	d100      	bne.n	80040ec <memcpy+0xc>
 80040ea:	bd10      	pop	{r4, pc}
 80040ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040f4:	e7f7      	b.n	80040e6 <memcpy+0x6>

080040f6 <memmove>:
 80040f6:	4288      	cmp	r0, r1
 80040f8:	b510      	push	{r4, lr}
 80040fa:	eb01 0302 	add.w	r3, r1, r2
 80040fe:	d807      	bhi.n	8004110 <memmove+0x1a>
 8004100:	1e42      	subs	r2, r0, #1
 8004102:	4299      	cmp	r1, r3
 8004104:	d00a      	beq.n	800411c <memmove+0x26>
 8004106:	f811 4b01 	ldrb.w	r4, [r1], #1
 800410a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800410e:	e7f8      	b.n	8004102 <memmove+0xc>
 8004110:	4283      	cmp	r3, r0
 8004112:	d9f5      	bls.n	8004100 <memmove+0xa>
 8004114:	1881      	adds	r1, r0, r2
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	42d3      	cmn	r3, r2
 800411a:	d100      	bne.n	800411e <memmove+0x28>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004122:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004126:	e7f7      	b.n	8004118 <memmove+0x22>

08004128 <_free_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4605      	mov	r5, r0
 800412c:	2900      	cmp	r1, #0
 800412e:	d043      	beq.n	80041b8 <_free_r+0x90>
 8004130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004134:	1f0c      	subs	r4, r1, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	bfb8      	it	lt
 800413a:	18e4      	addlt	r4, r4, r3
 800413c:	f000 f8d0 	bl	80042e0 <__malloc_lock>
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <_free_r+0x94>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	4610      	mov	r0, r2
 8004146:	b933      	cbnz	r3, 8004156 <_free_r+0x2e>
 8004148:	6063      	str	r3, [r4, #4]
 800414a:	6014      	str	r4, [r2, #0]
 800414c:	4628      	mov	r0, r5
 800414e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004152:	f000 b8c6 	b.w	80042e2 <__malloc_unlock>
 8004156:	42a3      	cmp	r3, r4
 8004158:	d90b      	bls.n	8004172 <_free_r+0x4a>
 800415a:	6821      	ldr	r1, [r4, #0]
 800415c:	1862      	adds	r2, r4, r1
 800415e:	4293      	cmp	r3, r2
 8004160:	bf01      	itttt	eq
 8004162:	681a      	ldreq	r2, [r3, #0]
 8004164:	685b      	ldreq	r3, [r3, #4]
 8004166:	1852      	addeq	r2, r2, r1
 8004168:	6022      	streq	r2, [r4, #0]
 800416a:	6063      	str	r3, [r4, #4]
 800416c:	6004      	str	r4, [r0, #0]
 800416e:	e7ed      	b.n	800414c <_free_r+0x24>
 8004170:	4613      	mov	r3, r2
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	b10a      	cbz	r2, 800417a <_free_r+0x52>
 8004176:	42a2      	cmp	r2, r4
 8004178:	d9fa      	bls.n	8004170 <_free_r+0x48>
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	1858      	adds	r0, r3, r1
 800417e:	42a0      	cmp	r0, r4
 8004180:	d10b      	bne.n	800419a <_free_r+0x72>
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	4401      	add	r1, r0
 8004186:	1858      	adds	r0, r3, r1
 8004188:	4282      	cmp	r2, r0
 800418a:	6019      	str	r1, [r3, #0]
 800418c:	d1de      	bne.n	800414c <_free_r+0x24>
 800418e:	6810      	ldr	r0, [r2, #0]
 8004190:	6852      	ldr	r2, [r2, #4]
 8004192:	4401      	add	r1, r0
 8004194:	6019      	str	r1, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	e7d8      	b.n	800414c <_free_r+0x24>
 800419a:	d902      	bls.n	80041a2 <_free_r+0x7a>
 800419c:	230c      	movs	r3, #12
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	e7d4      	b.n	800414c <_free_r+0x24>
 80041a2:	6820      	ldr	r0, [r4, #0]
 80041a4:	1821      	adds	r1, r4, r0
 80041a6:	428a      	cmp	r2, r1
 80041a8:	bf01      	itttt	eq
 80041aa:	6811      	ldreq	r1, [r2, #0]
 80041ac:	6852      	ldreq	r2, [r2, #4]
 80041ae:	1809      	addeq	r1, r1, r0
 80041b0:	6021      	streq	r1, [r4, #0]
 80041b2:	6062      	str	r2, [r4, #4]
 80041b4:	605c      	str	r4, [r3, #4]
 80041b6:	e7c9      	b.n	800414c <_free_r+0x24>
 80041b8:	bd38      	pop	{r3, r4, r5, pc}
 80041ba:	bf00      	nop
 80041bc:	20000090 	.word	0x20000090

080041c0 <_malloc_r>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	1ccd      	adds	r5, r1, #3
 80041c4:	f025 0503 	bic.w	r5, r5, #3
 80041c8:	3508      	adds	r5, #8
 80041ca:	2d0c      	cmp	r5, #12
 80041cc:	bf38      	it	cc
 80041ce:	250c      	movcc	r5, #12
 80041d0:	2d00      	cmp	r5, #0
 80041d2:	4606      	mov	r6, r0
 80041d4:	db01      	blt.n	80041da <_malloc_r+0x1a>
 80041d6:	42a9      	cmp	r1, r5
 80041d8:	d903      	bls.n	80041e2 <_malloc_r+0x22>
 80041da:	230c      	movs	r3, #12
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	2000      	movs	r0, #0
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
 80041e2:	f000 f87d 	bl	80042e0 <__malloc_lock>
 80041e6:	4a21      	ldr	r2, [pc, #132]	; (800426c <_malloc_r+0xac>)
 80041e8:	6814      	ldr	r4, [r2, #0]
 80041ea:	4621      	mov	r1, r4
 80041ec:	b991      	cbnz	r1, 8004214 <_malloc_r+0x54>
 80041ee:	4c20      	ldr	r4, [pc, #128]	; (8004270 <_malloc_r+0xb0>)
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	b91b      	cbnz	r3, 80041fc <_malloc_r+0x3c>
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 f863 	bl	80042c0 <_sbrk_r>
 80041fa:	6020      	str	r0, [r4, #0]
 80041fc:	4629      	mov	r1, r5
 80041fe:	4630      	mov	r0, r6
 8004200:	f000 f85e 	bl	80042c0 <_sbrk_r>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d124      	bne.n	8004252 <_malloc_r+0x92>
 8004208:	230c      	movs	r3, #12
 800420a:	4630      	mov	r0, r6
 800420c:	6033      	str	r3, [r6, #0]
 800420e:	f000 f868 	bl	80042e2 <__malloc_unlock>
 8004212:	e7e4      	b.n	80041de <_malloc_r+0x1e>
 8004214:	680b      	ldr	r3, [r1, #0]
 8004216:	1b5b      	subs	r3, r3, r5
 8004218:	d418      	bmi.n	800424c <_malloc_r+0x8c>
 800421a:	2b0b      	cmp	r3, #11
 800421c:	d90f      	bls.n	800423e <_malloc_r+0x7e>
 800421e:	600b      	str	r3, [r1, #0]
 8004220:	18cc      	adds	r4, r1, r3
 8004222:	50cd      	str	r5, [r1, r3]
 8004224:	4630      	mov	r0, r6
 8004226:	f000 f85c 	bl	80042e2 <__malloc_unlock>
 800422a:	f104 000b 	add.w	r0, r4, #11
 800422e:	1d23      	adds	r3, r4, #4
 8004230:	f020 0007 	bic.w	r0, r0, #7
 8004234:	1ac3      	subs	r3, r0, r3
 8004236:	d0d3      	beq.n	80041e0 <_malloc_r+0x20>
 8004238:	425a      	negs	r2, r3
 800423a:	50e2      	str	r2, [r4, r3]
 800423c:	e7d0      	b.n	80041e0 <_malloc_r+0x20>
 800423e:	684b      	ldr	r3, [r1, #4]
 8004240:	428c      	cmp	r4, r1
 8004242:	bf16      	itet	ne
 8004244:	6063      	strne	r3, [r4, #4]
 8004246:	6013      	streq	r3, [r2, #0]
 8004248:	460c      	movne	r4, r1
 800424a:	e7eb      	b.n	8004224 <_malloc_r+0x64>
 800424c:	460c      	mov	r4, r1
 800424e:	6849      	ldr	r1, [r1, #4]
 8004250:	e7cc      	b.n	80041ec <_malloc_r+0x2c>
 8004252:	1cc4      	adds	r4, r0, #3
 8004254:	f024 0403 	bic.w	r4, r4, #3
 8004258:	42a0      	cmp	r0, r4
 800425a:	d005      	beq.n	8004268 <_malloc_r+0xa8>
 800425c:	1a21      	subs	r1, r4, r0
 800425e:	4630      	mov	r0, r6
 8004260:	f000 f82e 	bl	80042c0 <_sbrk_r>
 8004264:	3001      	adds	r0, #1
 8004266:	d0cf      	beq.n	8004208 <_malloc_r+0x48>
 8004268:	6025      	str	r5, [r4, #0]
 800426a:	e7db      	b.n	8004224 <_malloc_r+0x64>
 800426c:	20000090 	.word	0x20000090
 8004270:	20000094 	.word	0x20000094

08004274 <_realloc_r>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	4607      	mov	r7, r0
 8004278:	4614      	mov	r4, r2
 800427a:	460e      	mov	r6, r1
 800427c:	b921      	cbnz	r1, 8004288 <_realloc_r+0x14>
 800427e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004282:	4611      	mov	r1, r2
 8004284:	f7ff bf9c 	b.w	80041c0 <_malloc_r>
 8004288:	b922      	cbnz	r2, 8004294 <_realloc_r+0x20>
 800428a:	f7ff ff4d 	bl	8004128 <_free_r>
 800428e:	4625      	mov	r5, r4
 8004290:	4628      	mov	r0, r5
 8004292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004294:	f000 f826 	bl	80042e4 <_malloc_usable_size_r>
 8004298:	42a0      	cmp	r0, r4
 800429a:	d20f      	bcs.n	80042bc <_realloc_r+0x48>
 800429c:	4621      	mov	r1, r4
 800429e:	4638      	mov	r0, r7
 80042a0:	f7ff ff8e 	bl	80041c0 <_malloc_r>
 80042a4:	4605      	mov	r5, r0
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d0f2      	beq.n	8004290 <_realloc_r+0x1c>
 80042aa:	4631      	mov	r1, r6
 80042ac:	4622      	mov	r2, r4
 80042ae:	f7ff ff17 	bl	80040e0 <memcpy>
 80042b2:	4631      	mov	r1, r6
 80042b4:	4638      	mov	r0, r7
 80042b6:	f7ff ff37 	bl	8004128 <_free_r>
 80042ba:	e7e9      	b.n	8004290 <_realloc_r+0x1c>
 80042bc:	4635      	mov	r5, r6
 80042be:	e7e7      	b.n	8004290 <_realloc_r+0x1c>

080042c0 <_sbrk_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	2300      	movs	r3, #0
 80042c4:	4c05      	ldr	r4, [pc, #20]	; (80042dc <_sbrk_r+0x1c>)
 80042c6:	4605      	mov	r5, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	f7fc fd84 	bl	8000dd8 <_sbrk>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d102      	bne.n	80042da <_sbrk_r+0x1a>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	b103      	cbz	r3, 80042da <_sbrk_r+0x1a>
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	20000248 	.word	0x20000248

080042e0 <__malloc_lock>:
 80042e0:	4770      	bx	lr

080042e2 <__malloc_unlock>:
 80042e2:	4770      	bx	lr

080042e4 <_malloc_usable_size_r>:
 80042e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042e8:	1f18      	subs	r0, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bfbc      	itt	lt
 80042ee:	580b      	ldrlt	r3, [r1, r0]
 80042f0:	18c0      	addlt	r0, r0, r3
 80042f2:	4770      	bx	lr

080042f4 <_init>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr

08004300 <_fini>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	bf00      	nop
 8004304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004306:	bc08      	pop	{r3}
 8004308:	469e      	mov	lr, r3
 800430a:	4770      	bx	lr
